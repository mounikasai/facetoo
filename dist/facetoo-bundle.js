!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("Handlebars")):"function"==typeof define&&define.amd?define(["Handlebars"],t):"object"==typeof exports?exports.Facetoo=t(require("Handlebars")):e.Facetoo=t(e.Handlebars)}("undefined"!=typeof self?self:this,function(e){return function(e){function t(i){if(n[i])return n[i].exports;var o=n[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var n={};return t.m=e,t.c=n,t.d=function(e,n,i){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:i})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=1)}([function(t,n){t.exports=e},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=n(2),a=n(3),r=n(5),l=n(10),c=function(){function e(e){var t=this;this.handlerChain=[],this.showLoader=function(){jQuery(t.configStore.Options.containerElement).find(".facet-loader").addClass("active")},this.hideLoader=function(){jQuery(t.configStore.Options.containerElement).find(".facet-loader").remove("active")},this.BindOnlyFacets=function(e){if(t.bindFinished){var n=t.templateService.BindOnlyFacets(e);t.parentElement.find(".facet-body").html(n)}else{t.templateService.Bind(e,[])}},this.BindOnlyAppliedFilters=function(e){if(t.bindFinished){var n=t.templateService.BindOnlyAppliedFilters(e);t.parentElement.find(".facet-subheader").html(n)}else{t.templateService.Bind([],e)}},this.Bind=function(e,n){t.parentElement.html(t.templateService.Bind(e,n)),t.bindFinished=!0},i.registerHelper("isChecked",function(e){return e?"checked":""}),this.configStore=new l.ConfigStore(e),this.parentElement=jQuery(e.containerElement),this.templateService=new r.FacetTemplateService,this.handlerChain.push(new o.ExpandCollapseHandler(this.parentElement,this.configStore)),this.handlerChain.push(new a.FilterActionHandler(this.parentElement,this.configStore)),this.handlerChain.forEach(function(e){e.RegisterDomHandler()})}return e}();t.Facet=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i;!function(e){e[e.Show=0]="Show",e[e.Hide=1]="Hide",e[e.Toggle=2]="Toggle"}(i||(i={}));var o=function(){function e(e,t){this.element=e,this.configStore=t,this.ControlVisibilityOfFilter=function(e,t){var n=e.children("i"),o=n.hasClass("down");i.Toggle!==t&&(o&&t===i.Show||!o&&t===i.Hide)||(o?(e.parents(".facet-item").find(".facet-item-description").hide(),n.removeClass("down"),n.addClass("right")):(e.parents(".facet-item").find(".facet-item-description").show(),n.removeClass("right"),n.addClass("down")))}}return e.prototype.RegisterDomHandler=function(){var e=this;this.element.on("click",".facet-body .expand-all",function(t){e.element.find(".facet-item-header").each(function(t,n){e.ControlVisibilityOfFilter(jQuery(n),i.Show)}),t.stopPropagation()}),this.element.on("click",".facet-body .collapse-all",function(t){e.element.find(".facet-item-header").each(function(t,n){e.ControlVisibilityOfFilter(jQuery(n),i.Hide)}),t.stopPropagation()}),this.element.on("click",".facet-body .facet-item .facet-item-header",function(t){var n=jQuery(t.target).parents(".facet-item-header");e.element.find(".facet-header .button").removeAttr("disabled"),e.ControlVisibilityOfFilter(n,i.Toggle),t.stopPropagation()})},e.prototype.onResize=function(){},e.prototype.onDocumentClick=function(e){},e}();t.ExpandCollapseHandler=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(4),o=function(){function e(e,t){this.element=e,this.configStore=t}return e.prototype.RegisterDomHandler=function(){var e=this;this.element.on("change",".facet-body .facet-item-description .facet-value-checkbox",function(t){var n=jQuery(t.target),o=n.val().toString(),a=o.split(":"),r=n.is(":checked"),l=r?i.FilterActionType.Add:i.FilterActionType.Minus;e.configStore.Options.onFilterChange(a[0],a[1],l)}),this.element.on("click",".facet-subheader .facet-labels .label",function(t){var n=jQuery(t.target);n.is(".label")||(n=n.parents(".label"));var o=n.attr("data-filter-entry").toString(),a=o.split(":");e.configStore.Options.onFilterChange(a[0],a[1],i.FilterActionType.Minus)}),this.element.on("click",".facet-subheader .remove-all",function(t){e.element.find(".facet-subheader").hide(),e.configStore.Options.onAllFilterRemove()})},e.prototype.onResize=function(){},e.prototype.onDocumentClick=function(e){},e}();t.FilterActionHandler=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});!function(e){e.Add="Add",e.Minus="Minus"}(t.FilterActionType||(t.FilterActionType={}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=n(6),a=n(7),r=n(8),l=n(9),c=function(){function e(){this.tempateFunctionForFacetMain=i.compile(l),this.tempateFunctionForFacetHeader=i.compile(r),this.tempateFunctionForFacetSubHeader=i.compile(o),this.tempateFunctionForFacetBody=i.compile(a)}return e.prototype.Bind=function(e,t){var n=this.tempateFunctionForFacetHeader(),i=this.tempateFunctionForFacetSubHeader(t),o=this.tempateFunctionForFacetBody(e);return this.tempateFunctionForFacetMain({headerContent:n,subHeaderContent:i,bodyContent:o})},e.prototype.BindOnlyFacets=function(e){return this.tempateFunctionForFacetBody(e)},e.prototype.BindOnlyAppliedFilters=function(e){return this.tempateFunctionForFacetSubHeader(e)},e}();t.FacetTemplateService=c},function(e,t){e.exports='{{#if this.length}}\n<div class="content facet-subheader">\n    <h5 class="ui sub blue floated left header">Applied Filters</h5>\n    <div class="ui mini right floated buttons">\n        <button class="ui mini icon button remove-all">\n            <i class="close icon"></i>\n        </button>\n    </div>\n    <div class="ui tiny hidden clearing divider"></div>\n    <table class="ui very compact small collapsing border-less table" style="border: none;">\n        <tbod>\n            {{#each this}}\n            <tr class="top aligned">\n                <td>{{id}}</td>\n                <td>\n                    <span class="ui mini blue labels facet-labels">\n                        {{#each facetValues}}\n                        <span class="ui label remove-label" data-filter-entry="{{../id}}:{{this.label}}">\n                            {{this.label}}\n                            <i class="icon close"></i>\n                        </span>\n                        {{/each}}\n                    </span>\n                </td>\n            </tr>\n            {{/each}}\n        </tbod>\n    </table>\n</div>\n{{/if}}'},function(e,t){e.exports='<div class="content facet-body" style="height: 100%;overflow:hidden;">\n    <h5 class="ui sub blue left floated header">Select Filters</h5>\n    <div class="ui mini right floated buttons">\n        <button class="ui mini icon button expand-all">\n            <i class="plus icon"></i>\n        </button>\n        <button class="ui mini icon button collapse-all">\n            <i class="minus icon"></i>\n        </button>\n    </div>\n    <div class="ui tiny hidden clearing divider"></div>\n    <div class="ui medium list facet-list" style="height: 100%;overflow: auto;">\n        {{#each this}}\n        <div class="item facet-item">\n            <div class="content">\n                <div class="facet-item-header cursor-pointer">\n                    <i class="right triangle icon"></i>\n                    <span>{{name}}</span>\n                </div>\n                <div class="description facet-item-description" style="display:none;">\n                    \x3c!-- <div class="ui mini input">\n                        <input type="text" placeholder="Search...">\n                    </div> --\x3e\n                    <div class="ui small list">\n                        {{#each facetValues}}\n                        <div class="item">\n                            <input style="height:0.85em;" id="{{label}}-{{@index}}" {{isChecked selected}} class="facet-value-checkbox cursor-pointer" value="{{../id}}:{{label}}" type="checkbox"/>\n                            <label style="font-size:0.85em;" class="cursor-pointer" for="{{label}}-{{@index}}">{{label}} ({{count}})</label>\n                        </div>\n                        {{/each}}\n                    </div>\n                </div>\n            </div>\n        </div>\n        {{/each}}\n    </div>\n</div>'},function(e,t){e.exports='<div class="content facet-header">\n    <h5 class="ui sub blue floated left header">Filters Section</h5>\n    <div class="ui mini right floated buttons">\n        <button class="ui mini icon button remove-all">\n            <i class="close icon"></i>\n        </button>\n    </div>\n</div>'},function(e,t){e.exports='<style>\n    .remove-label:hover{\n        text-decoration: line-through;\n        cursor: pointer;\n    }\n    .border-less tr td { border-top: 0px !important; }\n    .cursor-pointer{\n        cursor: pointer;\n    }\n</style>\n\n<div class="ui fluid card" style="padding-top : 0px;height:100%;overflow:hidden;">\n    <div class="ui inverted dimmer facet-loader">\n        <div class="ui medium text loader">Loading Filters...</div>\n    </div>\n    {{{headerContent}}}\n    {{{subHeaderContent}}}\n    {{{bodyContent}}}\n</div>'},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){this.options=e}return Object.defineProperty(e.prototype,"Options",{get:function(){return this.options},enumerable:!0,configurable:!0}),e}();t.ConfigStore=i}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,