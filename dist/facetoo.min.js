!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n(require("handlebars/runtime")):"function"==typeof define&&define.amd?define(["handlebars.runtime"],n):"object"==typeof exports?exports.Facetoo=n(require("handlebars/runtime")):e.Facetoo=n(e.Handlebars)}("undefined"!=typeof self?self:this,function(e){return function(e){function n(i){if(t[i])return t[i].exports;var a=t[i]={i:i,l:!1,exports:{}};return e[i].call(a.exports,a,a.exports,n),a.l=!0,a.exports}var t={};return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},n.p="",n(n.s=7)}([function(n,t){n.exports=e},function(e,n,t){var i=t(0);e.exports=(i.default||i).template({compiler:[7,">= 4.0.0"],main:function(e,n,t,i,a){return'<div class="show-facet gui fluid-h cursor-pointer">\r\n    <i class="gui gui-icon gui-icon-chevron-right"></i>\r\n    <br>\r\n    <i class="gui gui-icon gui-icon-filter primary"></i>\r\n</div>'},useData:!0})},function(e,n,t){function i(e){return e&&(e.__esModule?e.default:e)}var a=t(0);e.exports=(a.default||a).template({1:function(e,n,a,l,o,r,c){var s,u=e.lambda,d=e.escapeExpression,f=null!=n?n:e.nullContext||{};return'        <div class="item facet-item" data-attr-name="'+d(u(null!=n?n.name:n,n))+'">\n            <div class="content">\n                <div class="facet-item-header fluid cursor-pointer gui selectable item">\n                    <span class="gui gui-subheading-2 primary">\n                        '+d(u(null!=n?n.name:n,n))+" "+(null!=(s=i(t(11)).call(f,null!=n?n.facetValues:n,{name:"SelectedFiltersCount",hash:{},data:o}))?s:"")+'\n                    </span>\n                    <i class="gui gui-icon gui-icon-chevron-down right m-r-10"></i>\n                </div>\n                <div class="clear"></div>\n                <div class="description gui gui-hidden facet-item-description m-t-5">\n                    <div class="gui fluid-w fluid-h m-0 p-0">\n                        '+(null!=(s=a.each.call(f,null!=n?n.facetValues:n,{name:"each",hash:{},fn:e.program(2,o,0,r,c),inverse:e.noop,data:o}))?s:"")+"                    </div>\n                </div>\n            </div>\n        </div>\n"},2:function(e,n,t,i,a,l,o){var r;return' \n                        <div class="item">\n'+(null!=(r=t.if.call(null!=n?n:e.nullContext||{},null!=n?n.selected:n,{name:"if",hash:{},fn:e.program(3,a,0,l,o),inverse:e.program(5,a,0,l,o),data:a}))?r:"")+"                        </div>\n"},3:function(e,n,a,l,o,r,c){var s=e.lambda,u=e.escapeExpression,d=null!=n?n:e.nullContext||{};return'                            <label title="'+u(s(null!=n?n.label:n,n))+'" class="gui cursor-pointer no-wrap primary">\n                                <input class="gui facet-value-checkbox cursor-pointer m-l-0" id="'+u(s(null!=n?n.label:n,n))+"-"+u(s(o&&o.index,n))+'" '+u(i(t(3)).call(d,null!=n?n.selected:n,{name:"Checked",hash:{},data:o}))+" "+u(i(t(4)).call(d,null!=n?n.disabled:n,{name:"Disabled",hash:{},data:o}))+' value="'+u(s(null!=c[1]?c[1].id:c[1],n))+":"+u(s(null!=n?n.label:n,n))+":"+u(s(null!=c[1]?c[1].type:c[1],n))+'" type="checkbox" />\n                                '+u(s(null!=n?n.label:n,n))+'\n                                <span class="gui-body-2">('+u(s(null!=n?n.count:n,n))+")</span>\n                            </label>\n"},5:function(e,n,a,l,o,r,c){var s=e.lambda,u=e.escapeExpression,d=null!=n?n:e.nullContext||{};return'                            <label title="'+u(s(null!=n?n.label:n,n))+'" class="gui cursor-pointer no-wrap">\n                                <input class="gui facet-value-checkbox cursor-pointer m-l-0" id="'+u(s(null!=n?n.label:n,n))+"-"+u(s(o&&o.index,n))+'" '+u(i(t(3)).call(d,null!=n?n.selected:n,{name:"Checked",hash:{},data:o}))+" "+u(i(t(4)).call(d,null!=n?n.disabled:n,{name:"Disabled",hash:{},data:o}))+' value="'+u(s(null!=c[1]?c[1].id:c[1],n))+":"+u(s(null!=n?n.label:n,n))+":"+u(s(null!=c[1]?c[1].type:c[1],n))+'" type="checkbox" />\n                                '+u(s(null!=n?n.label:n,n))+'\n                                <span class="gui-body-2">('+u(s(null!=n?n.count:n,n))+")</span>\n                            </label>\n"},compiler:[7,">= 4.0.0"],main:function(e,n,t,i,a,l,o){var r;return'<div class="gui fluid-h of-hidden">\n    <div class="gui m-5">\n        <div class="gui left">\n            <span class="gui caps bold gui-subheading-2">\n                    Filter By\n            </span>\n        </div>\n        <div class="gui right">\n            <a class="gui cursor-pointer hide-facet">\n                <i class="gui-icon gui-icon-chevron-left"></i>\n            </a>\n        </div>\n    </div>\n    <div class="gui clear"></div>\n    <div class="gui m-t-5"></div>\n    <div class="gui left">\n        <a class="gui cursor-pointer expand-all">\n            <i class="gui-icon gui-icon-add"></i>\n            Expand All\n        </a>\n        <a class="gui cursor-pointer m-l-10 collapse-all">\n            <i class="gui-icon  gui-icon-minus"></i>\n            Collapse All\n        </a>\n    </div>\n    <div class="gui clear"></div>\n    <div class="gui m-t-5"></div>\n    <div class="gui input fluid-w p-t-5 p-r-5 p-b-5 p-l-1">\n        <input class="gui input p-5 fluid-w gui-subheading-2 filter-search-input" placeholder="Search Filters" />\n    </div>\n    <div class="gui fluid-h facet-list of-auto">\n'+(null!=(r=t.each.call(null!=n?n:e.nullContext||{},null!=n?n.facets:n,{name:"each",hash:{},fn:e.program(1,a,0,l,o),inverse:e.noop,data:a}))?r:"")+"    </div>\n</div>"},useData:!0,useDepths:!0})},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(e){return e?"checked":""};n.default=i},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(e){return e?"disabled":""};n.default=i},function(e,n,t){"use strict";function i(e){for(var t in e)n.hasOwnProperty(t)||(n[t]=e[t])}Object.defineProperty(n,"__esModule",{value:!0}),i(t(13)),i(t(14)),i(t(15)),i(t(16)),i(t(17))},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});!function(e){e.Add="Add",e.Minus="Minus"}(n.FilterActionType||(n.FilterActionType={}))},function(e,n,t){"use strict";function i(e){for(var t in e)n.hasOwnProperty(t)||(n[t]=e[t])}Object.defineProperty(n,"__esModule",{value:!0}),i(t(8)),i(t(18))},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=t(9),a=t(12),l=t(5),o=function(){function e(e){var n=this;this.handlerChain=[],this.bind=function(e){var t=n.templateService.bind(e);n.facetElement.html(t)},this.destroy=function(){void 0!==n.facetElement&&n.facetElement.off()},this.configStore=new a.FacetConfigStore(e),this.facetElement=jQuery(e.containerElement),this.templateService=new i.FacetTemplateService(this.configStore),this.handlerChain.push(new l.ExpandCollapseFacetsHandler(this.facetElement,this.configStore)),this.handlerChain.push(new l.FacetActionHandler(this.facetElement,this.configStore)),this.handlerChain.push(new l.FacetSearchHandler(this.facetElement,this.configStore)),this.handlerChain.push(new l.HideFacetSectionHandler(this.facetElement,this.configStore)),this.handlerChain.forEach(function(e){e.RegisterDomHandler()})}return e}();n.Facet=o},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=t(10),a=function(){function e(e){this.configStore=e,this.tempateFunctionForFacetMain=i}return e.prototype.bind=function(e){var n=this.configStore.Options.collapsed;return this.tempateFunctionForFacetMain({collapsed:n,facets:e})},e}();n.FacetTemplateService=a},function(e,n,t){var i=t(0);e.exports=(i.default||i).template({1:function(e,n,i,a,l){var o;return'    <div class="facet-collapsed-body gui fluid-h w-auto">'+(null!=(o=e.invokePartial(t(1),n,{name:"facet-collapsed",data:l,helpers:i,partials:a,decorators:e.decorators}))?o:"")+'</div>\n    <div class="facet-body gui fluid-h of-hidden gui-hidden">'+(null!=(o=e.invokePartial(t(2),n,{name:"facet-body",data:l,helpers:i,partials:a,decorators:e.decorators}))?o:"")+"</div>\n"},3:function(e,n,i,a,l){var o;return'    <div class="facet-collapsed-body gui fluid-h w-auto gui-hidden">'+(null!=(o=e.invokePartial(t(1),n,{name:"facet-collapsed",data:l,helpers:i,partials:a,decorators:e.decorators}))?o:"")+'</div>\n    <div class="facet-body gui fluid-h of-hidden">'+(null!=(o=e.invokePartial(t(2),n,{name:"facet-body",data:l,helpers:i,partials:a,decorators:e.decorators}))?o:"")+"</div>\n"},compiler:[7,">= 4.0.0"],main:function(e,n,t,i,a){var l;return'<div class="gui fluid-h ">\n'+(null!=(l=t.if.call(null!=n?n:e.nullContext||{},null!=n?n.collapsed:n,{name:"if",hash:{},fn:e.program(1,a,0),inverse:e.program(3,a,0),data:a}))?l:"")+"</div>"},usePartial:!0,useData:!0})},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(e){var n=0;if(void 0!==e&&null!==e&&e.length>0)for(var t=0,i=e;t<i.length;t++){var a=i[t];a.selected&&n++}return 0===n?"":'<span class="gui-body-2">('+n+")</span>"};n.default=i},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e){var n=this;if(this.defaultFacetOptions={animationTime:200,collapsed:!1,containerElement:null,onFilterChange:function(e,n,t){}},this.extendOptions=function(e){return n.options=jQuery.extend({},n.defaultFacetOptions,e)},this.extendOptions(e),null===e.containerElement)throw new Error("Please Provide a valid container Element object")}return Object.defineProperty(e.prototype,"Options",{get:function(){return this.options},enumerable:!0,configurable:!0}),e}();n.FacetConfigStore=i},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i;!function(e){e[e.Show=0]="Show",e[e.Hide=1]="Hide",e[e.Toggle=2]="Toggle"}(i||(i={}));var a=function(){function e(e,n){this.element=e,this.configStore=n,this.ControlVisibilityOfFilter=function(e,n){var t=e.children("i"),a=t.hasClass("gui-icon-chevron-up");i.Toggle!==n&&(a&&n===i.Show||!a&&n===i.Hide)||(a?(e.parents(".facet-item").find(".facet-item-description").slideUp(200),t.removeClass("gui-icon-chevron-up"),t.addClass("gui-icon-chevron-down")):(e.parents(".facet-item").find(".facet-item-description").slideDown(200),t.removeClass("gui-icon-chevron-down"),t.addClass("gui-icon-chevron-up")))}}return e.prototype.RegisterDomHandler=function(){var e=this;this.element.on("click",".expand-all",function(n){e.element.find(".facet-item-header").each(function(n,t){e.ControlVisibilityOfFilter(jQuery(t),i.Show)}),n.stopPropagation()}),this.element.on("click",".collapse-all",function(n){e.element.find(".facet-item-header").each(function(n,t){e.ControlVisibilityOfFilter(jQuery(t),i.Hide)}),n.stopPropagation()}),this.element.on("click",".facet-item-header",function(n){var t=jQuery(n.target),a=t.is(".facet-item-header")?t:t.parent(".facet-item-header");e.element.find(".facet-header .button").removeAttr("disabled"),e.ControlVisibilityOfFilter(a,i.Toggle),n.stopPropagation()})},e.prototype.onResize=function(){},e.prototype.onDocumentClick=function(e){},e}();n.ExpandCollapseFacetsHandler=a},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=t(6),a=function(){function e(e,n){this.element=e,this.configStore=n}return e.prototype.RegisterDomHandler=function(){var e=this;this.element.on("change",".facet-body .facet-item-description .facet-value-checkbox",function(n){var t=jQuery(n.target),a=t.val().toString(),l=a.split(":"),o=t.is(":checked"),r=o?i.FilterActionType.Add:i.FilterActionType.Minus;e.configStore.Options.onFilterChange(l[0],l[1],r,l[2]),n.stopPropagation()})},e.prototype.onResize=function(){},e.prototype.onDocumentClick=function(e){},e}();n.FacetActionHandler=a},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,n){this.element=e,this.configStore=n}return e.prototype.RegisterDomHandler=function(){var e=this;this.element.on("keyup",".filter-search-input",function(n){var t=jQuery(n.target),i=t.val().toString().toLowerCase();e.element.find(".facet-list .facet-item").each(function(n,t){-1===jQuery(t).attr("data-attr-name").toLowerCase().indexOf(i)?jQuery(t).fadeOut(e.configStore.Options.animationTime):jQuery(t).fadeIn(e.configStore.Options.animationTime)}),n.stopPropagation()})},e.prototype.onResize=function(){},e.prototype.onDocumentClick=function(e){},e}();n.FacetSearchHandler=i},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=t(6),a=function(){function e(e,n){this.filterElement=e,this.configStore=n}return e.prototype.RegisterDomHandler=function(){var e=this;this.filterElement.on("click",".facet-subheader .facet-labels .label",function(n){var t=jQuery(n.target);t.is(".label")||(t=t.parents(".label"));var a=t.attr("data-filter-entry").toString(),l=a.split(":");e.configStore.Options.onFilterChange(l[0],l[1],i.FilterActionType.Minus,l[2]),n.stopPropagation()}),this.filterElement.on("click",".facet-subheader .remove-all",function(n){e.configStore.Options.onAllFilterRemove(),n.stopPropagation()})},e.prototype.onResize=function(){},e.prototype.onDocumentClick=function(e){},e}();n.FilterActionHandler=a},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,n){var t=this;this.element=e,this.configStore=n,this.RegisterDomHandler=function(){t.element.on("click",".hide-facet",function(e){$(".facet-body").hide(),$(".facet-collapsed-body").fadeIn(t.configStore.Options.animationTime),t.configStore.Options.collapsed=!0,e.stopPropagation()}),t.element.on("click",".show-facet",function(e){$(".facet-collapsed-body").hide(),$(".facet-body").fadeIn(t.configStore.Options.animationTime),t.configStore.Options.collapsed=!1,e.stopPropagation()})}}return e.prototype.onResize=function(){},e.prototype.onDocumentClick=function(e){},e}();n.HideFacetSectionHandler=i},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=t(19),a=t(21),l=t(5),o=function(){function e(e){var n=this;this.handlerChain=[],this.bind=function(e){var t=n.templateService.bind(e);n.filterElement.html(t)},this.destroy=function(){void 0!==n.filterElement&&n.filterElement.off()},this.configStore=new a.FilterConfigStore(e),this.filterElement=jQuery(e.containerElement),this.templateService=new i.FilterTemplateService,this.handlerChain.push(new l.FilterActionHandler(this.filterElement,this.configStore)),this.handlerChain.forEach(function(e){e.RegisterDomHandler()})}return e}();n.Filter=o},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=t(20),a=function(){function e(){this.tempateFunctionForFacetSubHeader=i}return e.prototype.bind=function(e){return this.tempateFunctionForFacetSubHeader({filters:e})},e}();n.FilterTemplateService=a},function(e,n,t){var i=t(0);e.exports=(i.default||i).template({1:function(e,n,t,i,a,l,o){var r;return'<div class="content facet-subheader gui fluid-w basic curved p-5">\n    <span class="gui bold gui-subheading-2 caps">Applied Filters</span>\n    <a class="gui m-l-5 remove-all" >\n        <i class="gui-icon gui-icon-cancel"></i>\n        <span>Clear All</span>\n    </a>\n    <span class="gui m-l-10">\n'+(null!=(r=t.each.call(null!=n?n:e.nullContext||{},null!=n?n.filters:n,{name:"each",hash:{},fn:e.program(2,a,0,l,o),inverse:e.noop,data:a}))?r:"")+"    </span>\n</div>\n"},2:function(e,n,t,i,a,l,o){var r,c,s=null!=n?n:e.nullContext||{};return'        <span class="gui m-r-5">\n            <span class="gui large labels facet-labels">\n                <span class="gui gui-subheading-2">'+e.escapeExpression((c=null!=(c=t.name||(null!=n?n.name:n))?c:t.helperMissing,"function"==typeof c?c.call(s,{name:"name",hash:{},data:a}):c))+"</span>\n"+(null!=(r=t.each.call(s,null!=n?n.facetValues:n,{name:"each",hash:{},fn:e.program(3,a,0,l,o),inverse:e.noop,data:a}))?r:"")+"            </span>\n        </span>\n"},3:function(e,n,t,i,a,l,o){var r,c=e.lambda,s=e.escapeExpression;return'                <span class="gui m-0 m-t-2 m-r-2 p-4 label cursor-pointer strikethrough-hover" data-filter-entry="'+s(c(null!=o[1]?o[1].id:o[1],n))+":"+s(c(null!=n?n.label:n,n))+":"+s(c(null!=o[1]?o[1].type:o[1],n))+'">\n                    '+s((r=null!=(r=t.label||(null!=n?n.label:n))?r:t.helperMissing,"function"==typeof r?r.call(null!=n?n:e.nullContext||{},{name:"label",hash:{},data:a}):r))+'\n                    <i class="gui-icon gui-icon-cancel"></i>\n                </span>\n'},compiler:[7,">= 4.0.0"],main:function(e,n,t,i,a,l,o){var r;return null!=(r=t.if.call(null!=n?n:e.nullContext||{},null!=(r=null!=n?n.filters:n)?r.length:r,{name:"if",hash:{},fn:e.program(1,a,0,l,o),inverse:e.noop,data:a}))?r:""},useData:!0,useDepths:!0})},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e){var n=this;if(this.defaultfilterOptions={animationTime:200,containerElement:null,onAllFilterRemove:function(){},onFilterChange:function(e,n,t){}},this.extendOptions=function(e){return n.options=jQuery.extend({},n.defaultfilterOptions,e)},this.extendOptions(e),null===e.containerElement)throw new Error("Please Provide a valid container Element object for filters")}return Object.defineProperty(e.prototype,"Options",{get:function(){return this.options},enumerable:!0,configurable:!0}),e}();n.FilterConfigStore=i}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy9mYWNldG9vLm1pbi5qcyIsIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgZDQzNDdiMzM3ODkyOTYzY2NlNTIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIHtcInJvb3RcIjpcIkhhbmRsZWJhcnNcIixcImFtZFwiOlwiaGFuZGxlYmFycy5ydW50aW1lXCIsXCJjb21tb25qczJcIjpcImhhbmRsZWJhcnMvcnVudGltZVwiLFwiY29tbW9uanNcIjpcImhhbmRsZWJhcnMvcnVudGltZVwifSIsIndlYnBhY2s6Ly8vLi9zcmMvaGJzL2ZhY2V0LWNvbGxhcHNlZC5oYnMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2hicy9mYWNldC1ib2R5LmhicyIsIndlYnBhY2s6Ly8vLi9zcmMvaGJzL2hlbHBlcnMvQ2hlY2tlZC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaGJzL2hlbHBlcnMvRGlzYWJsZWQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2V2ZW50aGFuZGxlcnMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL21vZGVscy9GaWx0ZXJBY3Rpb25UeXBlLnRzIiwid2VicGFjazovLy8uL3NyYy90cy9tYWluL0VudHJ5LnRzIiwid2VicGFjazovLy8uL3NyYy90cy9tYWluL0ZhY2V0LnRzIiwid2VicGFjazovLy8uL3NyYy90cy9zZXJ2aWNlcy9GYWNldFRlbXBsYXRlU2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaGJzL2ZhY2V0LW1haW4uaGJzIiwid2VicGFjazovLy8uL3NyYy9oYnMvaGVscGVycy9TZWxlY3RlZEZpbHRlcnNDb3VudC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvY29uZmlnL0ZhY2V0Q29uZmlnU3RvcmUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2V2ZW50aGFuZGxlcnMvRXhwYW5kQ29sbGFwc2VGYWNldHNIYW5kbGVyLnRzIiwid2VicGFjazovLy8uL3NyYy90cy9ldmVudGhhbmRsZXJzL0ZhY2V0QWN0aW9uSGFuZGxlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvZXZlbnRoYW5kbGVycy9GYWNldFNlYXJjaEhhbmRsZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2V2ZW50aGFuZGxlcnMvRmlsdGVyQWN0aW9uSGFuZGxlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvZXZlbnRoYW5kbGVycy9IaWRlRmFjZXRTZWN0aW9uSGFuZGxlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvbWFpbi9GaWx0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL3NlcnZpY2VzL0ZpbHRlclRlbXBsYXRlU2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaGJzL2ZhY2V0LWFwcGxpZWQtZmlsdGVycy5oYnMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2NvbmZpZy9GaWx0ZXJDb25maWdTdG9yZS50cyJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJyZXF1aXJlIiwiZGVmaW5lIiwiYW1kIiwic2VsZiIsInRoaXMiLCJfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzBfXyIsIm1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpbnN0YWxsZWRNb2R1bGVzIiwiaSIsImwiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJuIiwiX19lc01vZHVsZSIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIkhhbmRsZWJhcnMiLCJ0ZW1wbGF0ZSIsImNvbXBpbGVyIiwibWFpbiIsImNvbnRhaW5lciIsImRlcHRoMCIsImhlbHBlcnMiLCJwYXJ0aWFscyIsImRhdGEiLCJ1c2VEYXRhIiwiX19kZWZhdWx0Iiwib2JqIiwiMSIsImJsb2NrUGFyYW1zIiwiZGVwdGhzIiwic3RhY2sxIiwiYWxpYXMxIiwibGFtYmRhIiwiYWxpYXMyIiwiZXNjYXBlRXhwcmVzc2lvbiIsImFsaWFzMyIsIm51bGxDb250ZXh0IiwiZmFjZXRWYWx1ZXMiLCJoYXNoIiwiZWFjaCIsImZuIiwicHJvZ3JhbSIsImludmVyc2UiLCJub29wIiwiMiIsInNlbGVjdGVkIiwiMyIsImxhYmVsIiwiaW5kZXgiLCJkaXNhYmxlZCIsImlkIiwidHlwZSIsImNvdW50IiwiNSIsImZhY2V0cyIsInVzZURlcHRocyIsInZhbHVlIiwiY2hlY2tlZCIsImJvb2wiLCJkZWZhdWx0IiwiX19leHBvcnQiLCJGaWx0ZXJBY3Rpb25UeXBlIiwiRmFjZXRUZW1wbGF0ZVNlcnZpY2VfMSIsIkZhY2V0Q29uZmlnU3RvcmVfMSIsImV2ZW50aGFuZGxlcnNfMSIsIkZhY2V0Iiwib3B0aW9ucyIsIl90aGlzIiwiaGFuZGxlckNoYWluIiwiYmluZCIsImZ1bGxGYWNldCIsInRlbXBsYXRlU2VydmljZSIsImZhY2V0RWxlbWVudCIsImh0bWwiLCJkZXN0cm95IiwidW5kZWZpbmVkIiwib2ZmIiwiY29uZmlnU3RvcmUiLCJGYWNldENvbmZpZ1N0b3JlIiwialF1ZXJ5IiwiY29udGFpbmVyRWxlbWVudCIsIkZhY2V0VGVtcGxhdGVTZXJ2aWNlIiwicHVzaCIsIkV4cGFuZENvbGxhcHNlRmFjZXRzSGFuZGxlciIsIkZhY2V0QWN0aW9uSGFuZGxlciIsIkZhY2V0U2VhcmNoSGFuZGxlciIsIkhpZGVGYWNldFNlY3Rpb25IYW5kbGVyIiwiZm9yRWFjaCIsImhhbmRsZXIiLCJSZWdpc3RlckRvbUhhbmRsZXIiLCJGYWNldE1haW4iLCJ0ZW1wYXRlRnVuY3Rpb25Gb3JGYWNldE1haW4iLCJjb2xsYXBzZWQiLCJPcHRpb25zIiwiaW52b2tlUGFydGlhbCIsImRlY29yYXRvcnMiLCJ1c2VQYXJ0aWFsIiwic2VsZWN0ZWRGaWx0ZXJzQ291bnQiLCJsZW5ndGgiLCJfaSIsImZhY2V0VmFsdWVzXzEiLCJmYWNldFZhbHVlIiwiZGVmYXVsdEZhY2V0T3B0aW9ucyIsImFuaW1hdGlvblRpbWUiLCJvbkZpbHRlckNoYW5nZSIsImtleSIsImFjdGlvbiIsImV4dGVuZE9wdGlvbnMiLCJpbnB1dE9wdGlvbnMiLCJleHRlbmQiLCJFcnJvciIsIlNob3dIaWRlIiwiZWxlbWVudCIsIkNvbnRyb2xWaXNpYmlsaXR5T2ZGaWx0ZXIiLCJzaG93SGlkZSIsImljb25FbGVtZW50IiwiY2hpbGRyZW4iLCJjdXJyZW50bHlWaXNpYmxlIiwiaGFzQ2xhc3MiLCJUb2dnbGUiLCJTaG93IiwiSGlkZSIsInBhcmVudHMiLCJmaW5kIiwic2xpZGVVcCIsInJlbW92ZUNsYXNzIiwiYWRkQ2xhc3MiLCJzbGlkZURvd24iLCJvbiIsImV2ZW50Iiwic3RvcFByb3BhZ2F0aW9uIiwidGFyZ2V0IiwiaGVhZGVyRWxlbWVudCIsImlzIiwicGFyZW50IiwicmVtb3ZlQXR0ciIsIm9uUmVzaXplIiwib25Eb2N1bWVudENsaWNrIiwiRmlsdGVyQWN0aW9uVHlwZV8xIiwidmFsU3RyIiwidmFsIiwidG9TdHJpbmciLCJzcGxpdCIsIkFkZCIsIk1pbnVzIiwidG9Mb3dlckNhc2UiLCJlIiwiYXR0ciIsImluZGV4T2YiLCJmYWRlT3V0IiwiZmFkZUluIiwiRmlsdGVyQWN0aW9uSGFuZGxlciIsImZpbHRlckVsZW1lbnQiLCJvbkFsbEZpbHRlclJlbW92ZSIsIiQiLCJoaWRlIiwiRmlsdGVyVGVtcGxhdGVTZXJ2aWNlXzEiLCJGaWx0ZXJDb25maWdTdG9yZV8xIiwiRmlsdGVyIiwiZmlsdGVycyIsImZhY2V0U3ViSGVhZGVyIiwiRmlsdGVyQ29uZmlnU3RvcmUiLCJGaWx0ZXJUZW1wbGF0ZVNlcnZpY2UiLCJGYWNldFN1YkhlYWRlciIsInRlbXBhdGVGdW5jdGlvbkZvckZhY2V0U3ViSGVhZGVyIiwiaGVscGVyIiwiaGVscGVyTWlzc2luZyIsImRlZmF1bHRmaWx0ZXJPcHRpb25zIl0sIm1hcHBpbmdzIjoiQ0FBQSxTQUFBQSxF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QUFsQixFQUFBLEVBQUFLLEVBQUFDLEdBQUFhLFFBQUF2QixFQUFBd0IsS0FBQXBCLFVBQThGTyxFQUFBLElBQzNTTixTQUFBLEVBQUErQixXQUFBLEt0QnV4QkssU0FBVXpFLEVBQVFELEVBQVNTLEdBRWpDLFlBRUFZLFFBQU9DLGVBQWV0QixFQUFTLGNBQWdCMkUsT0FBTyxHdUJ4ekJ0RCxJQUFBeUcsR0FBQSxXQVlJLFFBQUFBLEdBQVkvRixHQUFaLEdBQUFDLEdBQUFoRixJQUVJLElBWklBLEtBQUFvTCxzQkFDSmhFLGNBQWUsSUFDZnZCLGlCQUFrQixLQUNsQnlFLGtCQUFtQixhQUduQmpELGVBQWdCLFNBQUNDLEVBQWFqRCxFQUFla0QsTUFhekN2SCxLQUFBd0gsY0FBZ0IsU0FBQ0MsR0FDckIsTUFBUXpDLEdBQUtELFFBQVVhLE9BQU84QixVQUFXMUMsRUFBS29HLHFCQUFzQjNELElBVHBFekgsS0FBS3dILGNBQWN6QyxHQUNjLE9BQTdCQSxFQUFRYyxpQkFDUixLQUFNLElBQUk4QixPQUFNLCtEQVM1QixNQU5JNUcsUUFBQUMsZUFBVzhKLEVBQUF0SixVQUFBLFd2QjZ6QlBMLEl1Qjd6QkosV0FDSSxNQUFPbkIsTUFBSytFLFN2Qit6Qlo3RCxZQUFZLEVBQ1pELGNBQWMsSXVCM3pCdEI2SixJQXhCYXBMLEdBQUFvTCIsImZpbGUiOiJmYWNldG9vLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcImhhbmRsZWJhcnMvcnVudGltZVwiKSk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXCJoYW5kbGViYXJzLnJ1bnRpbWVcIl0sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiRmFjZXRvb1wiXSA9IGZhY3RvcnkocmVxdWlyZShcImhhbmRsZWJhcnMvcnVudGltZVwiKSk7XG5cdGVsc2Vcblx0XHRyb290W1wiRmFjZXRvb1wiXSA9IGZhY3Rvcnkocm9vdFtcIkhhbmRsZWJhcnNcIl0pO1xufSkodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHRoaXMsIGZ1bmN0aW9uKF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfMF9fKSB7XG5yZXR1cm4gXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcImhhbmRsZWJhcnMvcnVudGltZVwiKSk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXCJoYW5kbGViYXJzLnJ1bnRpbWVcIl0sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiRmFjZXRvb1wiXSA9IGZhY3RvcnkocmVxdWlyZShcImhhbmRsZWJhcnMvcnVudGltZVwiKSk7XG5cdGVsc2Vcblx0XHRyb290W1wiRmFjZXRvb1wiXSA9IGZhY3Rvcnkocm9vdFtcIkhhbmRsZWJhcnNcIl0pO1xufSkodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHRoaXMsIGZ1bmN0aW9uKF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfMF9fKSB7XG5yZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuLyoqKioqKi8gXHRcdFx0XHRnZXQ6IGdldHRlclxuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDcpO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiBleHRlcm5hbCB7XCJyb290XCI6XCJIYW5kbGViYXJzXCIsXCJhbWRcIjpcImhhbmRsZWJhcnMucnVudGltZVwiLFwiY29tbW9uanMyXCI6XCJoYW5kbGViYXJzL3J1bnRpbWVcIixcImNvbW1vbmpzXCI6XCJoYW5kbGViYXJzL3J1bnRpbWVcIn0gKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZHluYW1pYyBleHBvcnRzIHByb3ZpZGVkICovXG4vKiEgYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfMF9fO1xuXG4vKioqLyB9KSxcbi8qIDEgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvaGJzL2ZhY2V0LWNvbGxhcHNlZC5oYnMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZHluYW1pYyBleHBvcnRzIHByb3ZpZGVkICovXG4vKiEgYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgSGFuZGxlYmFycyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIGhhbmRsZWJhcnMgKi8gMCk7XG5mdW5jdGlvbiBfX2RlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgKG9iai5fX2VzTW9kdWxlID8gb2JqW1wiZGVmYXVsdFwiXSA6IG9iaik7IH1cbm1vZHVsZS5leHBvcnRzID0gKEhhbmRsZWJhcnNbXCJkZWZhdWx0XCJdIHx8IEhhbmRsZWJhcnMpLnRlbXBsYXRlKHtcImNvbXBpbGVyXCI6WzcsXCI+PSA0LjAuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHJldHVybiBcIjxkaXYgY2xhc3M9XFxcInNob3ctZmFjZXQgZ3VpIGZsdWlkLWggY3Vyc29yLXBvaW50ZXJcXFwiPlxcclxcbiAgICA8aSBjbGFzcz1cXFwiZ3VpIGd1aS1pY29uIGd1aS1pY29uLWNoZXZyb24tcmlnaHRcXFwiPjwvaT5cXHJcXG4gICAgPGJyPlxcclxcbiAgICA8aSBjbGFzcz1cXFwiZ3VpIGd1aS1pY29uIGd1aS1pY29uLWZpbHRlciBwcmltYXJ5XFxcIj48L2k+XFxyXFxuPC9kaXY+XCI7XG59LFwidXNlRGF0YVwiOnRydWV9KTtcblxuLyoqKi8gfSksXG4vKiAyICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9oYnMvZmFjZXQtYm9keS5oYnMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIEhhbmRsZWJhcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBoYW5kbGViYXJzICovIDApO1xuZnVuY3Rpb24gX19kZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIChvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmopOyB9XG5tb2R1bGUuZXhwb3J0cyA9IChIYW5kbGViYXJzW1wiZGVmYXVsdFwiXSB8fCBIYW5kbGViYXJzKS50ZW1wbGF0ZSh7XCIxXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEsYmxvY2tQYXJhbXMsZGVwdGhzKSB7XG4gICAgdmFyIHN0YWNrMSwgYWxpYXMxPWNvbnRhaW5lci5sYW1iZGEsIGFsaWFzMj1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbiwgYWxpYXMzPWRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSk7XG5cbiAgcmV0dXJuIFwiICAgICAgICA8ZGl2IGNsYXNzPVxcXCJpdGVtIGZhY2V0LWl0ZW1cXFwiIGRhdGEtYXR0ci1uYW1lPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udGVudFxcXCI+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZhY2V0LWl0ZW0taGVhZGVyIGZsdWlkIGN1cnNvci1wb2ludGVyIGd1aSBzZWxlY3RhYmxlIGl0ZW1cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImd1aSBndWktc3ViaGVhZGluZy0yIHByaW1hcnlcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiIFwiXG4gICAgKyAoKHN0YWNrMSA9IF9fZGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3NyYy9oYnMvaGVscGVycy9TZWxlY3RlZEZpbHRlcnNDb3VudC50cyAqLyAxMSkpLmNhbGwoYWxpYXMzLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5mYWNldFZhbHVlcyA6IGRlcHRoMCkse1wibmFtZVwiOlwiU2VsZWN0ZWRGaWx0ZXJzQ291bnRcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCJcXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJndWkgZ3VpLWljb24gZ3VpLWljb24tY2hldnJvbi1kb3duIHJpZ2h0IG0tci0xMFxcXCI+PC9pPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY2xlYXJcXFwiPjwvZGl2PlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJkZXNjcmlwdGlvbiBndWkgZ3VpLWhpZGRlbiBmYWNldC1pdGVtLWRlc2NyaXB0aW9uIG0tdC01XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImd1aSBmbHVpZC13IGZsdWlkLWggbS0wIHAtMFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJcbiAgICArICgoc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoYWxpYXMzLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5mYWNldFZhbHVlcyA6IGRlcHRoMCkse1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgyLCBkYXRhLCAwLCBibG9ja1BhcmFtcywgZGVwdGhzKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCIgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcblwiO1xufSxcIjJcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSxibG9ja1BhcmFtcyxkZXB0aHMpIHtcbiAgICB2YXIgc3RhY2sxO1xuXG4gIHJldHVybiBcIiBcXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJpdGVtXFxcIj5cXG5cIlxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzW1wiaWZcIl0uY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5zZWxlY3RlZCA6IGRlcHRoMCkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMywgZGF0YSwgMCwgYmxvY2tQYXJhbXMsIGRlcHRocyksXCJpbnZlcnNlXCI6Y29udGFpbmVyLnByb2dyYW0oNSwgZGF0YSwgMCwgYmxvY2tQYXJhbXMsIGRlcHRocyksXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuXCI7XG59LFwiM1wiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhLGJsb2NrUGFyYW1zLGRlcHRocykge1xuICAgIHZhciBhbGlhczE9Y29udGFpbmVyLmxhbWJkYSwgYWxpYXMyPWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uLCBhbGlhczM9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KTtcblxuICByZXR1cm4gXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIHRpdGxlPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGFiZWwgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIGNsYXNzPVxcXCJndWkgY3Vyc29yLXBvaW50ZXIgbm8td3JhcCBwcmltYXJ5XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cXFwiZ3VpIGZhY2V0LXZhbHVlLWNoZWNrYm94IGN1cnNvci1wb2ludGVyIG0tbC0wXFxcIiBpZD1cXFwiXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmxhYmVsIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiLVwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkYXRhICYmIGRhdGEuaW5kZXgpLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIFwiXG4gICAgKyBhbGlhczIoX19kZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vc3JjL2hicy9oZWxwZXJzL0NoZWNrZWQudHMgKi8gMykpLmNhbGwoYWxpYXMzLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5zZWxlY3RlZCA6IGRlcHRoMCkse1wibmFtZVwiOlwiQ2hlY2tlZFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSlcbiAgICArIFwiIFwiXG4gICAgKyBhbGlhczIoX19kZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vc3JjL2hicy9oZWxwZXJzL0Rpc2FibGVkLnRzICovIDQpKS5jYWxsKGFsaWFzMywoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuZGlzYWJsZWQgOiBkZXB0aDApLHtcIm5hbWVcIjpcIkRpc2FibGVkXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKVxuICAgICsgXCIgdmFsdWU9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aHNbMV0gIT0gbnVsbCA/IGRlcHRoc1sxXS5pZCA6IGRlcHRoc1sxXSksIGRlcHRoMCkpXG4gICAgKyBcIjpcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGFiZWwgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCI6XCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoc1sxXSAhPSBudWxsID8gZGVwdGhzWzFdLnR5cGUgOiBkZXB0aHNbMV0pLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIHR5cGU9XFxcImNoZWNrYm94XFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmxhYmVsIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiZ3VpLWJvZHktMlxcXCI+KFwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jb3VudCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIik8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XFxuXCI7XG59LFwiNVwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhLGJsb2NrUGFyYW1zLGRlcHRocykge1xuICAgIHZhciBhbGlhczE9Y29udGFpbmVyLmxhbWJkYSwgYWxpYXMyPWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uLCBhbGlhczM9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KTtcblxuICByZXR1cm4gXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIHRpdGxlPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGFiZWwgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIGNsYXNzPVxcXCJndWkgY3Vyc29yLXBvaW50ZXIgbm8td3JhcFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XFxcImd1aSBmYWNldC12YWx1ZS1jaGVja2JveCBjdXJzb3ItcG9pbnRlciBtLWwtMFxcXCIgaWQ9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5sYWJlbCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIi1cIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGF0YSAmJiBkYXRhLmluZGV4KSwgZGVwdGgwKSlcbiAgICArIFwiXFxcIiBcIlxuICAgICsgYWxpYXMyKF9fZGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3NyYy9oYnMvaGVscGVycy9DaGVja2VkLnRzICovIDMpKS5jYWxsKGFsaWFzMywoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuc2VsZWN0ZWQgOiBkZXB0aDApLHtcIm5hbWVcIjpcIkNoZWNrZWRcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpXG4gICAgKyBcIiBcIlxuICAgICsgYWxpYXMyKF9fZGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3NyYy9oYnMvaGVscGVycy9EaXNhYmxlZC50cyAqLyA0KSkuY2FsbChhbGlhczMsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmRpc2FibGVkIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJEaXNhYmxlZFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSlcbiAgICArIFwiIHZhbHVlPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGhzWzFdICE9IG51bGwgPyBkZXB0aHNbMV0uaWQgOiBkZXB0aHNbMV0pLCBkZXB0aDApKVxuICAgICsgXCI6XCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmxhYmVsIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiOlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aHNbMV0gIT0gbnVsbCA/IGRlcHRoc1sxXS50eXBlIDogZGVwdGhzWzFdKSwgZGVwdGgwKSlcbiAgICArIFwiXFxcIiB0eXBlPVxcXCJjaGVja2JveFxcXCIgLz5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5sYWJlbCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImd1aS1ib2R5LTJcXFwiPihcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY291bnQgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCIpPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxcblwiO1xufSxcImNvbXBpbGVyXCI6WzcsXCI+PSA0LjAuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSxibG9ja1BhcmFtcyxkZXB0aHMpIHtcbiAgICB2YXIgc3RhY2sxO1xuXG4gIHJldHVybiBcIjxkaXYgY2xhc3M9XFxcImd1aSBmbHVpZC1oIG9mLWhpZGRlblxcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcImd1aSBtLTVcXFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiZ3VpIGxlZnRcXFwiPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJndWkgY2FwcyBib2xkIGd1aS1zdWJoZWFkaW5nLTJcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgRmlsdGVyIEJ5XFxuICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJndWkgcmlnaHRcXFwiPlxcbiAgICAgICAgICAgIDxhIGNsYXNzPVxcXCJndWkgY3Vyc29yLXBvaW50ZXIgaGlkZS1mYWNldFxcXCI+XFxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJndWktaWNvbiBndWktaWNvbi1jaGV2cm9uLWxlZnRcXFwiPjwvaT5cXG4gICAgICAgICAgICA8L2E+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XFxcImd1aSBjbGVhclxcXCI+PC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XFxcImd1aSBtLXQtNVxcXCI+PC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XFxcImd1aSBsZWZ0XFxcIj5cXG4gICAgICAgIDxhIGNsYXNzPVxcXCJndWkgY3Vyc29yLXBvaW50ZXIgZXhwYW5kLWFsbFxcXCI+XFxuICAgICAgICAgICAgPGkgY2xhc3M9XFxcImd1aS1pY29uIGd1aS1pY29uLWFkZFxcXCI+PC9pPlxcbiAgICAgICAgICAgIEV4cGFuZCBBbGxcXG4gICAgICAgIDwvYT5cXG4gICAgICAgIDxhIGNsYXNzPVxcXCJndWkgY3Vyc29yLXBvaW50ZXIgbS1sLTEwIGNvbGxhcHNlLWFsbFxcXCI+XFxuICAgICAgICAgICAgPGkgY2xhc3M9XFxcImd1aS1pY29uICBndWktaWNvbi1taW51c1xcXCI+PC9pPlxcbiAgICAgICAgICAgIENvbGxhcHNlIEFsbFxcbiAgICAgICAgPC9hPlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiZ3VpIGNsZWFyXFxcIj48L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiZ3VpIG0tdC01XFxcIj48L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiZ3VpIGlucHV0IGZsdWlkLXcgcC10LTUgcC1yLTUgcC1iLTUgcC1sLTFcXFwiPlxcbiAgICAgICAgPGlucHV0IGNsYXNzPVxcXCJndWkgaW5wdXQgcC01IGZsdWlkLXcgZ3VpLXN1YmhlYWRpbmctMiBmaWx0ZXItc2VhcmNoLWlucHV0XFxcIiBwbGFjZWhvbGRlcj1cXFwiU2VhcmNoIEZpbHRlcnNcXFwiIC8+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJndWkgZmx1aWQtaCBmYWNldC1saXN0IG9mLWF1dG9cXFwiPlxcblwiXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnMuZWFjaC5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmZhY2V0cyA6IGRlcHRoMCkse1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgxLCBkYXRhLCAwLCBibG9ja1BhcmFtcywgZGVwdGhzKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCIgICAgPC9kaXY+XFxuPC9kaXY+XCI7XG59LFwidXNlRGF0YVwiOnRydWUsXCJ1c2VEZXB0aHNcIjp0cnVlfSk7XG5cbi8qKiovIH0pLFxuLyogMyAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2hicy9oZWxwZXJzL0NoZWNrZWQudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBkeW5hbWljIGV4cG9ydHMgcHJvdmlkZWQgKi9cbi8qISBhbGwgZXhwb3J0cyB1c2VkICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIGNoZWNrZWQgPSBmdW5jdGlvbiAoYm9vbCkge1xyXG4gICAgcmV0dXJuIGJvb2wgPyBcImNoZWNrZWRcIiA6IFwiXCI7XHJcbn07XHJcbmV4cG9ydHMuZGVmYXVsdCA9IGNoZWNrZWQ7XHJcblxuXG4vKioqLyB9KSxcbi8qIDQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvaGJzL2hlbHBlcnMvRGlzYWJsZWQudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZHluYW1pYyBleHBvcnRzIHByb3ZpZGVkICovXG4vKiEgYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBkaXNhYmxlZCA9IGZ1bmN0aW9uIChib29sKSB7XHJcbiAgICByZXR1cm4gYm9vbCA/IFwiZGlzYWJsZWRcIiA6IFwiXCI7XHJcbn07XHJcbmV4cG9ydHMuZGVmYXVsdCA9IGRpc2FibGVkO1xyXG5cblxuLyoqKi8gfSksXG4vKiA1ICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvdHMvZXZlbnRoYW5kbGVycy9pbmRleC50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuZnVuY3Rpb24gX19leHBvcnQobSkge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9FeHBhbmRDb2xsYXBzZUZhY2V0c0hhbmRsZXIgKi8gMTMpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9GYWNldEFjdGlvbkhhbmRsZXIgKi8gMTQpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9GYWNldFNlYXJjaEhhbmRsZXIgKi8gMTUpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9GaWx0ZXJBY3Rpb25IYW5kbGVyICovIDE2KSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vSGlkZUZhY2V0U2VjdGlvbkhhbmRsZXIgKi8gMTcpKTtcclxuXG5cbi8qKiovIH0pLFxuLyogNiAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy90cy9tb2RlbHMvRmlsdGVyQWN0aW9uVHlwZS50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBkeW5hbWljIGV4cG9ydHMgcHJvdmlkZWQgKi9cbi8qISBhbGwgZXhwb3J0cyB1c2VkICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIEZpbHRlckFjdGlvblR5cGU7XHJcbihmdW5jdGlvbiAoRmlsdGVyQWN0aW9uVHlwZSkge1xyXG4gICAgRmlsdGVyQWN0aW9uVHlwZVtcIkFkZFwiXSA9IFwiQWRkXCI7XHJcbiAgICBGaWx0ZXJBY3Rpb25UeXBlW1wiTWludXNcIl0gPSBcIk1pbnVzXCI7XHJcbn0pKEZpbHRlckFjdGlvblR5cGUgPSBleHBvcnRzLkZpbHRlckFjdGlvblR5cGUgfHwgKGV4cG9ydHMuRmlsdGVyQWN0aW9uVHlwZSA9IHt9KSk7XHJcblxuXG4vKioqLyB9KSxcbi8qIDcgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy90cy9tYWluL0VudHJ5LnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZHluYW1pYyBleHBvcnRzIHByb3ZpZGVkICovXG4vKiEgYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0ZhY2V0ICovIDgpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9GaWx0ZXIgKi8gMTgpKTtcclxuXG5cbi8qKiovIH0pLFxuLyogOCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3RzL21haW4vRmFjZXQudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBkeW5hbWljIGV4cG9ydHMgcHJvdmlkZWQgKi9cbi8qISBhbGwgZXhwb3J0cyB1c2VkICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIEZhY2V0VGVtcGxhdGVTZXJ2aWNlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9zZXJ2aWNlcy9GYWNldFRlbXBsYXRlU2VydmljZSAqLyA5KTtcclxudmFyIEZhY2V0Q29uZmlnU3RvcmVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vLi4vY29uZmlnL0ZhY2V0Q29uZmlnU3RvcmUgKi8gMTIpO1xyXG52YXIgZXZlbnRoYW5kbGVyc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi8uLi9ldmVudGhhbmRsZXJzICovIDUpO1xyXG52YXIgRmFjZXQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBGYWNldChvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLmhhbmRsZXJDaGFpbiA9IFtdO1xyXG4gICAgICAgIHRoaXMuYmluZCA9IGZ1bmN0aW9uIChmYWNldHMpIHtcclxuICAgICAgICAgICAgdmFyIGZ1bGxGYWNldCA9IF90aGlzLnRlbXBsYXRlU2VydmljZS5iaW5kKGZhY2V0cyk7XHJcbiAgICAgICAgICAgIF90aGlzLmZhY2V0RWxlbWVudC5odG1sKGZ1bGxGYWNldCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChfdGhpcy5mYWNldEVsZW1lbnQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuZmFjZXRFbGVtZW50Lm9mZigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmNvbmZpZ1N0b3JlID0gbmV3IEZhY2V0Q29uZmlnU3RvcmVfMS5GYWNldENvbmZpZ1N0b3JlKG9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuZmFjZXRFbGVtZW50ID0galF1ZXJ5KG9wdGlvbnMuY29udGFpbmVyRWxlbWVudCk7XHJcbiAgICAgICAgdGhpcy50ZW1wbGF0ZVNlcnZpY2UgPSBuZXcgRmFjZXRUZW1wbGF0ZVNlcnZpY2VfMS5GYWNldFRlbXBsYXRlU2VydmljZSh0aGlzLmNvbmZpZ1N0b3JlKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXJDaGFpbi5wdXNoKG5ldyBldmVudGhhbmRsZXJzXzEuRXhwYW5kQ29sbGFwc2VGYWNldHNIYW5kbGVyKHRoaXMuZmFjZXRFbGVtZW50LCB0aGlzLmNvbmZpZ1N0b3JlKSk7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyQ2hhaW4ucHVzaChuZXcgZXZlbnRoYW5kbGVyc18xLkZhY2V0QWN0aW9uSGFuZGxlcih0aGlzLmZhY2V0RWxlbWVudCwgdGhpcy5jb25maWdTdG9yZSkpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlckNoYWluLnB1c2gobmV3IGV2ZW50aGFuZGxlcnNfMS5GYWNldFNlYXJjaEhhbmRsZXIodGhpcy5mYWNldEVsZW1lbnQsIHRoaXMuY29uZmlnU3RvcmUpKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXJDaGFpbi5wdXNoKG5ldyBldmVudGhhbmRsZXJzXzEuSGlkZUZhY2V0U2VjdGlvbkhhbmRsZXIodGhpcy5mYWNldEVsZW1lbnQsIHRoaXMuY29uZmlnU3RvcmUpKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXJDaGFpbi5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XHJcbiAgICAgICAgICAgIGhhbmRsZXIuUmVnaXN0ZXJEb21IYW5kbGVyKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRmFjZXQ7XHJcbn0oKSk7XHJcbmV4cG9ydHMuRmFjZXQgPSBGYWNldDtcclxuXG5cbi8qKiovIH0pLFxuLyogOSAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy90cy9zZXJ2aWNlcy9GYWNldFRlbXBsYXRlU2VydmljZS50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBkeW5hbWljIGV4cG9ydHMgcHJvdmlkZWQgKi9cbi8qISBhbGwgZXhwb3J0cyB1c2VkICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIEZhY2V0TWFpbiA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vLi4vLi4vaGJzL2ZhY2V0LW1haW4uaGJzICovIDEwKTtcclxudmFyIEZhY2V0VGVtcGxhdGVTZXJ2aWNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRmFjZXRUZW1wbGF0ZVNlcnZpY2UoY29uZmlnU3RvcmUpIHtcclxuICAgICAgICB0aGlzLmNvbmZpZ1N0b3JlID0gY29uZmlnU3RvcmU7XHJcbiAgICAgICAgdGhpcy50ZW1wYXRlRnVuY3Rpb25Gb3JGYWNldE1haW4gPSBGYWNldE1haW47XHJcbiAgICB9XHJcbiAgICBGYWNldFRlbXBsYXRlU2VydmljZS5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIChmYWNldHMpIHtcclxuICAgICAgICB2YXIgY29sbGFwc2VkID0gdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLmNvbGxhcHNlZDtcclxuICAgICAgICByZXR1cm4gdGhpcy50ZW1wYXRlRnVuY3Rpb25Gb3JGYWNldE1haW4oeyBjb2xsYXBzZWQ6IGNvbGxhcHNlZCwgZmFjZXRzOiBmYWNldHMgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEZhY2V0VGVtcGxhdGVTZXJ2aWNlO1xyXG59KCkpO1xyXG5leHBvcnRzLkZhY2V0VGVtcGxhdGVTZXJ2aWNlID0gRmFjZXRUZW1wbGF0ZVNlcnZpY2U7XHJcblxuXG4vKioqLyB9KSxcbi8qIDEwICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9oYnMvZmFjZXQtbWFpbi5oYnMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIEhhbmRsZWJhcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBoYW5kbGViYXJzICovIDApO1xuZnVuY3Rpb24gX19kZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIChvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmopOyB9XG5tb2R1bGUuZXhwb3J0cyA9IChIYW5kbGViYXJzW1wiZGVmYXVsdFwiXSB8fCBIYW5kbGViYXJzKS50ZW1wbGF0ZSh7XCIxXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxO1xuXG4gIHJldHVybiBcIiAgICA8ZGl2IGNsYXNzPVxcXCJmYWNldC1jb2xsYXBzZWQtYm9keSBndWkgZmx1aWQtaCB3LWF1dG9cXFwiPlwiXG4gICAgKyAoKHN0YWNrMSA9IGNvbnRhaW5lci5pbnZva2VQYXJ0aWFsKF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vc3JjL2hicy9mYWNldC1jb2xsYXBzZWQuaGJzICovIDEpLGRlcHRoMCx7XCJuYW1lXCI6XCJmYWNldC1jb2xsYXBzZWRcIixcImRhdGFcIjpkYXRhLFwiaGVscGVyc1wiOmhlbHBlcnMsXCJwYXJ0aWFsc1wiOnBhcnRpYWxzLFwiZGVjb3JhdG9yc1wiOmNvbnRhaW5lci5kZWNvcmF0b3JzfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCI8L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiZmFjZXQtYm9keSBndWkgZmx1aWQtaCBvZi1oaWRkZW4gZ3VpLWhpZGRlblxcXCI+XCJcbiAgICArICgoc3RhY2sxID0gY29udGFpbmVyLmludm9rZVBhcnRpYWwoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9zcmMvaGJzL2ZhY2V0LWJvZHkuaGJzICovIDIpLGRlcHRoMCx7XCJuYW1lXCI6XCJmYWNldC1ib2R5XCIsXCJkYXRhXCI6ZGF0YSxcImhlbHBlcnNcIjpoZWxwZXJzLFwicGFydGlhbHNcIjpwYXJ0aWFscyxcImRlY29yYXRvcnNcIjpjb250YWluZXIuZGVjb3JhdG9yc30pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiPC9kaXY+XFxuXCI7XG59LFwiM1wiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMTtcblxuICByZXR1cm4gXCIgICAgPGRpdiBjbGFzcz1cXFwiZmFjZXQtY29sbGFwc2VkLWJvZHkgZ3VpIGZsdWlkLWggdy1hdXRvIGd1aS1oaWRkZW5cXFwiPlwiXG4gICAgKyAoKHN0YWNrMSA9IGNvbnRhaW5lci5pbnZva2VQYXJ0aWFsKF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vc3JjL2hicy9mYWNldC1jb2xsYXBzZWQuaGJzICovIDEpLGRlcHRoMCx7XCJuYW1lXCI6XCJmYWNldC1jb2xsYXBzZWRcIixcImRhdGFcIjpkYXRhLFwiaGVscGVyc1wiOmhlbHBlcnMsXCJwYXJ0aWFsc1wiOnBhcnRpYWxzLFwiZGVjb3JhdG9yc1wiOmNvbnRhaW5lci5kZWNvcmF0b3JzfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCI8L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiZmFjZXQtYm9keSBndWkgZmx1aWQtaCBvZi1oaWRkZW5cXFwiPlwiXG4gICAgKyAoKHN0YWNrMSA9IGNvbnRhaW5lci5pbnZva2VQYXJ0aWFsKF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vc3JjL2hicy9mYWNldC1ib2R5LmhicyAqLyAyKSxkZXB0aDAse1wibmFtZVwiOlwiZmFjZXQtYm9keVwiLFwiZGF0YVwiOmRhdGEsXCJoZWxwZXJzXCI6aGVscGVycyxcInBhcnRpYWxzXCI6cGFydGlhbHMsXCJkZWNvcmF0b3JzXCI6Y29udGFpbmVyLmRlY29yYXRvcnN9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIjwvZGl2PlxcblwiO1xufSxcImNvbXBpbGVyXCI6WzcsXCI+PSA0LjAuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBzdGFjazE7XG5cbiAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFwiZ3VpIGZsdWlkLWggXFxcIj5cXG5cIlxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzW1wiaWZcIl0uY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jb2xsYXBzZWQgOiBkZXB0aDApLHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDEsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5wcm9ncmFtKDMsIGRhdGEsIDApLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIjwvZGl2PlwiO1xufSxcInVzZVBhcnRpYWxcIjp0cnVlLFwidXNlRGF0YVwiOnRydWV9KTtcblxuLyoqKi8gfSksXG4vKiAxMSAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9oYnMvaGVscGVycy9TZWxlY3RlZEZpbHRlcnNDb3VudC50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBkeW5hbWljIGV4cG9ydHMgcHJvdmlkZWQgKi9cbi8qISBhbGwgZXhwb3J0cyB1c2VkICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIHNlbGVjdGVkRmlsdGVyc0NvdW50ID0gZnVuY3Rpb24gKGZhY2V0VmFsdWVzKSB7XHJcbiAgICB2YXIgaW5kZXggPSAwO1xyXG4gICAgaWYgKGZhY2V0VmFsdWVzICE9PSB1bmRlZmluZWRcclxuICAgICAgICAmJiBmYWNldFZhbHVlcyAhPT0gbnVsbFxyXG4gICAgICAgICYmIGZhY2V0VmFsdWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGZhY2V0VmFsdWVzXzEgPSBmYWNldFZhbHVlczsgX2kgPCBmYWNldFZhbHVlc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgZmFjZXRWYWx1ZSA9IGZhY2V0VmFsdWVzXzFbX2ldO1xyXG4gICAgICAgICAgICBpZiAoZmFjZXRWYWx1ZS5zZWxlY3RlZCkge1xyXG4gICAgICAgICAgICAgICAgaW5kZXgrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBpbmRleCA9PT0gMCA/IFwiXCIgOiBcIjxzcGFuIGNsYXNzPVxcXCJndWktYm9keS0yXFxcIj4oXCIgKyBpbmRleCArIFwiKTwvc3Bhbj5cIjtcclxufTtcclxuZXhwb3J0cy5kZWZhdWx0ID0gc2VsZWN0ZWRGaWx0ZXJzQ291bnQ7XHJcblxuXG4vKioqLyB9KSxcbi8qIDEyICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3RzL2NvbmZpZy9GYWNldENvbmZpZ1N0b3JlLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgRmFjZXRDb25maWdTdG9yZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEZhY2V0Q29uZmlnU3RvcmUob3B0aW9ucykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5kZWZhdWx0RmFjZXRPcHRpb25zID0ge1xyXG4gICAgICAgICAgICBhbmltYXRpb25UaW1lOiAyMDAsXHJcbiAgICAgICAgICAgIGNvbGxhcHNlZDogZmFsc2UsXHJcbiAgICAgICAgICAgIGNvbnRhaW5lckVsZW1lbnQ6IG51bGwsXHJcbiAgICAgICAgICAgIC8vIGZhY2V0czogW10sXHJcbiAgICAgICAgICAgIG9uRmlsdGVyQ2hhbmdlOiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSwgYWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJZ25vcmVcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZXh0ZW5kT3B0aW9ucyA9IGZ1bmN0aW9uIChpbnB1dE9wdGlvbnMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLm9wdGlvbnMgPSBqUXVlcnkuZXh0ZW5kKHt9LCBfdGhpcy5kZWZhdWx0RmFjZXRPcHRpb25zLCBpbnB1dE9wdGlvbnMpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5leHRlbmRPcHRpb25zKG9wdGlvbnMpO1xyXG4gICAgICAgIGlmIChvcHRpb25zLmNvbnRhaW5lckVsZW1lbnQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUGxlYXNlIFByb3ZpZGUgYSB2YWxpZCBjb250YWluZXIgRWxlbWVudCBvYmplY3RcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZhY2V0Q29uZmlnU3RvcmUucHJvdG90eXBlLCBcIk9wdGlvbnNcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5vcHRpb25zOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBGYWNldENvbmZpZ1N0b3JlO1xyXG59KCkpO1xyXG5leHBvcnRzLkZhY2V0Q29uZmlnU3RvcmUgPSBGYWNldENvbmZpZ1N0b3JlO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxMyAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy90cy9ldmVudGhhbmRsZXJzL0V4cGFuZENvbGxhcHNlRmFjZXRzSGFuZGxlci50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBkeW5hbWljIGV4cG9ydHMgcHJvdmlkZWQgKi9cbi8qISBhbGwgZXhwb3J0cyB1c2VkICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIFNob3dIaWRlO1xyXG4oZnVuY3Rpb24gKFNob3dIaWRlKSB7XHJcbiAgICBTaG93SGlkZVtTaG93SGlkZVtcIlNob3dcIl0gPSAwXSA9IFwiU2hvd1wiO1xyXG4gICAgU2hvd0hpZGVbU2hvd0hpZGVbXCJIaWRlXCJdID0gMV0gPSBcIkhpZGVcIjtcclxuICAgIFNob3dIaWRlW1Nob3dIaWRlW1wiVG9nZ2xlXCJdID0gMl0gPSBcIlRvZ2dsZVwiO1xyXG59KShTaG93SGlkZSB8fCAoU2hvd0hpZGUgPSB7fSkpO1xyXG52YXIgRXhwYW5kQ29sbGFwc2VGYWNldHNIYW5kbGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRXhwYW5kQ29sbGFwc2VGYWNldHNIYW5kbGVyKGVsZW1lbnQsIGNvbmZpZ1N0b3JlKSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcclxuICAgICAgICB0aGlzLmNvbmZpZ1N0b3JlID0gY29uZmlnU3RvcmU7XHJcbiAgICAgICAgdGhpcy5Db250cm9sVmlzaWJpbGl0eU9mRmlsdGVyID0gZnVuY3Rpb24gKGVsZW1lbnQsIHNob3dIaWRlKSB7XHJcbiAgICAgICAgICAgIHZhciBpY29uRWxlbWVudCA9IGVsZW1lbnQuY2hpbGRyZW4oXCJpXCIpO1xyXG4gICAgICAgICAgICB2YXIgY3VycmVudGx5VmlzaWJsZSA9IGljb25FbGVtZW50Lmhhc0NsYXNzKFwiZ3VpLWljb24tY2hldnJvbi11cFwiKTtcclxuICAgICAgICAgICAgaWYgKFNob3dIaWRlLlRvZ2dsZSAhPT0gc2hvd0hpZGUgJiYgKChjdXJyZW50bHlWaXNpYmxlICYmIHNob3dIaWRlID09PSBTaG93SGlkZS5TaG93KSB8fFxyXG4gICAgICAgICAgICAgICAgKCFjdXJyZW50bHlWaXNpYmxlICYmIHNob3dIaWRlID09PSBTaG93SGlkZS5IaWRlKSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIWN1cnJlbnRseVZpc2libGUpIHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQucGFyZW50cyhcIi5mYWNldC1pdGVtXCIpLmZpbmQoXCIuZmFjZXQtaXRlbS1kZXNjcmlwdGlvblwiKS5zbGlkZURvd24oMjAwKTtcclxuICAgICAgICAgICAgICAgIGljb25FbGVtZW50LnJlbW92ZUNsYXNzKFwiZ3VpLWljb24tY2hldnJvbi1kb3duXCIpO1xyXG4gICAgICAgICAgICAgICAgaWNvbkVsZW1lbnQuYWRkQ2xhc3MoXCJndWktaWNvbi1jaGV2cm9uLXVwXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5wYXJlbnRzKFwiLmZhY2V0LWl0ZW1cIikuZmluZChcIi5mYWNldC1pdGVtLWRlc2NyaXB0aW9uXCIpLnNsaWRlVXAoMjAwKTtcclxuICAgICAgICAgICAgICAgIGljb25FbGVtZW50LnJlbW92ZUNsYXNzKFwiZ3VpLWljb24tY2hldnJvbi11cFwiKTtcclxuICAgICAgICAgICAgICAgIGljb25FbGVtZW50LmFkZENsYXNzKFwiZ3VpLWljb24tY2hldnJvbi1kb3duXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIEV4cGFuZENvbGxhcHNlRmFjZXRzSGFuZGxlci5wcm90b3R5cGUuUmVnaXN0ZXJEb21IYW5kbGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50Lm9uKFwiY2xpY2tcIiwgXCIuZXhwYW5kLWFsbFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgX3RoaXMuZWxlbWVudC5maW5kKFwiLmZhY2V0LWl0ZW0taGVhZGVyXCIpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5Db250cm9sVmlzaWJpbGl0eU9mRmlsdGVyKGpRdWVyeShlbGVtZW50KSwgU2hvd0hpZGUuU2hvdyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmVsZW1lbnQub24oXCJjbGlja1wiLCBcIi5jb2xsYXBzZS1hbGxcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIF90aGlzLmVsZW1lbnQuZmluZChcIi5mYWNldC1pdGVtLWhlYWRlclwiKS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuQ29udHJvbFZpc2liaWxpdHlPZkZpbHRlcihqUXVlcnkoZWxlbWVudCksIFNob3dIaWRlLkhpZGUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50Lm9uKFwiY2xpY2tcIiwgXCIuZmFjZXQtaXRlbS1oZWFkZXJcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIHZhciB0YXJnZXQgPSBqUXVlcnkoZXZlbnQudGFyZ2V0KTtcclxuICAgICAgICAgICAgdmFyIGhlYWRlckVsZW1lbnQgPSB0YXJnZXQuaXMoXCIuZmFjZXQtaXRlbS1oZWFkZXJcIikgPyB0YXJnZXQgOiB0YXJnZXQucGFyZW50KFwiLmZhY2V0LWl0ZW0taGVhZGVyXCIpO1xyXG4gICAgICAgICAgICBfdGhpcy5lbGVtZW50LmZpbmQoXCIuZmFjZXQtaGVhZGVyIC5idXR0b25cIikucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpO1xyXG4gICAgICAgICAgICBfdGhpcy5Db250cm9sVmlzaWJpbGl0eU9mRmlsdGVyKGhlYWRlckVsZW1lbnQsIFNob3dIaWRlLlRvZ2dsZSk7XHJcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEV4cGFuZENvbGxhcHNlRmFjZXRzSGFuZGxlci5wcm90b3R5cGUub25SZXNpemUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XHJcbiAgICB9O1xyXG4gICAgRXhwYW5kQ29sbGFwc2VGYWNldHNIYW5kbGVyLnByb3RvdHlwZS5vbkRvY3VtZW50Q2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAvLyB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRXhwYW5kQ29sbGFwc2VGYWNldHNIYW5kbGVyO1xyXG59KCkpO1xyXG5leHBvcnRzLkV4cGFuZENvbGxhcHNlRmFjZXRzSGFuZGxlciA9IEV4cGFuZENvbGxhcHNlRmFjZXRzSGFuZGxlcjtcclxuXG5cbi8qKiovIH0pLFxuLyogMTQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvdHMvZXZlbnRoYW5kbGVycy9GYWNldEFjdGlvbkhhbmRsZXIudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZHluYW1pYyBleHBvcnRzIHByb3ZpZGVkICovXG4vKiEgYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBGaWx0ZXJBY3Rpb25UeXBlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9tb2RlbHMvRmlsdGVyQWN0aW9uVHlwZSAqLyA2KTtcclxudmFyIEZhY2V0QWN0aW9uSGFuZGxlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEZhY2V0QWN0aW9uSGFuZGxlcihlbGVtZW50LCBjb25maWdTdG9yZSkge1xyXG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICAgICAgdGhpcy5jb25maWdTdG9yZSA9IGNvbmZpZ1N0b3JlO1xyXG4gICAgfVxyXG4gICAgRmFjZXRBY3Rpb25IYW5kbGVyLnByb3RvdHlwZS5SZWdpc3RlckRvbUhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLmVsZW1lbnQub24oXCJjaGFuZ2VcIiwgXCIuZmFjZXQtYm9keSAuZmFjZXQtaXRlbS1kZXNjcmlwdGlvbiAuZmFjZXQtdmFsdWUtY2hlY2tib3hcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIHZhciBlbGVtZW50ID0galF1ZXJ5KGV2ZW50LnRhcmdldCk7XHJcbiAgICAgICAgICAgIHZhciB2YWxTdHIgPSBlbGVtZW50LnZhbCgpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHZhbFN0ci5zcGxpdChcIjpcIik7XHJcbiAgICAgICAgICAgIHZhciBjaGVja2VkID0gZWxlbWVudC5pcyhcIjpjaGVja2VkXCIpO1xyXG4gICAgICAgICAgICB2YXIgYWN0aW9uID0gY2hlY2tlZCA/IEZpbHRlckFjdGlvblR5cGVfMS5GaWx0ZXJBY3Rpb25UeXBlLkFkZCA6IEZpbHRlckFjdGlvblR5cGVfMS5GaWx0ZXJBY3Rpb25UeXBlLk1pbnVzO1xyXG4gICAgICAgICAgICBfdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLm9uRmlsdGVyQ2hhbmdlKHZhbHVlWzBdLCB2YWx1ZVsxXSwgYWN0aW9uLCB2YWx1ZVsyXSk7XHJcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEZhY2V0QWN0aW9uSGFuZGxlci5wcm90b3R5cGUub25SZXNpemUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XHJcbiAgICB9O1xyXG4gICAgRmFjZXRBY3Rpb25IYW5kbGVyLnByb3RvdHlwZS5vbkRvY3VtZW50Q2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAvLyB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRmFjZXRBY3Rpb25IYW5kbGVyO1xyXG59KCkpO1xyXG5leHBvcnRzLkZhY2V0QWN0aW9uSGFuZGxlciA9IEZhY2V0QWN0aW9uSGFuZGxlcjtcclxuXG5cbi8qKiovIH0pLFxuLyogMTUgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvdHMvZXZlbnRoYW5kbGVycy9GYWNldFNlYXJjaEhhbmRsZXIudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZHluYW1pYyBleHBvcnRzIHByb3ZpZGVkICovXG4vKiEgYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBGYWNldFNlYXJjaEhhbmRsZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBGYWNldFNlYXJjaEhhbmRsZXIoZWxlbWVudCwgY29uZmlnU3RvcmUpIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgICAgIHRoaXMuY29uZmlnU3RvcmUgPSBjb25maWdTdG9yZTtcclxuICAgIH1cclxuICAgIEZhY2V0U2VhcmNoSGFuZGxlci5wcm90b3R5cGUuUmVnaXN0ZXJEb21IYW5kbGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50Lm9uKFwia2V5dXBcIiwgXCIuZmlsdGVyLXNlYXJjaC1pbnB1dFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBqUXVlcnkoZXZlbnQudGFyZ2V0KTtcclxuICAgICAgICAgICAgdmFyIHZhbCA9IGVsZW1lbnQudmFsKCkudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICBfdGhpcy5lbGVtZW50LmZpbmQoXCIuZmFjZXQtbGlzdCAuZmFjZXQtaXRlbVwiKS5lYWNoKGZ1bmN0aW9uIChpLCBlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoalF1ZXJ5KGUpLmF0dHIoXCJkYXRhLWF0dHItbmFtZVwiKS50b0xvd2VyQ2FzZSgpLmluZGV4T2YodmFsKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBqUXVlcnkoZSkuZmFkZU91dChfdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLmFuaW1hdGlvblRpbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5KGUpLmZhZGVJbihfdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLmFuaW1hdGlvblRpbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgRmFjZXRTZWFyY2hIYW5kbGVyLnByb3RvdHlwZS5vblJlc2l6ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBJZ25vcmVcclxuICAgIH07XHJcbiAgICBGYWNldFNlYXJjaEhhbmRsZXIucHJvdG90eXBlLm9uRG9jdW1lbnRDbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIC8vIElnbm9yZVxyXG4gICAgfTtcclxuICAgIHJldHVybiBGYWNldFNlYXJjaEhhbmRsZXI7XHJcbn0oKSk7XHJcbmV4cG9ydHMuRmFjZXRTZWFyY2hIYW5kbGVyID0gRmFjZXRTZWFyY2hIYW5kbGVyO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxNiAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvdHMvZXZlbnRoYW5kbGVycy9GaWx0ZXJBY3Rpb25IYW5kbGVyLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBkeW5hbWljIGV4cG9ydHMgcHJvdmlkZWQgKi9cbi8qISBhbGwgZXhwb3J0cyB1c2VkICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIEZpbHRlckFjdGlvblR5cGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL21vZGVscy9GaWx0ZXJBY3Rpb25UeXBlICovIDYpO1xyXG52YXIgRmlsdGVyQWN0aW9uSGFuZGxlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEZpbHRlckFjdGlvbkhhbmRsZXIoZmlsdGVyRWxlbWVudCwgY29uZmlnU3RvcmUpIHtcclxuICAgICAgICB0aGlzLmZpbHRlckVsZW1lbnQgPSBmaWx0ZXJFbGVtZW50O1xyXG4gICAgICAgIHRoaXMuY29uZmlnU3RvcmUgPSBjb25maWdTdG9yZTtcclxuICAgIH1cclxuICAgIEZpbHRlckFjdGlvbkhhbmRsZXIucHJvdG90eXBlLlJlZ2lzdGVyRG9tSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuZmlsdGVyRWxlbWVudC5vbihcImNsaWNrXCIsIFwiLmZhY2V0LXN1YmhlYWRlciAuZmFjZXQtbGFiZWxzIC5sYWJlbFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBqUXVlcnkoZXZlbnQudGFyZ2V0KTtcclxuICAgICAgICAgICAgaWYgKCFlbGVtZW50LmlzKFwiLmxhYmVsXCIpKSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnRzKFwiLmxhYmVsXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciB2YWxTdHIgPSBlbGVtZW50LmF0dHIoXCJkYXRhLWZpbHRlci1lbnRyeVwiKS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB2YWxTdHIuc3BsaXQoXCI6XCIpO1xyXG4gICAgICAgICAgICBfdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLm9uRmlsdGVyQ2hhbmdlKHZhbHVlWzBdLCB2YWx1ZVsxXSwgRmlsdGVyQWN0aW9uVHlwZV8xLkZpbHRlckFjdGlvblR5cGUuTWludXMsIHZhbHVlWzJdKTtcclxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJFbGVtZW50Lm9uKFwiY2xpY2tcIiwgXCIuZmFjZXQtc3ViaGVhZGVyIC5yZW1vdmUtYWxsXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICBfdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLm9uQWxsRmlsdGVyUmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEZpbHRlckFjdGlvbkhhbmRsZXIucHJvdG90eXBlLm9uUmVzaXplID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4gICAgfTtcclxuICAgIEZpbHRlckFjdGlvbkhhbmRsZXIucHJvdG90eXBlLm9uRG9jdW1lbnRDbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIC8vIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBGaWx0ZXJBY3Rpb25IYW5kbGVyO1xyXG59KCkpO1xyXG5leHBvcnRzLkZpbHRlckFjdGlvbkhhbmRsZXIgPSBGaWx0ZXJBY3Rpb25IYW5kbGVyO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxNyAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3RzL2V2ZW50aGFuZGxlcnMvSGlkZUZhY2V0U2VjdGlvbkhhbmRsZXIudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBkeW5hbWljIGV4cG9ydHMgcHJvdmlkZWQgKi9cbi8qISBhbGwgZXhwb3J0cyB1c2VkICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIEhpZGVGYWNldFNlY3Rpb25IYW5kbGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gSGlkZUZhY2V0U2VjdGlvbkhhbmRsZXIoZWxlbWVudCwgY29uZmlnU3RvcmUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICAgICAgdGhpcy5jb25maWdTdG9yZSA9IGNvbmZpZ1N0b3JlO1xyXG4gICAgICAgIHRoaXMuUmVnaXN0ZXJEb21IYW5kbGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfdGhpcy5lbGVtZW50Lm9uKFwiY2xpY2tcIiwgXCIuaGlkZS1mYWNldFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICQoXCIuZmFjZXQtYm9keVwiKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAkKFwiLmZhY2V0LWNvbGxhcHNlZC1ib2R5XCIpLmZhZGVJbihfdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLmFuaW1hdGlvblRpbWUpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5jb2xsYXBzZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBfdGhpcy5lbGVtZW50Lm9uKFwiY2xpY2tcIiwgXCIuc2hvdy1mYWNldFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICQoXCIuZmFjZXQtY29sbGFwc2VkLWJvZHlcIikuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgJChcIi5mYWNldC1ib2R5XCIpLmZhZGVJbihfdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLmFuaW1hdGlvblRpbWUpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5jb2xsYXBzZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgSGlkZUZhY2V0U2VjdGlvbkhhbmRsZXIucHJvdG90eXBlLm9uUmVzaXplID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIElnbm9yZVxyXG4gICAgfTtcclxuICAgIEhpZGVGYWNldFNlY3Rpb25IYW5kbGVyLnByb3RvdHlwZS5vbkRvY3VtZW50Q2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAvLyBJZ25vcmVcclxuICAgIH07XHJcbiAgICByZXR1cm4gSGlkZUZhY2V0U2VjdGlvbkhhbmRsZXI7XHJcbn0oKSk7XHJcbmV4cG9ydHMuSGlkZUZhY2V0U2VjdGlvbkhhbmRsZXIgPSBIaWRlRmFjZXRTZWN0aW9uSGFuZGxlcjtcclxuXG5cbi8qKiovIH0pLFxuLyogMTggKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvdHMvbWFpbi9GaWx0ZXIudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZHluYW1pYyBleHBvcnRzIHByb3ZpZGVkICovXG4vKiEgYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBGaWx0ZXJUZW1wbGF0ZVNlcnZpY2VfMSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL3NlcnZpY2VzL0ZpbHRlclRlbXBsYXRlU2VydmljZSAqLyAxOSk7XHJcbnZhciBGaWx0ZXJDb25maWdTdG9yZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi8uLi9jb25maWcvRmlsdGVyQ29uZmlnU3RvcmUgKi8gMjEpO1xyXG52YXIgZXZlbnRoYW5kbGVyc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi8uLi9ldmVudGhhbmRsZXJzICovIDUpO1xyXG52YXIgRmlsdGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRmlsdGVyKG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlckNoYWluID0gW107XHJcbiAgICAgICAgdGhpcy5iaW5kID0gZnVuY3Rpb24gKGZpbHRlcnMpIHtcclxuICAgICAgICAgICAgdmFyIGZhY2V0U3ViSGVhZGVyID0gX3RoaXMudGVtcGxhdGVTZXJ2aWNlLmJpbmQoZmlsdGVycyk7XHJcbiAgICAgICAgICAgIF90aGlzLmZpbHRlckVsZW1lbnQuaHRtbChmYWNldFN1YkhlYWRlcik7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChfdGhpcy5maWx0ZXJFbGVtZW50ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmZpbHRlckVsZW1lbnQub2ZmKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuY29uZmlnU3RvcmUgPSBuZXcgRmlsdGVyQ29uZmlnU3RvcmVfMS5GaWx0ZXJDb25maWdTdG9yZShvcHRpb25zKTtcclxuICAgICAgICB0aGlzLmZpbHRlckVsZW1lbnQgPSBqUXVlcnkob3B0aW9ucy5jb250YWluZXJFbGVtZW50KTtcclxuICAgICAgICB0aGlzLnRlbXBsYXRlU2VydmljZSA9IG5ldyBGaWx0ZXJUZW1wbGF0ZVNlcnZpY2VfMS5GaWx0ZXJUZW1wbGF0ZVNlcnZpY2UoKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXJDaGFpbi5wdXNoKG5ldyBldmVudGhhbmRsZXJzXzEuRmlsdGVyQWN0aW9uSGFuZGxlcih0aGlzLmZpbHRlckVsZW1lbnQsIHRoaXMuY29uZmlnU3RvcmUpKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXJDaGFpbi5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XHJcbiAgICAgICAgICAgIGhhbmRsZXIuUmVnaXN0ZXJEb21IYW5kbGVyKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRmlsdGVyO1xyXG59KCkpO1xyXG5leHBvcnRzLkZpbHRlciA9IEZpbHRlcjtcclxuXG5cbi8qKiovIH0pLFxuLyogMTkgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3RzL3NlcnZpY2VzL0ZpbHRlclRlbXBsYXRlU2VydmljZS50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZHluYW1pYyBleHBvcnRzIHByb3ZpZGVkICovXG4vKiEgYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBGYWNldFN1YkhlYWRlciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vLi4vLi4vaGJzL2ZhY2V0LWFwcGxpZWQtZmlsdGVycy5oYnMgKi8gMjApO1xyXG52YXIgRmlsdGVyVGVtcGxhdGVTZXJ2aWNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRmlsdGVyVGVtcGxhdGVTZXJ2aWNlKCkge1xyXG4gICAgICAgIHRoaXMudGVtcGF0ZUZ1bmN0aW9uRm9yRmFjZXRTdWJIZWFkZXIgPSBGYWNldFN1YkhlYWRlcjtcclxuICAgIH1cclxuICAgIEZpbHRlclRlbXBsYXRlU2VydmljZS5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIChmaWx0ZXJzKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudGVtcGF0ZUZ1bmN0aW9uRm9yRmFjZXRTdWJIZWFkZXIoeyBmaWx0ZXJzOiBmaWx0ZXJzIH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBGaWx0ZXJUZW1wbGF0ZVNlcnZpY2U7XHJcbn0oKSk7XHJcbmV4cG9ydHMuRmlsdGVyVGVtcGxhdGVTZXJ2aWNlID0gRmlsdGVyVGVtcGxhdGVTZXJ2aWNlO1xyXG5cblxuLyoqKi8gfSksXG4vKiAyMCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9oYnMvZmFjZXQtYXBwbGllZC1maWx0ZXJzLmhicyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBkeW5hbWljIGV4cG9ydHMgcHJvdmlkZWQgKi9cbi8qISBhbGwgZXhwb3J0cyB1c2VkICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBIYW5kbGViYXJzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgaGFuZGxlYmFycyAqLyAwKTtcbmZ1bmN0aW9uIF9fZGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiAob2JqLl9fZXNNb2R1bGUgPyBvYmpbXCJkZWZhdWx0XCJdIDogb2JqKTsgfVxubW9kdWxlLmV4cG9ydHMgPSAoSGFuZGxlYmFyc1tcImRlZmF1bHRcIl0gfHwgSGFuZGxlYmFycykudGVtcGxhdGUoe1wiMVwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhLGJsb2NrUGFyYW1zLGRlcHRocykge1xuICAgIHZhciBzdGFjazE7XG5cbiAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFwiY29udGVudCBmYWNldC1zdWJoZWFkZXIgZ3VpIGZsdWlkLXcgYmFzaWMgY3VydmVkIHAtNVxcXCI+XFxuICAgIDxzcGFuIGNsYXNzPVxcXCJndWkgYm9sZCBndWktc3ViaGVhZGluZy0yIGNhcHNcXFwiPkFwcGxpZWQgRmlsdGVyczwvc3Bhbj5cXG4gICAgPGEgY2xhc3M9XFxcImd1aSBtLWwtNSByZW1vdmUtYWxsXFxcIiA+XFxuICAgICAgICA8aSBjbGFzcz1cXFwiZ3VpLWljb24gZ3VpLWljb24tY2FuY2VsXFxcIj48L2k+XFxuICAgICAgICA8c3Bhbj5DbGVhciBBbGw8L3NwYW4+XFxuICAgIDwvYT5cXG4gICAgPHNwYW4gY2xhc3M9XFxcImd1aSBtLWwtMTBcXFwiPlxcblwiXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnMuZWFjaC5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmZpbHRlcnMgOiBkZXB0aDApLHtcIm5hbWVcIjpcImVhY2hcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMiwgZGF0YSwgMCwgYmxvY2tQYXJhbXMsIGRlcHRocyksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiICAgIDwvc3Bhbj5cXG48L2Rpdj5cXG5cIjtcbn0sXCIyXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEsYmxvY2tQYXJhbXMsZGVwdGhzKSB7XG4gICAgdmFyIHN0YWNrMSwgaGVscGVyLCBhbGlhczE9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KTtcblxuICByZXR1cm4gXCIgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJndWkgbS1yLTVcXFwiPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJndWkgbGFyZ2UgbGFiZWxzIGZhY2V0LWxhYmVsc1xcXCI+XFxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJndWkgZ3VpLXN1YmhlYWRpbmctMlxcXCI+XCJcbiAgICArIGNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubmFtZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJzLmhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBcImZ1bmN0aW9uXCIgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwibmFtZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCI8L3NwYW4+XFxuXCJcbiAgICArICgoc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoYWxpYXMxLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5mYWNldFZhbHVlcyA6IGRlcHRoMCkse1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgzLCBkYXRhLCAwLCBibG9ja1BhcmFtcywgZGVwdGhzKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCIgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICA8L3NwYW4+XFxuXCI7XG59LFwiM1wiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhLGJsb2NrUGFyYW1zLGRlcHRocykge1xuICAgIHZhciBoZWxwZXIsIGFsaWFzMT1jb250YWluZXIubGFtYmRhLCBhbGlhczI9Y29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb247XG5cbiAgcmV0dXJuIFwiICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJndWkgbS0wIG0tdC0yIG0tci0yIHAtNCBsYWJlbCBjdXJzb3ItcG9pbnRlciBzdHJpa2V0aHJvdWdoLWhvdmVyXFxcIiBkYXRhLWZpbHRlci1lbnRyeT1cXFwiXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoc1sxXSAhPSBudWxsID8gZGVwdGhzWzFdLmlkIDogZGVwdGhzWzFdKSwgZGVwdGgwKSlcbiAgICArIFwiOlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5sYWJlbCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIjpcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGhzWzFdICE9IG51bGwgPyBkZXB0aHNbMV0udHlwZSA6IGRlcHRoc1sxXSksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCI+XFxuICAgICAgICAgICAgICAgICAgICBcIlxuICAgICsgYWxpYXMyKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubGFiZWwgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmxhYmVsIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlcnMuaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IFwiZnVuY3Rpb25cIiA/IGhlbHBlci5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSkse1wibmFtZVwiOlwibGFiZWxcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiXFxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cXFwiZ3VpLWljb24gZ3VpLWljb24tY2FuY2VsXFxcIj48L2k+XFxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG5cIjtcbn0sXCJjb21waWxlclwiOls3LFwiPj0gNC4wLjBcIl0sXCJtYWluXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEsYmxvY2tQYXJhbXMsZGVwdGhzKSB7XG4gICAgdmFyIHN0YWNrMTtcblxuICByZXR1cm4gKChzdGFjazEgPSBoZWxwZXJzW1wiaWZcIl0uY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmZpbHRlcnMgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLmxlbmd0aCA6IHN0YWNrMSkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMSwgZGF0YSwgMCwgYmxvY2tQYXJhbXMsIGRlcHRocyksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIik7XG59LFwidXNlRGF0YVwiOnRydWUsXCJ1c2VEZXB0aHNcIjp0cnVlfSk7XG5cbi8qKiovIH0pLFxuLyogMjEgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3RzL2NvbmZpZy9GaWx0ZXJDb25maWdTdG9yZS50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZHluYW1pYyBleHBvcnRzIHByb3ZpZGVkICovXG4vKiEgYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBGaWx0ZXJDb25maWdTdG9yZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEZpbHRlckNvbmZpZ1N0b3JlKG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuZGVmYXVsdGZpbHRlck9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvblRpbWU6IDIwMCxcclxuICAgICAgICAgICAgY29udGFpbmVyRWxlbWVudDogbnVsbCxcclxuICAgICAgICAgICAgb25BbGxGaWx0ZXJSZW1vdmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIC8vIElnbm9yZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvbkZpbHRlckNoYW5nZTogZnVuY3Rpb24gKGtleSwgdmFsdWUsIGFjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgLy8gSWdub3JlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmV4dGVuZE9wdGlvbnMgPSBmdW5jdGlvbiAoaW5wdXRPcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoX3RoaXMub3B0aW9ucyA9IGpRdWVyeS5leHRlbmQoe30sIF90aGlzLmRlZmF1bHRmaWx0ZXJPcHRpb25zLCBpbnB1dE9wdGlvbnMpKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZXh0ZW5kT3B0aW9ucyhvcHRpb25zKTtcclxuICAgICAgICBpZiAob3B0aW9ucy5jb250YWluZXJFbGVtZW50ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBsZWFzZSBQcm92aWRlIGEgdmFsaWQgY29udGFpbmVyIEVsZW1lbnQgb2JqZWN0IGZvciBmaWx0ZXJzXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGaWx0ZXJDb25maWdTdG9yZS5wcm90b3R5cGUsIFwiT3B0aW9uc1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gRmlsdGVyQ29uZmlnU3RvcmU7XHJcbn0oKSk7XHJcbmV4cG9ydHMuRmlsdGVyQ29uZmlnU3RvcmUgPSBGaWx0ZXJDb25maWdTdG9yZTtcclxuXG5cbi8qKiovIH0pXG4vKioqKioqLyBdKTtcbn0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBmYWNldG9vLm1pbi5qcyIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDcpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIGQ0MzQ3YjMzNzg5Mjk2M2NjZTUyIiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzBfXztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCB7XCJyb290XCI6XCJIYW5kbGViYXJzXCIsXCJhbWRcIjpcImhhbmRsZWJhcnMucnVudGltZVwiLFwiY29tbW9uanMyXCI6XCJoYW5kbGViYXJzL3J1bnRpbWVcIixcImNvbW1vbmpzXCI6XCJoYW5kbGViYXJzL3J1bnRpbWVcIn1cbi8vIG1vZHVsZSBpZCA9IDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCJ2YXIgSGFuZGxlYmFycyA9IHJlcXVpcmUoXCJoYW5kbGViYXJzXCIpO1xuZnVuY3Rpb24gX19kZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIChvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmopOyB9XG5tb2R1bGUuZXhwb3J0cyA9IChIYW5kbGViYXJzW1wiZGVmYXVsdFwiXSB8fCBIYW5kbGViYXJzKS50ZW1wbGF0ZSh7XCJjb21waWxlclwiOls3LFwiPj0gNC4wLjBcIl0sXCJtYWluXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICByZXR1cm4gXCI8ZGl2IGNsYXNzPVxcXCJzaG93LWZhY2V0IGd1aSBmbHVpZC1oIGN1cnNvci1wb2ludGVyXFxcIj5cXHJcXG4gICAgPGkgY2xhc3M9XFxcImd1aSBndWktaWNvbiBndWktaWNvbi1jaGV2cm9uLXJpZ2h0XFxcIj48L2k+XFxyXFxuICAgIDxicj5cXHJcXG4gICAgPGkgY2xhc3M9XFxcImd1aSBndWktaWNvbiBndWktaWNvbi1maWx0ZXIgcHJpbWFyeVxcXCI+PC9pPlxcclxcbjwvZGl2PlwiO1xufSxcInVzZURhdGFcIjp0cnVlfSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvaGJzL2ZhY2V0LWNvbGxhcHNlZC5oYnNcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCJ2YXIgSGFuZGxlYmFycyA9IHJlcXVpcmUoXCJoYW5kbGViYXJzXCIpO1xuZnVuY3Rpb24gX19kZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIChvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmopOyB9XG5tb2R1bGUuZXhwb3J0cyA9IChIYW5kbGViYXJzW1wiZGVmYXVsdFwiXSB8fCBIYW5kbGViYXJzKS50ZW1wbGF0ZSh7XCIxXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEsYmxvY2tQYXJhbXMsZGVwdGhzKSB7XG4gICAgdmFyIHN0YWNrMSwgYWxpYXMxPWNvbnRhaW5lci5sYW1iZGEsIGFsaWFzMj1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbiwgYWxpYXMzPWRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSk7XG5cbiAgcmV0dXJuIFwiICAgICAgICA8ZGl2IGNsYXNzPVxcXCJpdGVtIGZhY2V0LWl0ZW1cXFwiIGRhdGEtYXR0ci1uYW1lPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udGVudFxcXCI+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZhY2V0LWl0ZW0taGVhZGVyIGZsdWlkIGN1cnNvci1wb2ludGVyIGd1aSBzZWxlY3RhYmxlIGl0ZW1cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImd1aSBndWktc3ViaGVhZGluZy0yIHByaW1hcnlcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiIFwiXG4gICAgKyAoKHN0YWNrMSA9IF9fZGVmYXVsdChyZXF1aXJlKFwiQzpcXFxcVXNlcnNcXFxccm91c3R1cmdcXFxcU291cmNlXFxcXFJlcG9zXFxcXFNlYXJjaE1hc3RlclxcXFxGYWNldG9vXFxcXHNyY1xcXFxoYnNcXFxcaGVscGVyc1xcXFxTZWxlY3RlZEZpbHRlcnNDb3VudC50c1wiKSkuY2FsbChhbGlhczMsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmZhY2V0VmFsdWVzIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJTZWxlY3RlZEZpbHRlcnNDb3VudFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIlxcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XFxcImd1aSBndWktaWNvbiBndWktaWNvbi1jaGV2cm9uLWRvd24gcmlnaHQgbS1yLTEwXFxcIj48L2k+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjbGVhclxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImRlc2NyaXB0aW9uIGd1aSBndWktaGlkZGVuIGZhY2V0LWl0ZW0tZGVzY3JpcHRpb24gbS10LTVcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZ3VpIGZsdWlkLXcgZmx1aWQtaCBtLTAgcC0wXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzLmVhY2guY2FsbChhbGlhczMsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmZhY2V0VmFsdWVzIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDIsIGRhdGEsIDAsIGJsb2NrUGFyYW1zLCBkZXB0aHMpLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuXCI7XG59LFwiMlwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhLGJsb2NrUGFyYW1zLGRlcHRocykge1xuICAgIHZhciBzdGFjazE7XG5cbiAgcmV0dXJuIFwiIFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcIml0ZW1cXFwiPlxcblwiXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnNbXCJpZlwiXS5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnNlbGVjdGVkIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgzLCBkYXRhLCAwLCBibG9ja1BhcmFtcywgZGVwdGhzKSxcImludmVyc2VcIjpjb250YWluZXIucHJvZ3JhbSg1LCBkYXRhLCAwLCBibG9ja1BhcmFtcywgZGVwdGhzKSxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCIgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG5cIjtcbn0sXCIzXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEsYmxvY2tQYXJhbXMsZGVwdGhzKSB7XG4gICAgdmFyIGFsaWFzMT1jb250YWluZXIubGFtYmRhLCBhbGlhczI9Y29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb24sIGFsaWFzMz1kZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pO1xuXG4gIHJldHVybiBcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgdGl0bGU9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5sYWJlbCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCIgY2xhc3M9XFxcImd1aSBjdXJzb3ItcG9pbnRlciBuby13cmFwIHByaW1hcnlcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPVxcXCJndWkgZmFjZXQtdmFsdWUtY2hlY2tib3ggY3Vyc29yLXBvaW50ZXIgbS1sLTBcXFwiIGlkPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGFiZWwgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCItXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRhdGEgJiYgZGF0YS5pbmRleCksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCIgXCJcbiAgICArIGFsaWFzMihfX2RlZmF1bHQocmVxdWlyZShcIkM6XFxcXFVzZXJzXFxcXHJvdXN0dXJnXFxcXFNvdXJjZVxcXFxSZXBvc1xcXFxTZWFyY2hNYXN0ZXJcXFxcRmFjZXRvb1xcXFxzcmNcXFxcaGJzXFxcXGhlbHBlcnNcXFxcQ2hlY2tlZC50c1wiKSkuY2FsbChhbGlhczMsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnNlbGVjdGVkIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJDaGVja2VkXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKVxuICAgICsgXCIgXCJcbiAgICArIGFsaWFzMihfX2RlZmF1bHQocmVxdWlyZShcIkM6XFxcXFVzZXJzXFxcXHJvdXN0dXJnXFxcXFNvdXJjZVxcXFxSZXBvc1xcXFxTZWFyY2hNYXN0ZXJcXFxcRmFjZXRvb1xcXFxzcmNcXFxcaGJzXFxcXGhlbHBlcnNcXFxcRGlzYWJsZWQudHNcIikpLmNhbGwoYWxpYXMzLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5kaXNhYmxlZCA6IGRlcHRoMCkse1wibmFtZVwiOlwiRGlzYWJsZWRcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpXG4gICAgKyBcIiB2YWx1ZT1cXFwiXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoc1sxXSAhPSBudWxsID8gZGVwdGhzWzFdLmlkIDogZGVwdGhzWzFdKSwgZGVwdGgwKSlcbiAgICArIFwiOlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5sYWJlbCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIjpcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGhzWzFdICE9IG51bGwgPyBkZXB0aHNbMV0udHlwZSA6IGRlcHRoc1sxXSksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCIgdHlwZT1cXFwiY2hlY2tib3hcXFwiIC8+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGFiZWwgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJndWktYm9keS0yXFxcIj4oXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNvdW50IDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiKTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cXG5cIjtcbn0sXCI1XCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEsYmxvY2tQYXJhbXMsZGVwdGhzKSB7XG4gICAgdmFyIGFsaWFzMT1jb250YWluZXIubGFtYmRhLCBhbGlhczI9Y29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb24sIGFsaWFzMz1kZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pO1xuXG4gIHJldHVybiBcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgdGl0bGU9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5sYWJlbCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCIgY2xhc3M9XFxcImd1aSBjdXJzb3ItcG9pbnRlciBuby13cmFwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cXFwiZ3VpIGZhY2V0LXZhbHVlLWNoZWNrYm94IGN1cnNvci1wb2ludGVyIG0tbC0wXFxcIiBpZD1cXFwiXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmxhYmVsIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiLVwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkYXRhICYmIGRhdGEuaW5kZXgpLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIFwiXG4gICAgKyBhbGlhczIoX19kZWZhdWx0KHJlcXVpcmUoXCJDOlxcXFxVc2Vyc1xcXFxyb3VzdHVyZ1xcXFxTb3VyY2VcXFxcUmVwb3NcXFxcU2VhcmNoTWFzdGVyXFxcXEZhY2V0b29cXFxcc3JjXFxcXGhic1xcXFxoZWxwZXJzXFxcXENoZWNrZWQudHNcIikpLmNhbGwoYWxpYXMzLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5zZWxlY3RlZCA6IGRlcHRoMCkse1wibmFtZVwiOlwiQ2hlY2tlZFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSlcbiAgICArIFwiIFwiXG4gICAgKyBhbGlhczIoX19kZWZhdWx0KHJlcXVpcmUoXCJDOlxcXFxVc2Vyc1xcXFxyb3VzdHVyZ1xcXFxTb3VyY2VcXFxcUmVwb3NcXFxcU2VhcmNoTWFzdGVyXFxcXEZhY2V0b29cXFxcc3JjXFxcXGhic1xcXFxoZWxwZXJzXFxcXERpc2FibGVkLnRzXCIpKS5jYWxsKGFsaWFzMywoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuZGlzYWJsZWQgOiBkZXB0aDApLHtcIm5hbWVcIjpcIkRpc2FibGVkXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKVxuICAgICsgXCIgdmFsdWU9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aHNbMV0gIT0gbnVsbCA/IGRlcHRoc1sxXS5pZCA6IGRlcHRoc1sxXSksIGRlcHRoMCkpXG4gICAgKyBcIjpcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGFiZWwgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCI6XCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoc1sxXSAhPSBudWxsID8gZGVwdGhzWzFdLnR5cGUgOiBkZXB0aHNbMV0pLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIHR5cGU9XFxcImNoZWNrYm94XFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmxhYmVsIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiZ3VpLWJvZHktMlxcXCI+KFwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jb3VudCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIik8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XFxuXCI7XG59LFwiY29tcGlsZXJcIjpbNyxcIj49IDQuMC4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhLGJsb2NrUGFyYW1zLGRlcHRocykge1xuICAgIHZhciBzdGFjazE7XG5cbiAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFwiZ3VpIGZsdWlkLWggb2YtaGlkZGVuXFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiZ3VpIG0tNVxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJndWkgbGVmdFxcXCI+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImd1aSBjYXBzIGJvbGQgZ3VpLXN1YmhlYWRpbmctMlxcXCI+XFxuICAgICAgICAgICAgICAgICAgICBGaWx0ZXIgQnlcXG4gICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImd1aSByaWdodFxcXCI+XFxuICAgICAgICAgICAgPGEgY2xhc3M9XFxcImd1aSBjdXJzb3ItcG9pbnRlciBoaWRlLWZhY2V0XFxcIj5cXG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XFxcImd1aS1pY29uIGd1aS1pY29uLWNoZXZyb24tbGVmdFxcXCI+PC9pPlxcbiAgICAgICAgICAgIDwvYT5cXG4gICAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiZ3VpIGNsZWFyXFxcIj48L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiZ3VpIG0tdC01XFxcIj48L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiZ3VpIGxlZnRcXFwiPlxcbiAgICAgICAgPGEgY2xhc3M9XFxcImd1aSBjdXJzb3ItcG9pbnRlciBleHBhbmQtYWxsXFxcIj5cXG4gICAgICAgICAgICA8aSBjbGFzcz1cXFwiZ3VpLWljb24gZ3VpLWljb24tYWRkXFxcIj48L2k+XFxuICAgICAgICAgICAgRXhwYW5kIEFsbFxcbiAgICAgICAgPC9hPlxcbiAgICAgICAgPGEgY2xhc3M9XFxcImd1aSBjdXJzb3ItcG9pbnRlciBtLWwtMTAgY29sbGFwc2UtYWxsXFxcIj5cXG4gICAgICAgICAgICA8aSBjbGFzcz1cXFwiZ3VpLWljb24gIGd1aS1pY29uLW1pbnVzXFxcIj48L2k+XFxuICAgICAgICAgICAgQ29sbGFwc2UgQWxsXFxuICAgICAgICA8L2E+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJndWkgY2xlYXJcXFwiPjwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJndWkgbS10LTVcXFwiPjwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJndWkgaW5wdXQgZmx1aWQtdyBwLXQtNSBwLXItNSBwLWItNSBwLWwtMVxcXCI+XFxuICAgICAgICA8aW5wdXQgY2xhc3M9XFxcImd1aSBpbnB1dCBwLTUgZmx1aWQtdyBndWktc3ViaGVhZGluZy0yIGZpbHRlci1zZWFyY2gtaW5wdXRcXFwiIHBsYWNlaG9sZGVyPVxcXCJTZWFyY2ggRmlsdGVyc1xcXCIgLz5cXG4gICAgPC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XFxcImd1aSBmbHVpZC1oIGZhY2V0LWxpc3Qgb2YtYXV0b1xcXCI+XFxuXCJcbiAgICArICgoc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuZmFjZXRzIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDEsIGRhdGEsIDAsIGJsb2NrUGFyYW1zLCBkZXB0aHMpLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIiAgICA8L2Rpdj5cXG48L2Rpdj5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZSxcInVzZURlcHRoc1wiOnRydWV9KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9oYnMvZmFjZXQtYm9keS5oYnNcbi8vIG1vZHVsZSBpZCA9IDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCJjb25zdCBjaGVja2VkID0gKGJvb2w6IGJvb2xlYW4pOiBzdHJpbmcgPT4ge1xyXG4gICAgcmV0dXJuIGJvb2wgPyBcImNoZWNrZWRcIiA6IFwiXCI7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjaGVja2VkO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvdHNsaW50LWxvYWRlcj8/cmVmLS0xIS4vc3JjL2hicy9oZWxwZXJzL0NoZWNrZWQudHMiLCJjb25zdCBkaXNhYmxlZCA9IChib29sOiBib29sZWFuKTogc3RyaW5nID0+IHtcclxuICAgIHJldHVybiBib29sID8gXCJkaXNhYmxlZFwiIDogXCJcIjtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGRpc2FibGVkO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvdHNsaW50LWxvYWRlcj8/cmVmLS0xIS4vc3JjL2hicy9oZWxwZXJzL0Rpc2FibGVkLnRzIiwiZXhwb3J0ICogZnJvbSBcIi4vRXhwYW5kQ29sbGFwc2VGYWNldHNIYW5kbGVyXCI7XHJcbmV4cG9ydCAqIGZyb20gIFwiLi9GYWNldEFjdGlvbkhhbmRsZXJcIjtcclxuZXhwb3J0ICogZnJvbSAgXCIuL0ZhY2V0U2VhcmNoSGFuZGxlclwiO1xyXG5leHBvcnQgKiBmcm9tICBcIi4vRmlsdGVyQWN0aW9uSGFuZGxlclwiO1xyXG5leHBvcnQgKiBmcm9tICBcIi4vSGlkZUZhY2V0U2VjdGlvbkhhbmRsZXJcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vSUV2ZW50SGFuZGxlclwiO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvdHNsaW50LWxvYWRlcj8/cmVmLS0xIS4vc3JjL3RzL2V2ZW50aGFuZGxlcnMvaW5kZXgudHMiLCJleHBvcnQgZW51bSBGaWx0ZXJBY3Rpb25UeXBlIHtcbiAgICBBZGQgPSBcIkFkZFwiLFxuICAgIE1pbnVzID0gXCJNaW51c1wiLFxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXI/P3JlZi0tMSEuL3NyYy90cy9tb2RlbHMvRmlsdGVyQWN0aW9uVHlwZS50cyIsImV4cG9ydCAqIGZyb20gXCIuL0ZhY2V0XCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL0ZpbHRlclwiO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvdHNsaW50LWxvYWRlcj8/cmVmLS0xIS4vc3JjL3RzL21haW4vRW50cnkudHMiLCJpbXBvcnQgeyBJRmFjZXQgfSBmcm9tIFwiLi4vbW9kZWxzL0lGYWNldFwiO1xuaW1wb3J0IHsgSUZhY2V0VmFsdWUgfSBmcm9tIFwiLi4vbW9kZWxzL0lGYWNldFZhbHVlXCI7XG5pbXBvcnQgeyBGYWNldFRlbXBsYXRlU2VydmljZSB9IGZyb20gXCIuLi9zZXJ2aWNlcy9GYWNldFRlbXBsYXRlU2VydmljZVwiO1xuaW1wb3J0IHsgSUZhY2V0VGVtcGxhdGVTZXJ2aWNlIH0gZnJvbSBcIi4uL3NlcnZpY2VzL0lGYWNldFRlbXBsYXRlU2VydmljZVwiO1xuaW1wb3J0IHsgRmFjZXRDb25maWdTdG9yZSB9IGZyb20gXCIuLy4uL2NvbmZpZy9GYWNldENvbmZpZ1N0b3JlXCI7XG5pbXBvcnQgeyBJRmFjZXRPcHRpb25zIH0gZnJvbSBcIi4vLi4vY29uZmlnL0lGYWNldE9wdGlvbnNcIjtcbmltcG9ydCB7IEV4cGFuZENvbGxhcHNlRmFjZXRzSGFuZGxlciAsIEZhY2V0QWN0aW9uSGFuZGxlciwgRmFjZXRTZWFyY2hIYW5kbGVyLFxuICAgICAgICAgSGlkZUZhY2V0U2VjdGlvbkhhbmRsZXIsIElFdmVudEhhbmRsZXIgfSBmcm9tIFwiLi8uLi9ldmVudGhhbmRsZXJzXCI7XG5cbmV4cG9ydCBjbGFzcyBGYWNldCB7XG4gICAgcHJpdmF0ZSBjb25maWdTdG9yZTogRmFjZXRDb25maWdTdG9yZTtcbiAgICBwcml2YXRlIHRlbXBsYXRlU2VydmljZTogSUZhY2V0VGVtcGxhdGVTZXJ2aWNlO1xuICAgIHByaXZhdGUgZmFjZXRFbGVtZW50OiBKUXVlcnk7XG4gICAgcHJpdmF0ZSBoYW5kbGVyQ2hhaW46IElFdmVudEhhbmRsZXJbXSA9IFtdO1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IElGYWNldE9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5jb25maWdTdG9yZSA9ICBuZXcgRmFjZXRDb25maWdTdG9yZShvcHRpb25zKTtcbiAgICAgICAgdGhpcy5mYWNldEVsZW1lbnQgPSBqUXVlcnkob3B0aW9ucy5jb250YWluZXJFbGVtZW50KTtcbiAgICAgICAgdGhpcy50ZW1wbGF0ZVNlcnZpY2UgPSBuZXcgRmFjZXRUZW1wbGF0ZVNlcnZpY2UodGhpcy5jb25maWdTdG9yZSk7XG4gICAgICAgIHRoaXMuaGFuZGxlckNoYWluLnB1c2gobmV3IEV4cGFuZENvbGxhcHNlRmFjZXRzSGFuZGxlcih0aGlzLmZhY2V0RWxlbWVudCwgdGhpcy5jb25maWdTdG9yZSkpO1xuICAgICAgICB0aGlzLmhhbmRsZXJDaGFpbi5wdXNoKG5ldyBGYWNldEFjdGlvbkhhbmRsZXIodGhpcy5mYWNldEVsZW1lbnQsIHRoaXMuY29uZmlnU3RvcmUpKTtcbiAgICAgICAgdGhpcy5oYW5kbGVyQ2hhaW4ucHVzaChuZXcgRmFjZXRTZWFyY2hIYW5kbGVyKHRoaXMuZmFjZXRFbGVtZW50LCB0aGlzLmNvbmZpZ1N0b3JlKSk7XG4gICAgICAgIHRoaXMuaGFuZGxlckNoYWluLnB1c2gobmV3IEhpZGVGYWNldFNlY3Rpb25IYW5kbGVyKHRoaXMuZmFjZXRFbGVtZW50LCB0aGlzLmNvbmZpZ1N0b3JlKSk7XG4gICAgICAgIHRoaXMuaGFuZGxlckNoYWluLmZvckVhY2goKGhhbmRsZXIpID0+IHtcbiAgICAgICAgICAgIGhhbmRsZXIuUmVnaXN0ZXJEb21IYW5kbGVyKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBwdWJsaWMgYmluZCA9ICAoZmFjZXRzOiBJRmFjZXRbXSk6IHZvaWQgPT4ge1xuICAgICAgICBjb25zdCBmdWxsRmFjZXQgPSB0aGlzLnRlbXBsYXRlU2VydmljZS5iaW5kKGZhY2V0cyk7XG4gICAgICAgIHRoaXMuZmFjZXRFbGVtZW50Lmh0bWwoZnVsbEZhY2V0KTtcbiAgICB9XG4gICAgcHVibGljIGRlc3Ryb3kgPSAgKCk6IHZvaWQgPT4ge1xuICAgICAgICBpZiAoIHRoaXMuZmFjZXRFbGVtZW50ICE9PSB1bmRlZmluZWQgKSB7XG4gICAgICAgICAgICB0aGlzLmZhY2V0RWxlbWVudC5vZmYoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy90c2xpbnQtbG9hZGVyPz9yZWYtLTEhLi9zcmMvdHMvbWFpbi9GYWNldC50cyIsImltcG9ydCAqIGFzIEhhbmRsZWJhcnMgZnJvbSBcImhhbmRsZWJhcnNcIjtcbmltcG9ydCB7IElGYWNldCB9IGZyb20gXCIuLi9tb2RlbHMvSUZhY2V0XCI7XG5pbXBvcnQgKiBhcyBGYWNldE1haW4gZnJvbSBcIi4vLi4vLi4vaGJzL2ZhY2V0LW1haW4uaGJzXCI7XG5pbXBvcnQgeyBGYWNldENvbmZpZ1N0b3JlIH0gZnJvbSBcIi4vLi4vY29uZmlnL0ZhY2V0Q29uZmlnU3RvcmVcIjtcbmltcG9ydCB7IElGYWNldFRlbXBsYXRlU2VydmljZSB9IGZyb20gXCIuL0lGYWNldFRlbXBsYXRlU2VydmljZVwiO1xuXG5leHBvcnQgY2xhc3MgRmFjZXRUZW1wbGF0ZVNlcnZpY2UgaW1wbGVtZW50cyBJRmFjZXRUZW1wbGF0ZVNlcnZpY2Uge1xuICBwcml2YXRlIGRhdGE6IElGYWNldFtdO1xuICBwcml2YXRlIHRlbXBhdGVGdW5jdGlvbkZvckZhY2V0TWFpbjogYW55O1xuICBwcml2YXRlIHRlbXBhdGVGdW5jdGlvbkZvckZhY2V0SGVhZGVyOiBhbnk7XG4gIHByaXZhdGUgdGVtcGF0ZUZ1bmN0aW9uRm9yRmFjZXRTdWJIZWFkZXI6IGFueTtcbiAgcHJpdmF0ZSB0ZW1wYXRlRnVuY3Rpb25Gb3JGYWNldEJvZHk6IGFueTtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjb25maWdTdG9yZTogRmFjZXRDb25maWdTdG9yZSkge1xuICAgIHRoaXMudGVtcGF0ZUZ1bmN0aW9uRm9yRmFjZXRNYWluID0gRmFjZXRNYWluO1xuICB9XG4gIHB1YmxpYyBiaW5kKGZhY2V0czogSUZhY2V0W10pOiBzdHJpbmcge1xuICAgIGNvbnN0IGNvbGxhcHNlZDogYm9vbGVhbiA9IHRoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5jb2xsYXBzZWQ7XG4gICAgcmV0dXJuIHRoaXMudGVtcGF0ZUZ1bmN0aW9uRm9yRmFjZXRNYWluKHsgY29sbGFwc2VkLCBmYWNldHMgfSk7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy90c2xpbnQtbG9hZGVyPz9yZWYtLTEhLi9zcmMvdHMvc2VydmljZXMvRmFjZXRUZW1wbGF0ZVNlcnZpY2UudHMiLCJ2YXIgSGFuZGxlYmFycyA9IHJlcXVpcmUoXCJoYW5kbGViYXJzXCIpO1xuZnVuY3Rpb24gX19kZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIChvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmopOyB9XG5tb2R1bGUuZXhwb3J0cyA9IChIYW5kbGViYXJzW1wiZGVmYXVsdFwiXSB8fCBIYW5kbGViYXJzKS50ZW1wbGF0ZSh7XCIxXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxO1xuXG4gIHJldHVybiBcIiAgICA8ZGl2IGNsYXNzPVxcXCJmYWNldC1jb2xsYXBzZWQtYm9keSBndWkgZmx1aWQtaCB3LWF1dG9cXFwiPlwiXG4gICAgKyAoKHN0YWNrMSA9IGNvbnRhaW5lci5pbnZva2VQYXJ0aWFsKHJlcXVpcmUoXCJDOlxcXFxVc2Vyc1xcXFxyb3VzdHVyZ1xcXFxTb3VyY2VcXFxcUmVwb3NcXFxcU2VhcmNoTWFzdGVyXFxcXEZhY2V0b29cXFxcc3JjXFxcXGhic1xcXFxmYWNldC1jb2xsYXBzZWQuaGJzXCIpLGRlcHRoMCx7XCJuYW1lXCI6XCJmYWNldC1jb2xsYXBzZWRcIixcImRhdGFcIjpkYXRhLFwiaGVscGVyc1wiOmhlbHBlcnMsXCJwYXJ0aWFsc1wiOnBhcnRpYWxzLFwiZGVjb3JhdG9yc1wiOmNvbnRhaW5lci5kZWNvcmF0b3JzfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCI8L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiZmFjZXQtYm9keSBndWkgZmx1aWQtaCBvZi1oaWRkZW4gZ3VpLWhpZGRlblxcXCI+XCJcbiAgICArICgoc3RhY2sxID0gY29udGFpbmVyLmludm9rZVBhcnRpYWwocmVxdWlyZShcIkM6XFxcXFVzZXJzXFxcXHJvdXN0dXJnXFxcXFNvdXJjZVxcXFxSZXBvc1xcXFxTZWFyY2hNYXN0ZXJcXFxcRmFjZXRvb1xcXFxzcmNcXFxcaGJzXFxcXGZhY2V0LWJvZHkuaGJzXCIpLGRlcHRoMCx7XCJuYW1lXCI6XCJmYWNldC1ib2R5XCIsXCJkYXRhXCI6ZGF0YSxcImhlbHBlcnNcIjpoZWxwZXJzLFwicGFydGlhbHNcIjpwYXJ0aWFscyxcImRlY29yYXRvcnNcIjpjb250YWluZXIuZGVjb3JhdG9yc30pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiPC9kaXY+XFxuXCI7XG59LFwiM1wiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMTtcblxuICByZXR1cm4gXCIgICAgPGRpdiBjbGFzcz1cXFwiZmFjZXQtY29sbGFwc2VkLWJvZHkgZ3VpIGZsdWlkLWggdy1hdXRvIGd1aS1oaWRkZW5cXFwiPlwiXG4gICAgKyAoKHN0YWNrMSA9IGNvbnRhaW5lci5pbnZva2VQYXJ0aWFsKHJlcXVpcmUoXCJDOlxcXFxVc2Vyc1xcXFxyb3VzdHVyZ1xcXFxTb3VyY2VcXFxcUmVwb3NcXFxcU2VhcmNoTWFzdGVyXFxcXEZhY2V0b29cXFxcc3JjXFxcXGhic1xcXFxmYWNldC1jb2xsYXBzZWQuaGJzXCIpLGRlcHRoMCx7XCJuYW1lXCI6XCJmYWNldC1jb2xsYXBzZWRcIixcImRhdGFcIjpkYXRhLFwiaGVscGVyc1wiOmhlbHBlcnMsXCJwYXJ0aWFsc1wiOnBhcnRpYWxzLFwiZGVjb3JhdG9yc1wiOmNvbnRhaW5lci5kZWNvcmF0b3JzfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCI8L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiZmFjZXQtYm9keSBndWkgZmx1aWQtaCBvZi1oaWRkZW5cXFwiPlwiXG4gICAgKyAoKHN0YWNrMSA9IGNvbnRhaW5lci5pbnZva2VQYXJ0aWFsKHJlcXVpcmUoXCJDOlxcXFxVc2Vyc1xcXFxyb3VzdHVyZ1xcXFxTb3VyY2VcXFxcUmVwb3NcXFxcU2VhcmNoTWFzdGVyXFxcXEZhY2V0b29cXFxcc3JjXFxcXGhic1xcXFxmYWNldC1ib2R5Lmhic1wiKSxkZXB0aDAse1wibmFtZVwiOlwiZmFjZXQtYm9keVwiLFwiZGF0YVwiOmRhdGEsXCJoZWxwZXJzXCI6aGVscGVycyxcInBhcnRpYWxzXCI6cGFydGlhbHMsXCJkZWNvcmF0b3JzXCI6Y29udGFpbmVyLmRlY29yYXRvcnN9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIjwvZGl2PlxcblwiO1xufSxcImNvbXBpbGVyXCI6WzcsXCI+PSA0LjAuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBzdGFjazE7XG5cbiAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFwiZ3VpIGZsdWlkLWggXFxcIj5cXG5cIlxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzW1wiaWZcIl0uY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jb2xsYXBzZWQgOiBkZXB0aDApLHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDEsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5wcm9ncmFtKDMsIGRhdGEsIDApLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIjwvZGl2PlwiO1xufSxcInVzZVBhcnRpYWxcIjp0cnVlLFwidXNlRGF0YVwiOnRydWV9KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9oYnMvZmFjZXQtbWFpbi5oYnNcbi8vIG1vZHVsZSBpZCA9IDEwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiaW1wb3J0IHsgSUZhY2V0VmFsdWUgfSBmcm9tIFwiLi4vLi4vLi4vaW5kZXhcIjtcclxuXHJcbmNvbnN0IHNlbGVjdGVkRmlsdGVyc0NvdW50ID0gKGZhY2V0VmFsdWVzOiBJRmFjZXRWYWx1ZVtdKTogc3RyaW5nID0+IHtcclxuICAgIGxldCBpbmRleCA9IDA7XHJcbiAgICBpZiAoZmFjZXRWYWx1ZXMgIT09IHVuZGVmaW5lZFxyXG4gICAgICAgICYmIGZhY2V0VmFsdWVzICE9PSBudWxsXHJcbiAgICAgICAgJiYgZmFjZXRWYWx1ZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGZhY2V0VmFsdWUgb2YgZmFjZXRWYWx1ZXMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChmYWNldFZhbHVlLnNlbGVjdGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXgrKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGluZGV4ID09PSAwID8gXCJcIiA6IFwiPHNwYW4gY2xhc3M9XFxcImd1aS1ib2R5LTJcXFwiPihcIiArIGluZGV4ICsgXCIpPC9zcGFuPlwiO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgc2VsZWN0ZWRGaWx0ZXJzQ291bnQ7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy90c2xpbnQtbG9hZGVyPz9yZWYtLTEhLi9zcmMvaGJzL2hlbHBlcnMvU2VsZWN0ZWRGaWx0ZXJzQ291bnQudHMiLCJpbXBvcnQge0ZpbHRlckFjdGlvblR5cGV9IGZyb20gXCIuLi9tb2RlbHMvRmlsdGVyQWN0aW9uVHlwZVwiO1xuaW1wb3J0IHtJRmFjZXRPcHRpb25zfSBmcm9tIFwiLi9JRmFjZXRPcHRpb25zXCI7XG5cbmV4cG9ydCBjbGFzcyBGYWNldENvbmZpZ1N0b3JlIHtcbiAgICBwcml2YXRlIG9wdGlvbnM6IElGYWNldE9wdGlvbnM7XG4gICAgcHJpdmF0ZSBkZWZhdWx0RmFjZXRPcHRpb25zOiBJRmFjZXRPcHRpb25zID0ge1xuICAgICAgICBhbmltYXRpb25UaW1lOiAyMDAsXG4gICAgICAgIGNvbGxhcHNlZDogZmFsc2UsXG4gICAgICAgIGNvbnRhaW5lckVsZW1lbnQ6IG51bGwsXG4gICAgICAgIC8vIGZhY2V0czogW10sXG4gICAgICAgIG9uRmlsdGVyQ2hhbmdlOiAoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIGFjdGlvbjogRmlsdGVyQWN0aW9uVHlwZSk6IHZvaWQgPT4ge1xuICAgICAgICAgICAgLy8gSWdub3JlXG4gICAgICAgIH0sXG4gICAgfTtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zOiBJRmFjZXRPcHRpb25zKSB7XG4gICAgICAgIHRoaXMuZXh0ZW5kT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgaWYgKG9wdGlvbnMuY29udGFpbmVyRWxlbWVudCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUGxlYXNlIFByb3ZpZGUgYSB2YWxpZCBjb250YWluZXIgRWxlbWVudCBvYmplY3RcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHVibGljIGdldCBPcHRpb25zKCk6IElGYWNldE9wdGlvbnMge3JldHVybiB0aGlzLm9wdGlvbnM7IH1cbiAgICBwcml2YXRlIGV4dGVuZE9wdGlvbnMgPSAoaW5wdXRPcHRpb25zOiBJRmFjZXRPcHRpb25zKTogSUZhY2V0T3B0aW9ucyA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMgPSBqUXVlcnkuZXh0ZW5kKHt9LCB0aGlzLmRlZmF1bHRGYWNldE9wdGlvbnMsIGlucHV0T3B0aW9ucyk7XG4gICAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXI/P3JlZi0tMSEuL3NyYy90cy9jb25maWcvRmFjZXRDb25maWdTdG9yZS50cyIsImltcG9ydCB7IEZhY2V0Q29uZmlnU3RvcmUgfSBmcm9tIFwiLi8uLi9jb25maWcvRmFjZXRDb25maWdTdG9yZVwiO1xuaW1wb3J0IHsgSUV2ZW50SGFuZGxlciB9IGZyb20gXCIuL0lFdmVudEhhbmRsZXJcIjtcblxuZW51bSBTaG93SGlkZSB7XG4gICAgU2hvdyxcbiAgICBIaWRlLFxuICAgIFRvZ2dsZSxcbn1cblxuZXhwb3J0IGNsYXNzIEV4cGFuZENvbGxhcHNlRmFjZXRzSGFuZGxlciBpbXBsZW1lbnRzIElFdmVudEhhbmRsZXIge1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudDogSlF1ZXJ5LCBwcml2YXRlIGNvbmZpZ1N0b3JlOiBGYWNldENvbmZpZ1N0b3JlKSB7fVxuXG4gICAgcHVibGljIFJlZ2lzdGVyRG9tSGFuZGxlcigpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5lbGVtZW50Lm9uKFwiY2xpY2tcIiwgXCIuZXhwYW5kLWFsbFwiLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5maW5kKFwiLmZhY2V0LWl0ZW0taGVhZGVyXCIpLmVhY2goKGluZGV4LCBlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5Db250cm9sVmlzaWJpbGl0eU9mRmlsdGVyKGpRdWVyeShlbGVtZW50KSwgU2hvd0hpZGUuU2hvdyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5lbGVtZW50Lm9uKFwiY2xpY2tcIiwgXCIuY29sbGFwc2UtYWxsXCIsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LmZpbmQoXCIuZmFjZXQtaXRlbS1oZWFkZXJcIikuZWFjaCgoaW5kZXgsIGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLkNvbnRyb2xWaXNpYmlsaXR5T2ZGaWx0ZXIoalF1ZXJ5KGVsZW1lbnQpLCBTaG93SGlkZS5IaWRlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVsZW1lbnQub24oXCJjbGlja1wiLCBcIi5mYWNldC1pdGVtLWhlYWRlclwiLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGpRdWVyeShldmVudC50YXJnZXQpO1xuICAgICAgICAgICAgY29uc3QgaGVhZGVyRWxlbWVudCA9IHRhcmdldC5pcyhcIi5mYWNldC1pdGVtLWhlYWRlclwiKSA/IHRhcmdldCA6IHRhcmdldC5wYXJlbnQoXCIuZmFjZXQtaXRlbS1oZWFkZXJcIik7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuZmluZChcIi5mYWNldC1oZWFkZXIgLmJ1dHRvblwiKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIik7XG4gICAgICAgICAgICB0aGlzLkNvbnRyb2xWaXNpYmlsaXR5T2ZGaWx0ZXIoaGVhZGVyRWxlbWVudCwgU2hvd0hpZGUuVG9nZ2xlKTtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcHVibGljIG9uUmVzaXplKCk6IHZvaWQge1xuICAgICAgICAvLyB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcbiAgICB9XG4gICAgcHVibGljIG9uRG9jdW1lbnRDbGljayhldmVudDogYW55KTogdm9pZCB7XG4gICAgICAgIC8vIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xuICAgIH1cbiAgICBwcml2YXRlIENvbnRyb2xWaXNpYmlsaXR5T2ZGaWx0ZXIgPSAoZWxlbWVudDogSlF1ZXJ5LCBzaG93SGlkZTogU2hvd0hpZGUpID0+IHtcbiAgICAgICAgY29uc3QgaWNvbkVsZW1lbnQgPSBlbGVtZW50LmNoaWxkcmVuKFwiaVwiKTtcbiAgICAgICAgY29uc3QgY3VycmVudGx5VmlzaWJsZSA9IGljb25FbGVtZW50Lmhhc0NsYXNzKFwiZ3VpLWljb24tY2hldnJvbi11cFwiKTtcbiAgICAgICAgaWYgKFNob3dIaWRlLlRvZ2dsZSAhPT0gc2hvd0hpZGUgJiYgKChjdXJyZW50bHlWaXNpYmxlICYmIHNob3dIaWRlID09PSBTaG93SGlkZS5TaG93KSB8fFxuICAgICAgICAgICAgKCFjdXJyZW50bHlWaXNpYmxlICYmIHNob3dIaWRlID09PSBTaG93SGlkZS5IaWRlKSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWN1cnJlbnRseVZpc2libGUpIHtcbiAgICAgICAgICAgIGVsZW1lbnQucGFyZW50cyhcIi5mYWNldC1pdGVtXCIpLmZpbmQoXCIuZmFjZXQtaXRlbS1kZXNjcmlwdGlvblwiKS5zbGlkZURvd24oMjAwKTtcbiAgICAgICAgICAgIGljb25FbGVtZW50LnJlbW92ZUNsYXNzKFwiZ3VpLWljb24tY2hldnJvbi1kb3duXCIpO1xuICAgICAgICAgICAgaWNvbkVsZW1lbnQuYWRkQ2xhc3MoXCJndWktaWNvbi1jaGV2cm9uLXVwXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWxlbWVudC5wYXJlbnRzKFwiLmZhY2V0LWl0ZW1cIikuZmluZChcIi5mYWNldC1pdGVtLWRlc2NyaXB0aW9uXCIpLnNsaWRlVXAoMjAwKTtcbiAgICAgICAgICAgIGljb25FbGVtZW50LnJlbW92ZUNsYXNzKFwiZ3VpLWljb24tY2hldnJvbi11cFwiKTtcbiAgICAgICAgICAgIGljb25FbGVtZW50LmFkZENsYXNzKFwiZ3VpLWljb24tY2hldnJvbi1kb3duXCIpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXI/P3JlZi0tMSEuL3NyYy90cy9ldmVudGhhbmRsZXJzL0V4cGFuZENvbGxhcHNlRmFjZXRzSGFuZGxlci50cyIsImltcG9ydCB7IEZhY2V0Q29uZmlnU3RvcmUgfSBmcm9tIFwiLi4vY29uZmlnL0ZhY2V0Q29uZmlnU3RvcmVcIjtcbmltcG9ydCB7IEZpbHRlckFjdGlvblR5cGUgfSBmcm9tIFwiLi4vbW9kZWxzL0ZpbHRlckFjdGlvblR5cGVcIjtcbmltcG9ydCB7IElFdmVudEhhbmRsZXIgfSBmcm9tIFwiLi9JRXZlbnRIYW5kbGVyXCI7XG5cbmV4cG9ydCBjbGFzcyBGYWNldEFjdGlvbkhhbmRsZXIgaW1wbGVtZW50cyBJRXZlbnRIYW5kbGVyIHtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudDogSlF1ZXJ5LCBwcml2YXRlIGNvbmZpZ1N0b3JlOiBGYWNldENvbmZpZ1N0b3JlKSB7fVxuXG4gICAgcHVibGljIFJlZ2lzdGVyRG9tSGFuZGxlcigpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5lbGVtZW50Lm9uKFwiY2hhbmdlXCIsIFwiLmZhY2V0LWJvZHkgLmZhY2V0LWl0ZW0tZGVzY3JpcHRpb24gLmZhY2V0LXZhbHVlLWNoZWNrYm94XCIsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGpRdWVyeShldmVudC50YXJnZXQpO1xuICAgICAgICAgICAgY29uc3QgdmFsU3RyID0gZWxlbWVudC52YWwoKS50b1N0cmluZygpO1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB2YWxTdHIuc3BsaXQoXCI6XCIpO1xuICAgICAgICAgICAgY29uc3QgY2hlY2tlZCA9IGVsZW1lbnQuaXMoXCI6Y2hlY2tlZFwiKTtcbiAgICAgICAgICAgIGNvbnN0IGFjdGlvbiA9IGNoZWNrZWQgPyBGaWx0ZXJBY3Rpb25UeXBlLkFkZCA6IEZpbHRlckFjdGlvblR5cGUuTWludXM7XG4gICAgICAgICAgICB0aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMub25GaWx0ZXJDaGFuZ2UodmFsdWVbMF0sIHZhbHVlWzFdLCBhY3Rpb24sIHZhbHVlWzJdKTtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcHVibGljIG9uUmVzaXplKCk6IHZvaWQge1xuICAgICAgICAvLyB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcbiAgICB9XG4gICAgcHVibGljIG9uRG9jdW1lbnRDbGljayhldmVudDogYW55KTogdm9pZCB7XG4gICAgICAgIC8vIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xuICAgIH1cblxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXI/P3JlZi0tMSEuL3NyYy90cy9ldmVudGhhbmRsZXJzL0ZhY2V0QWN0aW9uSGFuZGxlci50cyIsImltcG9ydCB7IEZhY2V0Q29uZmlnU3RvcmUgfSBmcm9tIFwiLi8uLi9jb25maWcvRmFjZXRDb25maWdTdG9yZVwiO1xyXG5pbXBvcnQgeyBJRXZlbnRIYW5kbGVyIH0gZnJvbSBcIi4vSUV2ZW50SGFuZGxlclwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEZhY2V0U2VhcmNoSGFuZGxlciBpbXBsZW1lbnRzIElFdmVudEhhbmRsZXIge1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50OiBKUXVlcnksIHByaXZhdGUgY29uZmlnU3RvcmU6IEZhY2V0Q29uZmlnU3RvcmUpIHt9XHJcblxyXG4gICAgcHVibGljIFJlZ2lzdGVyRG9tSGFuZGxlcigpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnQub24oXCJrZXl1cFwiLCBcIi5maWx0ZXItc2VhcmNoLWlucHV0XCIsIChldmVudCk6IHZvaWQgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0galF1ZXJ5KGV2ZW50LnRhcmdldCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbCA9IGVsZW1lbnQudmFsKCkudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuZmluZChcIi5mYWNldC1saXN0IC5mYWNldC1pdGVtXCIpLmVhY2goKGk6IG51bWJlciwgZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGpRdWVyeShlKS5hdHRyKFwiZGF0YS1hdHRyLW5hbWVcIikudG9Mb3dlckNhc2UoKS5pbmRleE9mKHZhbCkgPT09IC0xICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGpRdWVyeShlKS5mYWRlT3V0KHRoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5hbmltYXRpb25UaW1lKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5KGUpLmZhZGVJbih0aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMuYW5pbWF0aW9uVGltZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgIH0pO1xyXG5cclxuICAgIH1cclxuICAgIHB1YmxpYyBvblJlc2l6ZSgpOiB2b2lkIHtcclxuICAgICAgICAvLyBJZ25vcmVcclxuICAgIH1cclxuICAgIHB1YmxpYyBvbkRvY3VtZW50Q2xpY2soZXZlbnQ6IGFueSk6IHZvaWQge1xyXG4gICAgICAgIC8vIElnbm9yZVxyXG4gICAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy90c2xpbnQtbG9hZGVyPz9yZWYtLTEhLi9zcmMvdHMvZXZlbnRoYW5kbGVycy9GYWNldFNlYXJjaEhhbmRsZXIudHMiLCJpbXBvcnQgeyBGaWx0ZXJDb25maWdTdG9yZSB9IGZyb20gXCIuLi9jb25maWcvRmlsdGVyQ29uZmlnU3RvcmVcIjtcclxuaW1wb3J0IHsgRmlsdGVyQWN0aW9uVHlwZSB9IGZyb20gXCIuLi9tb2RlbHMvRmlsdGVyQWN0aW9uVHlwZVwiO1xyXG5pbXBvcnQgeyBJRXZlbnRIYW5kbGVyIH0gZnJvbSBcIi4vSUV2ZW50SGFuZGxlclwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEZpbHRlckFjdGlvbkhhbmRsZXIgaW1wbGVtZW50cyBJRXZlbnRIYW5kbGVyIHtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGZpbHRlckVsZW1lbnQ6IEpRdWVyeSwgcHJpdmF0ZSBjb25maWdTdG9yZTogRmlsdGVyQ29uZmlnU3RvcmUpIHt9XHJcblxyXG4gICAgcHVibGljIFJlZ2lzdGVyRG9tSGFuZGxlcigpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmZpbHRlckVsZW1lbnQub24oXCJjbGlja1wiLCBcIi5mYWNldC1zdWJoZWFkZXIgLmZhY2V0LWxhYmVscyAubGFiZWxcIiwgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBlbGVtZW50ID0galF1ZXJ5KGV2ZW50LnRhcmdldCk7XHJcbiAgICAgICAgICAgIGlmICghZWxlbWVudC5pcyhcIi5sYWJlbFwiKSkge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50cyhcIi5sYWJlbFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCB2YWxTdHIgPSBlbGVtZW50LmF0dHIoXCJkYXRhLWZpbHRlci1lbnRyeVwiKS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHZhbFN0ci5zcGxpdChcIjpcIik7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5vbkZpbHRlckNoYW5nZSh2YWx1ZVswXSwgdmFsdWVbMV0sIEZpbHRlckFjdGlvblR5cGUuTWludXMsIHZhbHVlWzJdKTtcclxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJFbGVtZW50Lm9uKFwiY2xpY2tcIiwgXCIuZmFjZXQtc3ViaGVhZGVyIC5yZW1vdmUtYWxsXCIsIChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMub25BbGxGaWx0ZXJSZW1vdmUoKTtcclxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgb25SZXNpemUoKTogdm9pZCB7XHJcbiAgICAgICAgLy8gdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgb25Eb2N1bWVudENsaWNrKGV2ZW50OiBhbnkpOiB2b2lkIHtcclxuICAgICAgICAvLyB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcclxuICAgIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXI/P3JlZi0tMSEuL3NyYy90cy9ldmVudGhhbmRsZXJzL0ZpbHRlckFjdGlvbkhhbmRsZXIudHMiLCJpbXBvcnQgeyBGYWNldENvbmZpZ1N0b3JlIH0gZnJvbSBcIi4uL2NvbmZpZy9GYWNldENvbmZpZ1N0b3JlXCI7XHJcbmltcG9ydCB7IElFdmVudEhhbmRsZXIgfSBmcm9tIFwiLi9JRXZlbnRIYW5kbGVyXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgSGlkZUZhY2V0U2VjdGlvbkhhbmRsZXIgaW1wbGVtZW50cyBJRXZlbnRIYW5kbGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudDogSlF1ZXJ5LCBwcml2YXRlIGNvbmZpZ1N0b3JlOiBGYWNldENvbmZpZ1N0b3JlKSB7fVxyXG5cclxuICAgIHB1YmxpYyBSZWdpc3RlckRvbUhhbmRsZXIgPSAoKTogdm9pZCA9PiB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50Lm9uKFwiY2xpY2tcIiwgXCIuaGlkZS1mYWNldFwiLCAoZXZlbnQpOiB2b2lkID0+IHtcclxuICAgICAgICAgICAgJChcIi5mYWNldC1ib2R5XCIpLmhpZGUoKTtcclxuICAgICAgICAgICAgJChcIi5mYWNldC1jb2xsYXBzZWQtYm9keVwiKS5mYWRlSW4odGhpcy5jb25maWdTdG9yZS5PcHRpb25zLmFuaW1hdGlvblRpbWUpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMuY29sbGFwc2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50Lm9uKFwiY2xpY2tcIiwgXCIuc2hvdy1mYWNldFwiLCAoZXZlbnQpOiB2b2lkID0+IHtcclxuICAgICAgICAgICAgJChcIi5mYWNldC1jb2xsYXBzZWQtYm9keVwiKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICQoXCIuZmFjZXQtYm9keVwiKS5mYWRlSW4odGhpcy5jb25maWdTdG9yZS5PcHRpb25zLmFuaW1hdGlvblRpbWUpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMuY29sbGFwc2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcHVibGljIG9uUmVzaXplKCk6IHZvaWQge1xyXG4gICAgICAgIC8vIElnbm9yZVxyXG4gICAgfVxyXG4gICAgcHVibGljIG9uRG9jdW1lbnRDbGljayhldmVudDogYW55KTogdm9pZCB7XHJcbiAgICAgICAgLy8gSWdub3JlXHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXI/P3JlZi0tMSEuL3NyYy90cy9ldmVudGhhbmRsZXJzL0hpZGVGYWNldFNlY3Rpb25IYW5kbGVyLnRzIiwiaW1wb3J0IHsgSUZpbHRlck9wdGlvbnMgfSBmcm9tIFwiLi4vY29uZmlnL0lGaWx0ZXJPcHRpb25zXCI7XHJcbmltcG9ydCB7IElGYWNldCB9IGZyb20gXCIuLi9tb2RlbHMvSUZhY2V0XCI7XHJcbmltcG9ydCB7IEZpbHRlclRlbXBsYXRlU2VydmljZSB9IGZyb20gXCIuLi9zZXJ2aWNlcy9GaWx0ZXJUZW1wbGF0ZVNlcnZpY2VcIjtcclxuaW1wb3J0IHsgSUZpbHRlclRlbXBsYXRlU2VydmljZSB9IGZyb20gXCIuLi9zZXJ2aWNlcy9JRmlsdGVyVGVtcGxhdGVTZXJ2aWNlXCI7XHJcbmltcG9ydCB7IEZpbHRlckNvbmZpZ1N0b3JlIH0gZnJvbSBcIi4vLi4vY29uZmlnL0ZpbHRlckNvbmZpZ1N0b3JlXCI7XHJcbmltcG9ydCB7IEZpbHRlckFjdGlvbkhhbmRsZXIsIElFdmVudEhhbmRsZXIgfSBmcm9tIFwiLi8uLi9ldmVudGhhbmRsZXJzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgRmlsdGVyIHtcclxuICAgIHByaXZhdGUgY29uZmlnU3RvcmU6IEZpbHRlckNvbmZpZ1N0b3JlO1xyXG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZVNlcnZpY2U6IElGaWx0ZXJUZW1wbGF0ZVNlcnZpY2U7XHJcbiAgICBwcml2YXRlIGZpbHRlckVsZW1lbnQ6IEpRdWVyeTtcclxuICAgIHByaXZhdGUgaGFuZGxlckNoYWluOiBJRXZlbnRIYW5kbGVyW10gPSBbXTtcclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IElGaWx0ZXJPcHRpb25zKSB7XHJcbiAgICAgICAgdGhpcy5jb25maWdTdG9yZSA9ICBuZXcgRmlsdGVyQ29uZmlnU3RvcmUob3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJFbGVtZW50ID0galF1ZXJ5KG9wdGlvbnMuY29udGFpbmVyRWxlbWVudCk7XHJcbiAgICAgICAgdGhpcy50ZW1wbGF0ZVNlcnZpY2UgPSBuZXcgRmlsdGVyVGVtcGxhdGVTZXJ2aWNlKCk7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyQ2hhaW4ucHVzaChuZXcgRmlsdGVyQWN0aW9uSGFuZGxlcih0aGlzLmZpbHRlckVsZW1lbnQsIHRoaXMuY29uZmlnU3RvcmUpKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXJDaGFpbi5mb3JFYWNoKChoYW5kbGVyKSA9PiB7XHJcbiAgICAgICAgICAgIGhhbmRsZXIuUmVnaXN0ZXJEb21IYW5kbGVyKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgYmluZCA9ICAoZmlsdGVyczogSUZhY2V0W10pOiB2b2lkID0+IHtcclxuICAgICAgICBjb25zdCBmYWNldFN1YkhlYWRlciA9IHRoaXMudGVtcGxhdGVTZXJ2aWNlLmJpbmQoZmlsdGVycyk7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJFbGVtZW50Lmh0bWwoZmFjZXRTdWJIZWFkZXIpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGRlc3Ryb3kgPSAgKCk6IHZvaWQgPT4ge1xyXG4gICAgICAgIGlmICggdGhpcy5maWx0ZXJFbGVtZW50ICE9PSB1bmRlZmluZWQgKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyRWxlbWVudC5vZmYoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXI/P3JlZi0tMSEuL3NyYy90cy9tYWluL0ZpbHRlci50cyIsImltcG9ydCAqIGFzIEhhbmRsZWJhcnMgZnJvbSBcImhhbmRsZWJhcnNcIjtcclxuaW1wb3J0IHsgSUZhY2V0IH0gZnJvbSBcIi4uL21vZGVscy9JRmFjZXRcIjtcclxuaW1wb3J0ICogYXMgRmFjZXRTdWJIZWFkZXIgZnJvbSBcIi4vLi4vLi4vaGJzL2ZhY2V0LWFwcGxpZWQtZmlsdGVycy5oYnNcIjtcclxuaW1wb3J0IHsgSUZpbHRlclRlbXBsYXRlU2VydmljZSB9IGZyb20gXCIuL0lGaWx0ZXJUZW1wbGF0ZVNlcnZpY2VcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBGaWx0ZXJUZW1wbGF0ZVNlcnZpY2UgaW1wbGVtZW50cyBJRmlsdGVyVGVtcGxhdGVTZXJ2aWNlIHtcclxuICAgIHByaXZhdGUgdGVtcGF0ZUZ1bmN0aW9uRm9yRmFjZXRNYWluOiBhbnk7XHJcbiAgICBwcml2YXRlIHRlbXBhdGVGdW5jdGlvbkZvckZhY2V0SGVhZGVyOiBhbnk7XHJcbiAgICBwcml2YXRlIHRlbXBhdGVGdW5jdGlvbkZvckZhY2V0U3ViSGVhZGVyOiBhbnk7XHJcbiAgICBwcml2YXRlIHRlbXBhdGVGdW5jdGlvbkZvckZhY2V0Qm9keTogYW55O1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy50ZW1wYXRlRnVuY3Rpb25Gb3JGYWNldFN1YkhlYWRlciA9IEZhY2V0U3ViSGVhZGVyO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGJpbmQoZmlsdGVyczogSUZhY2V0W10pOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRlbXBhdGVGdW5jdGlvbkZvckZhY2V0U3ViSGVhZGVyKHtmaWx0ZXJzfSk7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXI/P3JlZi0tMSEuL3NyYy90cy9zZXJ2aWNlcy9GaWx0ZXJUZW1wbGF0ZVNlcnZpY2UudHMiLCJ2YXIgSGFuZGxlYmFycyA9IHJlcXVpcmUoXCJoYW5kbGViYXJzXCIpO1xuZnVuY3Rpb24gX19kZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIChvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmopOyB9XG5tb2R1bGUuZXhwb3J0cyA9IChIYW5kbGViYXJzW1wiZGVmYXVsdFwiXSB8fCBIYW5kbGViYXJzKS50ZW1wbGF0ZSh7XCIxXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEsYmxvY2tQYXJhbXMsZGVwdGhzKSB7XG4gICAgdmFyIHN0YWNrMTtcblxuICByZXR1cm4gXCI8ZGl2IGNsYXNzPVxcXCJjb250ZW50IGZhY2V0LXN1YmhlYWRlciBndWkgZmx1aWQtdyBiYXNpYyBjdXJ2ZWQgcC01XFxcIj5cXG4gICAgPHNwYW4gY2xhc3M9XFxcImd1aSBib2xkIGd1aS1zdWJoZWFkaW5nLTIgY2Fwc1xcXCI+QXBwbGllZCBGaWx0ZXJzPC9zcGFuPlxcbiAgICA8YSBjbGFzcz1cXFwiZ3VpIG0tbC01IHJlbW92ZS1hbGxcXFwiID5cXG4gICAgICAgIDxpIGNsYXNzPVxcXCJndWktaWNvbiBndWktaWNvbi1jYW5jZWxcXFwiPjwvaT5cXG4gICAgICAgIDxzcGFuPkNsZWFyIEFsbDwvc3Bhbj5cXG4gICAgPC9hPlxcbiAgICA8c3BhbiBjbGFzcz1cXFwiZ3VpIG0tbC0xMFxcXCI+XFxuXCJcbiAgICArICgoc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuZmlsdGVycyA6IGRlcHRoMCkse1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgyLCBkYXRhLCAwLCBibG9ja1BhcmFtcywgZGVwdGhzKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCIgICAgPC9zcGFuPlxcbjwvZGl2PlxcblwiO1xufSxcIjJcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSxibG9ja1BhcmFtcyxkZXB0aHMpIHtcbiAgICB2YXIgc3RhY2sxLCBoZWxwZXIsIGFsaWFzMT1kZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pO1xuXG4gIHJldHVybiBcIiAgICAgICAgPHNwYW4gY2xhc3M9XFxcImd1aSBtLXItNVxcXCI+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImd1aSBsYXJnZSBsYWJlbHMgZmFjZXQtbGFiZWxzXFxcIj5cXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImd1aSBndWktc3ViaGVhZGluZy0yXFxcIj5cIlxuICAgICsgY29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5uYW1lIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlcnMuaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IFwiZnVuY3Rpb25cIiA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJuYW1lXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIjwvc3Bhbj5cXG5cIlxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzLmVhY2guY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmZhY2V0VmFsdWVzIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDMsIGRhdGEsIDAsIGJsb2NrUGFyYW1zLCBkZXB0aHMpLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIiAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgIDwvc3Bhbj5cXG5cIjtcbn0sXCIzXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEsYmxvY2tQYXJhbXMsZGVwdGhzKSB7XG4gICAgdmFyIGhlbHBlciwgYWxpYXMxPWNvbnRhaW5lci5sYW1iZGEsIGFsaWFzMj1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbjtcblxuICByZXR1cm4gXCIgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImd1aSBtLTAgbS10LTIgbS1yLTIgcC00IGxhYmVsIGN1cnNvci1wb2ludGVyIHN0cmlrZXRocm91Z2gtaG92ZXJcXFwiIGRhdGEtZmlsdGVyLWVudHJ5PVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGhzWzFdICE9IG51bGwgPyBkZXB0aHNbMV0uaWQgOiBkZXB0aHNbMV0pLCBkZXB0aDApKVxuICAgICsgXCI6XCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmxhYmVsIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiOlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aHNbMV0gIT0gbnVsbCA/IGRlcHRoc1sxXS50eXBlIDogZGVwdGhzWzFdKSwgZGVwdGgwKSlcbiAgICArIFwiXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIFwiXG4gICAgKyBhbGlhczIoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5sYWJlbCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGFiZWwgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVycy5oZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gXCJmdW5jdGlvblwiID8gaGVscGVyLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSx7XCJuYW1lXCI6XCJsYWJlbFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCJcXG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJndWktaWNvbiBndWktaWNvbi1jYW5jZWxcXFwiPjwvaT5cXG4gICAgICAgICAgICAgICAgPC9zcGFuPlxcblwiO1xufSxcImNvbXBpbGVyXCI6WzcsXCI+PSA0LjAuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSxibG9ja1BhcmFtcyxkZXB0aHMpIHtcbiAgICB2YXIgc3RhY2sxO1xuXG4gIHJldHVybiAoKHN0YWNrMSA9IGhlbHBlcnNbXCJpZlwiXS5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuZmlsdGVycyA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEubGVuZ3RoIDogc3RhY2sxKSx7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgxLCBkYXRhLCAwLCBibG9ja1BhcmFtcywgZGVwdGhzKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKTtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZSxcInVzZURlcHRoc1wiOnRydWV9KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9oYnMvZmFjZXQtYXBwbGllZC1maWx0ZXJzLmhic1xuLy8gbW9kdWxlIGlkID0gMjBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCJpbXBvcnQgeyBGaWx0ZXJBY3Rpb25UeXBlIH0gZnJvbSBcIi4uL21vZGVscy9GaWx0ZXJBY3Rpb25UeXBlXCI7XHJcbmltcG9ydCB7IElGaWx0ZXJPcHRpb25zIH0gZnJvbSBcIi4vSUZpbHRlck9wdGlvbnNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBGaWx0ZXJDb25maWdTdG9yZSB7XHJcbiAgICBwcml2YXRlIG9wdGlvbnM6IElGaWx0ZXJPcHRpb25zO1xyXG4gICAgcHJpdmF0ZSBkZWZhdWx0ZmlsdGVyT3B0aW9uczogSUZpbHRlck9wdGlvbnMgPSB7XHJcbiAgICAgICAgYW5pbWF0aW9uVGltZTogMjAwLFxyXG4gICAgICAgIGNvbnRhaW5lckVsZW1lbnQ6IG51bGwsXHJcbiAgICAgICAgb25BbGxGaWx0ZXJSZW1vdmU6ICgpID0+IHtcclxuICAgICAgICAvLyBJZ25vcmVcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uRmlsdGVyQ2hhbmdlOiAoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIGFjdGlvbjogRmlsdGVyQWN0aW9uVHlwZSk6IHZvaWQgPT4ge1xyXG4gICAgICAgIC8vIElnbm9yZVxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogSUZpbHRlck9wdGlvbnMpIHtcclxuICAgICAgICB0aGlzLmV4dGVuZE9wdGlvbnMob3B0aW9ucyk7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMuY29udGFpbmVyRWxlbWVudCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQbGVhc2UgUHJvdmlkZSBhIHZhbGlkIGNvbnRhaW5lciBFbGVtZW50IG9iamVjdCBmb3IgZmlsdGVyc1wiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZ2V0IE9wdGlvbnMoKTogSUZpbHRlck9wdGlvbnMge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnM7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGV4dGVuZE9wdGlvbnMgPSAoaW5wdXRPcHRpb25zOiBJRmlsdGVyT3B0aW9ucyk6IElGaWx0ZXJPcHRpb25zID0+IHtcclxuICAgICAgICByZXR1cm4gKHRoaXMub3B0aW9ucyA9IGpRdWVyeS5leHRlbmQoe30sIHRoaXMuZGVmYXVsdGZpbHRlck9wdGlvbnMsIGlucHV0T3B0aW9ucykpO1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy90c2xpbnQtbG9hZGVyPz9yZWYtLTEhLi9zcmMvdHMvY29uZmlnL0ZpbHRlckNvbmZpZ1N0b3JlLnRzIl0sInNvdXJjZVJvb3QiOiIifQ==