!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n(require("handlebars/runtime"),require("moment")):"function"==typeof define&&define.amd?define(["handlebars.runtime","moment"],n):"object"==typeof exports?exports.Facetoo=n(require("handlebars/runtime"),require("moment")):e.Facetoo=n(e.Handlebars,e.moment)}("undefined"!=typeof self?self:this,function(e,n){return function(e){function n(i){if(t[i])return t[i].exports;var a=t[i]={i:i,l:!1,exports:{}};return e[i].call(a.exports,a,a.exports,n),a.l=!0,a.exports}var t={};return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},n.p="",n(n.s=11)}([function(n,t){n.exports=e},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(e){return e?"checked":""};n.default=i},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(e){return e?"disabled":""};n.default=i},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});!function(e){e[e.Show=0]="Show",e[e.Hide=1]="Hide",e[e.Toggle=2]="Toggle"}(n.ShowHide||(n.ShowHide={}))},function(e,n,t){var i=t(0);e.exports=(i.default||i).template({compiler:[7,">= 4.0.0"],main:function(e,n,i,a,o){var l;return'<div class="gui of-hidden min-w-50 w-auto fluid-h flex column container">\n    <div class="gui h-auto flex m-t-12">\n        <button class="gui cursor-pointer gui-subheading-1 m-0 expand-all">\n            <i class="gui-icon special rotate-right gui-icon-chevdouble"></i>\n            Expand All\n        </button>\n        <div class="gui m-r-5 m-l-5"></div>\n        <button class="gui cursor-pointer gui-subheading-1 m-0 collapse-all">\n            <i class="gui-icon special rotate-right gui-icon-chevdouble"></i>\n            Collapse All\n        </button>\n    </div>\n    <div class="gui input fluid-w p-t-5 p-r-5 p-b-5 p-l-1 m-t-10">\n        <input class="gui input p-5 h-30 fluid-w gui-subheading-2 filter-search-input" placeholder="Search Filters" />\n    </div>\n    <div class="gui fluid-h facet-list of-auto ofx-hidden m-t-10">\n        '+(null!=(l=e.invokePartial(t(16),n,{name:"facet-pinned",data:o,helpers:i,partials:a,decorators:e.decorators}))?l:"")+" "+(null!=(l=e.invokePartial(t(17),n,{name:"facet-unpinned",data:o,helpers:i,partials:a,decorators:e.decorators}))?l:"")+"\n    </div>\n\n</div>"},usePartial:!0,useData:!0})},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(e){var n=0;if(void 0!==e&&null!==e&&e.length>0)for(var t=0,i=e;t<i.length;t++){var a=i[t];a.selected&&n++}return 0===n?"":'<span class="gui-body-2">('+n+")</span>"};n.default=i},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(e,n,t){return e.length>n?'<a tabindex="0" class="gui simple show-more-link cursor-pointer p-0 m-t-3">Show '+(e.length-n)+' More </a><a tabindex="0" class="gui simple show-less-link cursor-pointer gui-hidden p-0 m-t-3">Show Less</a>':""};n.default=i},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(e,n){return void 0!==e&&e+1>n?"gui-hidden extra-filter":""};n.default=i},function(e,n,t){"use strict";function i(e){for(var t in e)n.hasOwnProperty(t)||(n[t]=e[t])}Object.defineProperty(n,"__esModule",{value:!0}),i(t(21)),i(t(22)),i(t(23)),i(t(24)),i(t(25)),i(t(26)),i(t(27))},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=t(3),a=function(){function e(){}return e.ControlVisibilityOfFilter=function(e,n){var t=e.children("span").children(".expansion-icon"),a=t.hasClass("gui-icon-chevron-up");i.ShowHide.Toggle!==n&&(a&&n===i.ShowHide.Show||!a&&n===i.ShowHide.Hide)||(a?(e.parents(".facet-item").find(".facet-item-description").slideUp(200),t.removeClass("gui-icon-chevron-up"),t.addClass("gui-icon-chevron-down")):(e.parents(".facet-item").find(".facet-item-description").slideDown(200),t.removeClass("gui-icon-chevron-down"),t.addClass("gui-icon-chevron-up")))},e}();n.ExpandCollapseManager=a},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});!function(e){e.Add="Add",e.Minus="Minus"}(n.FilterActionType||(n.FilterActionType={}))},function(e,n,t){"use strict";function i(e){for(var t in e)n.hasOwnProperty(t)||(n[t]=e[t])}Object.defineProperty(n,"__esModule",{value:!0}),i(t(12)),i(t(28))},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=t(13),a=t(14),o=t(20),l=t(8),r=function(){function e(e){var n=this;this.handlerChain=[],this.bind=function(e){n.templateService.setData(e);var t=n.templateService.bind(e);n.facetElement.html(t)},this.hide=function(){n.facetElement.find(".facet-body").fadeOut(n.configStore.Options.animationTime),n.configStore.Options.collapsed=!0},this.show=function(){n.facetElement.find(".facet-body").fadeIn(n.configStore.Options.animationTime),n.configStore.Options.collapsed=!1},this.destroy=function(){void 0!==n.facetElement&&n.facetElement.off(),n.handlerChain.forEach(function(e){void 0!==e&&void 0!==e.deregister&&e.deregister()})},this.configStore=new o.FacetConfigStore(e),this.facetElement=jQuery(e.containerElement),this.templateService=new a.FacetTemplateService(this.configStore),this.handlerChain.push(new l.ExpandCollapseFacetsHandler(this.facetElement,this.configStore,this.templateService)),this.handlerChain.push(new l.FacetActionHandler(this.facetElement,this.configStore)),this.handlerChain.push(new l.FacetSearchHandler(this.facetElement,this.configStore)),this.handlerChain.push(new l.HideFacetSectionHandler(this.facetElement,this.configStore)),this.handlerChain.push(new i.HotKeysFacetHandler),this.handlerChain.push(new l.PinUnpinEventHandler(this.facetElement,this.configStore,this.templateService)),this.handlerChain.push(new l.ShowMoreLessHandler(this.facetElement,this.configStore)),this.handlerChain.forEach(function(e){e.RegisterDomHandler()})}return e}();n.Facet=r},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(){var e=this;this.RegisterDomHandler=function(){jQuery(document).on("keydown",e.focusOnSearch)},this.onResize=function(){throw new Error("Method not implemented.")},this.onDocumentClick=function(e){},this.deRegister=function(){jQuery(document).off("keydown",e.focusOnSearch)},this.focusOnSearch=function(e){e.altKey&&"f"===e.key&&(e.preventDefault(),jQuery(".filter-search-input").focus())}}return e}();n.HotKeysFacetHandler=i},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=t(15),a=function(){function e(e){var n=this;this.configStore=e,this.setData=function(e){n.data=e},this.getData=function(){return n.data},this.compareFn=function(e,n){return void 0===e.order?-1:void 0===n.order?1:e.order-n.order},this.mergeWithFacetConfig=function(e){for(var t=[],i=0,a=e;i<a.length;i++)for(var o=a[i],l=0,r=n.configStore.Options.facetConfig;l<r.length;l++){var s=r[l];if(s.id===o.id){t.push({collapsed:s.collapsed,facetRange:o.facetRange,facetValues:o.facetValues,id:s.id,name:s.name,order:s.order,pinned:s.pinned,type:s.type});break}}return t},this.tempateFunctionForFacetMain=i}return e.prototype.bind=function(e){var n=(this.configStore.Options.collapsed,this.mergeWithFacetConfig(e)),t=n.filter(function(e){return void 0!==e.pinned&&e.pinned}),i=n.filter(function(e){return void 0===e.pinned||!e.pinned});t.sort(this.compareFn),i.sort(this.compareFn);var a=this.configStore.Options.noOfFacetToShow;return this.tempateFunctionForFacetMain({favorites:t,nonFavorites:i,noOfFacetToShow:a})},e}();n.FacetTemplateService=a},function(e,n,t){var i=t(0);e.exports=(i.default||i).template({1:function(e,n,i,a,o){var l;return'    <div class="facet-body gui fluid-h of-hidden gui-hidden">'+(null!=(l=e.invokePartial(t(4),n,{name:"facet-body",data:o,helpers:i,partials:a,decorators:e.decorators}))?l:"")+"</div>\n"},3:function(e,n,i,a,o){var l;return'    <div class="facet-body gui fluid-h of-hidden">'+(null!=(l=e.invokePartial(t(4),n,{name:"facet-body",data:o,helpers:i,partials:a,decorators:e.decorators}))?l:"")+"</div>\n"},compiler:[7,">= 4.0.0"],main:function(e,n,t,i,a){var o;return'<div class="gui fluid-h ">\n'+(null!=(o=t.if.call(null!=n?n:e.nullContext||{},null!=n?n.collapsed:n,{name:"if",hash:{},fn:e.program(1,a,0),inverse:e.program(3,a,0),data:a}))?o:"")+"</div>"},usePartial:!0,useData:!0})},function(e,n,t){function i(e){return e&&(e.__esModule?e.default:e)}var a=t(0);e.exports=(a.default||a).template({1:function(e,n,t,i,a,o,l){var r;return" "+(null!=(r=t.each.call(null!=n?n:e.nullContext||{},null!=n?n.favorites:n,{name:"each",hash:{},fn:e.program(2,a,0,o,l),inverse:e.noop,data:a}))?r:"")},2:function(e,n,a,o,l,r,s){var c,u=e.lambda,d=e.escapeExpression,f=null!=n?n:e.nullContext||{};return'\r\n<div class="item facet-item collapsed gui m-t-6" data-attr-name="'+d(u(null!=n?n.name:n,n))+'">\r\n    <div class="content">\r\n        <div class="facet-item-header fluid gui item flex jc-sb">\r\n            <span class="gui gui-subheading-1 primary m-0 expansion-icon cursor-pointer" tabindex="0">\r\n                '+d(u(null!=n?n.name:n,n))+" "+(null!=(c=i(t(5)).call(f,null!=n?n.facetValues:n,{name:"SelectedFiltersCount",hash:{},data:l}))?c:"")+'\r\n            </span>\r\n            <span>\r\n                <i data-attr-id="'+d(u(null!=n?n.id:n,n))+'" class="gui gui-icon selectable primary gui-icon-unpin m-t-5 m-r-10 unpin-icon cursor-pointer" tabindex="0"></i>\r\n                <i class="gui gui-icon selectable gui-icon-chevron-up primary expansion-icon m-t-5 m-r-10 cursor-pointer" tabindex="0"></i>\r\n            </span>\r\n        </div>\r\n        <div class="clear"></div>\r\n        <div class="description gui facet-item-description m-t-2 m-l-5">\r\n            <div class="gui fluid-w m-0 p-0">\r\n'+(null!=(c=a.each.call(f,null!=n?n.facetValues:n,{name:"each",hash:{},fn:e.program(3,l,0,r,s),inverse:e.noop,data:l}))?c:"")+"                "+(null!=(c=i(t(6)).call(f,null!=n?n.facetValues:n,null!=s[1]?s[1].noOfFacetToShow:s[1],{name:"ShowMoreLessLink",hash:{},data:l}))?c:"")+"\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n"},3:function(e,n,a,o,l,r,s){var c,u=null!=n?n:e.nullContext||{};return'                <div class="gui item '+e.escapeExpression(i(t(7)).call(u,l&&l.index,null!=s[2]?s[2].noOfFacetToShow:s[2],{name:"CheckLength",hash:{},data:l}))+'">\r\n'+(null!=(c=a.if.call(u,null!=n?n.selected:n,{name:"if",hash:{},fn:e.program(4,l,0,r,s),inverse:e.program(6,l,0,r,s),data:l}))?c:"")+"                </div>\r\n"},4:function(e,n,a,o,l,r,s){var c=e.lambda,u=e.escapeExpression,d=null!=n?n:e.nullContext||{};return'                    <label data-attr-value="'+u(c(null!=n?n.label:n,n))+'" title="'+u(c(null!=n?n.label:n,n))+"("+u(c(null!=n?n.count:n,n))+')" class="gui cursor-pointer no-wrap primary text-shorten m-0">\r\n                        <input class="gui facet-value-checkbox cursor-pointer m-l-0" id="'+u(c(null!=n?n.label:n,n))+"-"+u(c(l&&l.index,n))+'" '+u(i(t(1)).call(d,null!=n?n.selected:n,{name:"Checked",hash:{},data:l}))+" "+u(i(t(2)).call(d,null!=n?n.disabled:n,{name:"Disabled",hash:{},data:l}))+'\r\n                            value="'+u(c(null!=s[1]?s[1].id:s[1],n))+":"+u(c(null!=n?n.label:n,n))+":"+u(c(null!=s[1]?s[1].type:s[1],n))+'" type="checkbox" /> '+u(c(null!=n?n.label:n,n))+'\r\n                        <span class="gui gui-subheading-1 m-0">('+u(c(null!=n?n.count:n,n))+")</span>\r\n                    </label>\r\n"},6:function(e,n,a,o,l,r,s){var c=e.lambda,u=e.escapeExpression,d=null!=n?n:e.nullContext||{};return'                    <label data-attr-value="'+u(c(null!=n?n.label:n,n))+'" title="'+u(c(null!=n?n.label:n,n))+"("+u(c(null!=n?n.count:n,n))+')" class="gui cursor-pointer no-wrap text-shorten m-0">\r\n                        <input class="gui facet-value-checkbox cursor-pointer m-l-0" id="'+u(c(null!=n?n.label:n,n))+"-"+u(c(l&&l.index,n))+'" '+u(i(t(1)).call(d,null!=n?n.selected:n,{name:"Checked",hash:{},data:l}))+" "+u(i(t(2)).call(d,null!=n?n.disabled:n,{name:"Disabled",hash:{},data:l}))+'\r\n                            value="'+u(c(null!=s[1]?s[1].id:s[1],n))+":"+u(c(null!=n?n.label:n,n))+":"+u(c(null!=s[1]?s[1].type:s[1],n))+'" type="checkbox" /> '+u(c(null!=n?n.label:n,n))+'\r\n                        <span class="gui gui-subheading-1 m-0">('+u(c(null!=n?n.count:n,n))+")</span>\r\n                    </label>\r\n"},8:function(e,n,t,i,a){return'<div class="gui m-t-10">\r\n    \r\n</div>\r\n'},compiler:[7,">= 4.0.0"],main:function(e,n,t,i,a,o,l){var r;return'<div class="gui m-b-5 m-t-5">\r\n    <span class="gui gui-subheading-1">\r\n        PINNED FILTERS\r\n    </span>\r\n</div>\r\n'+(null!=(r=t.if.call(null!=n?n:e.nullContext||{},null!=(r=null!=n?n.favorites:n)?r.length:r,{name:"if",hash:{},fn:e.program(1,a,0,o,l),inverse:e.program(8,a,0,o,l),data:a}))?r:"")},useData:!0,useDepths:!0})},function(e,n,t){function i(e){return e&&(e.__esModule?e.default:e)}var a=t(0);e.exports=(a.default||a).template({1:function(e,n,a,o,l,r,s){var c,u=null!=n?n:e.nullContext||{},d=e.escapeExpression,f=e.lambda;return'<div class="item facet-item gui m-t-6 '+d(i(t(18)).call(u,null!=n?n.collapsed:n,{name:"Collapsed",hash:{},data:l}))+'" data-attr-id="'+d(f(null!=n?n.id:n,n))+'" data-attr-name="'+d(f(null!=n?n.name:n,n))+'">\r\n    <div class="content">\r\n        <div class="facet-item-header fluid gui item flex jc-sb">\r\n            <span class="gui gui-subheading-1 primary m-0 expansion-icon cursor-pointer" tabindex="0">\r\n                '+d(f(null!=n?n.name:n,n))+" "+(null!=(c=i(t(5)).call(u,null!=n?n.facetValues:n,{name:"SelectedFiltersCount",hash:{},data:l}))?c:"")+'\r\n            </span>\r\n            <span>\r\n                <i data-attr-id="'+d(f(null!=n?n.id:n,n))+'" class="gui gui-icon selectable primary gui-icon-pin m-t-5 pin-icon m-r-10 cursor-pointer" tabindex="0"></i>\r\n'+(null!=(c=a.if.call(u,null!=n?n.collapsed:n,{name:"if",hash:{},fn:e.program(2,l,0,r,s),inverse:e.program(4,l,0,r,s),data:l}))?c:"")+'            </span>\r\n        </div>\r\n        <div class="clear"></div>\r\n        <div class="description gui '+d(i(t(19)).call(u,null!=n?n.collapsed:n,!0,{name:"Hidden",hash:{},data:l}))+' facet-item-description m-t-2 m-l-5">\r\n            <div class="gui fluid-w m-0 p-0">\r\n'+(null!=(c=a.each.call(u,null!=n?n.facetValues:n,{name:"each",hash:{},fn:e.program(6,l,0,r,s),inverse:e.noop,data:l}))?c:"")+"                "+(null!=(c=i(t(6)).call(u,null!=n?n.facetValues:n,null!=s[1]?s[1].noOfFacetToShow:s[1],{name:"ShowMoreLessLink",hash:{},data:l}))?c:"")+"\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n"},2:function(e,n,t,i,a){return'                    <i class="gui gui-icon selectable gui-icon-chevron-up primary expansion-icon m-t-5 m-r-10 cursor-pointer" tabindex="0"></i>\r\n'},4:function(e,n,t,i,a){return'                    <i class="gui gui-icon selectable gui-icon-chevron-down primary expansion-icon m-t-5 m-r-10 cursor-pointer" tabindex="0"></i>\r\n'},6:function(e,n,a,o,l,r,s){var c,u=null!=n?n:e.nullContext||{};return'                <div class="gui item '+e.escapeExpression(i(t(7)).call(u,l&&l.index,null!=s[2]?s[2].noOfFacetToShow:s[2],{name:"CheckLength",hash:{},data:l}))+'">\r\n'+(null!=(c=a.if.call(u,null!=n?n.selected:n,{name:"if",hash:{},fn:e.program(7,l,0,r,s),inverse:e.program(9,l,0,r,s),data:l}))?c:"")+"                </div>\r\n"},7:function(e,n,a,o,l,r,s){var c=e.lambda,u=e.escapeExpression,d=null!=n?n:e.nullContext||{};return'                    <label data-attr-value="'+u(c(null!=n?n.label:n,n))+'" title="'+u(c(null!=n?n.label:n,n))+"("+u(c(null!=n?n.count:n,n))+')" class="gui cursor-pointer no-wrap primary text-shorten m-0">\r\n                        <input class="gui facet-value-checkbox cursor-pointer m-l-0" id="'+u(c(null!=n?n.label:n,n))+"-"+u(c(l&&l.index,n))+'" '+u(i(t(1)).call(d,null!=n?n.selected:n,{name:"Checked",hash:{},data:l}))+" "+u(i(t(2)).call(d,null!=n?n.disabled:n,{name:"Disabled",hash:{},data:l}))+'\r\n                            value="'+u(c(null!=s[1]?s[1].id:s[1],n))+":"+u(c(null!=n?n.label:n,n))+":"+u(c(null!=s[1]?s[1].type:s[1],n))+'" type="checkbox" /> '+u(c(null!=n?n.label:n,n))+'\r\n                        <span class="gui gui-subheading-1 m-0">('+u(c(null!=n?n.count:n,n))+")</span>\r\n                    </label>\r\n"},9:function(e,n,a,o,l,r,s){var c=e.lambda,u=e.escapeExpression,d=null!=n?n:e.nullContext||{};return'                    <label data-attr-value="'+u(c(null!=n?n.label:n,n))+'" title="'+u(c(null!=n?n.label:n,n))+"("+u(c(null!=n?n.count:n,n))+')" class="gui cursor-pointer no-wrap text-shorten m-0">\r\n                        <input class="gui facet-value-checkbox cursor-pointer m-l-0" id="'+u(c(null!=n?n.label:n,n))+"-"+u(c(l&&l.index,n))+'" '+u(i(t(1)).call(d,null!=n?n.selected:n,{name:"Checked",hash:{},data:l}))+" "+u(i(t(2)).call(d,null!=n?n.disabled:n,{name:"Disabled",hash:{},data:l}))+'\r\n                            value="'+u(c(null!=s[1]?s[1].id:s[1],n))+":"+u(c(null!=n?n.label:n,n))+":"+u(c(null!=s[1]?s[1].type:s[1],n))+'" type="checkbox" /> '+u(c(null!=n?n.label:n,n))+'\r\n                        <span class="gui gui-subheading-1 m-0">('+u(c(null!=n?n.count:n,n))+")</span>\r\n                    </label>\r\n"},compiler:[7,">= 4.0.0"],main:function(e,n,t,i,a,o,l){var r;return'<div class="gui m-b-5 m-t-10 ">\r\n    <span class="gui gui-subheading-1">\r\n        ALL FILTERS\r\n    </span>\r\n</div>\r\n'+(null!=(r=t.each.call(null!=n?n:e.nullContext||{},null!=n?n.nonFavorites:n,{name:"each",hash:{},fn:e.program(1,a,0,o,l),inverse:e.noop,data:a}))?r:"")},useData:!0,useDepths:!0})},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(e){return e?" collapsed ":""};n.default=i},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(e,n){var t;return t=n?!e:!!e,t?" gui-hidden ":" "};n.default=i},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e){var n=this;if(this.defaultFacetOptions={animationTime:200,collapsed:!1,containerElement:null,facetConfig:[],noOfFacetToShow:5,onFilterChange:function(e,n,t){},onPinUnpin:function(e,n){}},this.extendOptions=function(e){return n.options=jQuery.extend({},n.defaultFacetOptions,e)},this.extendOptions(e),null===e.containerElement)throw new Error("Please Provide a valid container Element object")}return Object.defineProperty(e.prototype,"Options",{get:function(){return this.options},enumerable:!0,configurable:!0}),e}();n.FacetConfigStore=i},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=t(9),a=t(3),o=function(){function e(e,n,t){var o=this;this.element=e,this.configStore=n,this.templateService=t,this.handleVisibilityOfAll=function(e,n){var t=e.keyCode||e.which;if("click"===e.type||"keyup"!==e.type||13===t||32===t){o.element.find(".facet-item-header").each(function(e,t){i.ExpandCollapseManager.ControlVisibilityOfFilter(jQuery(t),n)});for(var l=n===a.ShowHide.Show,r=o.configStore.Options.facetConfig,s=0,c=r;s<c.length;s++){c[s].collapsed=l}e.stopPropagation()}},this.handleVisibilityOfOne=function(e){var n=e.keyCode||e.which;if("click"===e.type||"keyup"!==e.type||13===n||32===n){for(var t=jQuery(e.target),l=t.parents(".facet-item-header"),r=l.parents(".facet-item"),s=t.hasClass("gui-icon-chevron-up"),c=r.attr("data-attr-id"),u=o.configStore.Options.facetConfig,d=0,f=u;d<f.length;d++){var h=f[d];if(h.id===c){h.collapsed=s;break}}i.ExpandCollapseManager.ControlVisibilityOfFilter(l,a.ShowHide.Toggle),e.stopPropagation()}}}return e.prototype.RegisterDomHandler=function(){var e=this;this.element.on("click",".expand-all",function(n){e.handleVisibilityOfAll(n,a.ShowHide.Show)}),this.element.on("keyup",".expand-all",function(n){e.handleVisibilityOfAll(n,a.ShowHide.Show)}),this.element.on("click",".collapse-all",function(n){e.handleVisibilityOfAll(n,a.ShowHide.Hide)}),this.element.on("keyup",".collapse-all",function(n){e.handleVisibilityOfAll(n,a.ShowHide.Hide)}),this.element.on("click",".facet-item-header .expansion-icon",this.handleVisibilityOfOne),this.element.on("keyup",".facet-item-header .expansion-icon",this.handleVisibilityOfOne)},e.prototype.onResize=function(){},e.prototype.onDocumentClick=function(e){},e}();n.ExpandCollapseFacetsHandler=o},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=t(10),a=function(){function e(e,n){this.element=e,this.configStore=n}return e.prototype.RegisterDomHandler=function(){var e=this;this.element.on("change",".facet-body .facet-item-description .facet-value-checkbox",function(n){var t=jQuery(n.target),a=t.val().toString(),o=a.split(":"),l=t.is(":checked"),r=l?i.FilterActionType.Add:i.FilterActionType.Minus;e.configStore.Options.onFilterChange(o[0],o[1],r,o[2],!1),n.stopPropagation()})},e.prototype.onResize=function(){},e.prototype.onDocumentClick=function(e){},e}();n.FacetActionHandler=a},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=t(9),a=t(3),o=function(){function e(e,n){var t=this;this.element=e,this.configStore=n,this.handleSearch=function(e){var n=jQuery(e.target),o=n.val().toString().toLowerCase();t.element.find(".facet-list .facet-item").each(function(e,n){var l=jQuery(n),r=!1,s=!1;void 0!==o&&null!==o&&""!==o.trim()||(s=!0),s||-1===l.attr("data-attr-name").toLowerCase().indexOf(o)||(r=!0),s?(t.element.find(".show-more-link").each(function(e,n){jQuery(n).hasClass("gui-hidden")?jQuery(n).hide():jQuery(n).show()}),t.element.find(".show-less-link").each(function(e,n){jQuery(n).hasClass("gui-hidden")?jQuery(n).hide():jQuery(n).show()})):(t.element.find(".show-more-link").hide(),t.element.find(".show-less-link").hide());var c=!1;l.find("label").each(function(e,n){var t=jQuery(n);if(s?t.parent(".extra-filter").hide():t.parent(".extra-filter").show(),r||s)return void t.show();-1===t.attr("data-attr-value").toLowerCase().indexOf(o)?t.hide():(c=!0,t.show())});var u=l.find(".facet-item-header"),d=l.hasClass("collapsed");r||c||s?l.fadeIn(t.configStore.Options.animationTime):l.fadeOut(t.configStore.Options.animationTime),d||r||c?i.ExpandCollapseManager.ControlVisibilityOfFilter(u,a.ShowHide.Show):i.ExpandCollapseManager.ControlVisibilityOfFilter(u,a.ShowHide.Hide)}),e.stopPropagation()}}return e.prototype.RegisterDomHandler=function(){this.element.on("keyup",".filter-search-input",this.handleSearch)},e.prototype.onResize=function(){},e.prototype.onDocumentClick=function(e){},e}();n.FacetSearchHandler=o},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=t(10),a=function(){function e(e,n){this.filterElement=e,this.configStore=n}return e.prototype.RegisterDomHandler=function(){var e=this;this.filterElement.on("click",".facet-subheader .facet-labels .label",function(n){var t=jQuery(n.target);t.is(".label")||(t=t.parents(".label"));var a=t.attr("data-filter-entry").toString(),o=a.split(":"),l=!1;4===o.length&&(l=!0),e.configStore.Options.onFilterChange(o[0],o[1],i.FilterActionType.Minus,o[2],l),n.stopPropagation()}),this.filterElement.on("click",".facet-subheader .remove-all",function(n){e.configStore.Options.onAllFilterRemove(),n.stopPropagation()})},e.prototype.onResize=function(){},e.prototype.onDocumentClick=function(e){},e}();n.FilterActionHandler=a},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,n){var t=this;this.element=e,this.configStore=n,this.RegisterDomHandler=function(){t.element.on("click",".hide-facet",t.hideFacet),t.element.on("click",".show-facet",t.showFacet),t.element.on("keyup",".hide-facet",function(e){var n=e.keyCode||e.which;13!==n&&32!==n||t.hideFacet(e)}),t.element.on("keyup",".show-facet",function(e){var n=e.keyCode||e.which;13!==n&&32!==n||t.showFacet(e)})},this.hideFacet=function(e){$(".facet-body").hide(),$(".facet-collapsed-body").fadeIn(t.configStore.Options.animationTime),t.configStore.Options.collapsed=!0,e.stopPropagation()},this.showFacet=function(e){$(".facet-collapsed-body").hide(),$(".facet-body").fadeIn(t.configStore.Options.animationTime),t.configStore.Options.collapsed=!1,e.stopPropagation()}}return e.prototype.onResize=function(){},e.prototype.onDocumentClick=function(e){},e}();n.HideFacetSectionHandler=i},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,n,t){this.element=e,this.configStore=n,this.templateService=t}return e.prototype.RegisterDomHandler=function(){var e=this;this.element.on("click",".pin-icon",function(n){e.handlePinUnpin(n,!0)}),this.element.on("click",".unpin-icon",function(n){e.handlePinUnpin(n,!1)}),this.element.on("keyup",".pin-icon",function(n){var t=n.keyCode||n.which;13!==t&&32!==t||e.handlePinUnpin(n,!0)}),this.element.on("keyup",".unpin-icon",function(n){var t=n.keyCode||n.which;13!==t&&32!==t||e.handlePinUnpin(n,!1)})},e.prototype.onResize=function(){},e.prototype.onDocumentClick=function(e){},e.prototype.handlePinUnpin=function(e,n){for(var t=jQuery(e.target),i=t.attr("data-attr-id"),a=this.configStore.Options.facetConfig,o=0,l=a;o<l.length;o++){var r=l[o];if(r.id===i){r.pinned=n;break}}this.element.html(this.templateService.bind(this.templateService.getData())),this.configStore.Options.onPinUnpin(i,n),e.stopPropagation()},e}();n.PinUnpinEventHandler=i},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,n){this.element=e,this.configStore=n}return e.prototype.RegisterDomHandler=function(){var e=this;this.element.on("click",".show-more-link",function(n){e.showMoreLessFilters(n,!0)}),this.element.on("click",".show-less-link",function(n){e.showMoreLessFilters(n,!1)}),this.element.on("keyup",".show-more-link",function(n){var t=n.keyCode||n.which;13!==t&&32!==t||e.showMoreLessFilters(n,!0)}),this.element.on("keyup",".show-less-link",function(n){var t=n.keyCode||n.which;13!==t&&32!==t||e.showMoreLessFilters(n,!1)})},e.prototype.onResize=function(){},e.prototype.onDocumentClick=function(e){},e.prototype.showMoreLessFilters=function(e,n){var t=jQuery(e.target);n?t.parent().find(".extra-filter").fadeIn(this.configStore.Options.animationTime,function(){t.hide(),t.siblings("a").show()}):t.parent().find(".extra-filter").fadeOut(this.configStore.Options.animationTime,function(){t.siblings("a").show(),t.hide()}),e.stopPropagation()},e}();n.ShowMoreLessHandler=i},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=t(29),a=t(30),o=t(34),l=t(8),r=function(){function e(e){var n=this;this.handlerChain=[],this.bind=function(e){var t=n.templateService.bind(e);n.filterElement.html(t)},this.destroy=function(){void 0!==n.filterElement&&n.filterElement.off(),n.handlerChain.forEach(function(e){void 0!==e&&void 0!==e.deregister&&e.deregister()})},this.configStore=new o.FilterConfigStore(e),this.filterElement=jQuery(e.containerElement),this.templateService=new a.FilterTemplateService(this.configStore),this.handlerChain.push(new l.FilterActionHandler(this.filterElement,this.configStore)),this.handlerChain.push(new i.HotKeysFiltersHandler),this.handlerChain.forEach(function(e){e.RegisterDomHandler()})}return e}();n.Filter=r},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(){var e=this;this.RegisterDomHandler=function(){jQuery(document).on("keydown",e.focusOnSearch)},this.onResize=function(){throw new Error("Method not implemented.")},this.onDocumentClick=function(e){},this.deRegister=function(){jQuery(document).off("keydown",e.focusOnSearch)},this.focusOnSearch=function(e){e.altKey&&"r"===e.key&&(e.preventDefault(),jQuery(".facet-subheader .remove-all").focus())}}return e}();n.HotKeysFiltersHandler=i},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=t(31),a=function(){function e(e){var n=this;this.configStore=e,this.mergeWithFacetConfig=function(e){for(var t=[],i=0,a=e;i<a.length;i++)for(var o=a[i],l=0,r=n.configStore.Options.filterConfig;l<r.length;l++){var s=r[l];if(s.id===o.id){t.push({collapsed:s.collapsed,facetRange:o.facetRange,facetValues:o.facetValues,id:s.id,name:s.name,order:s.order,pinned:s.pinned,type:s.type});break}}return t},this.tempateFunctionForFacetSubHeader=i}return e.prototype.bind=function(e){var n=this.mergeWithFacetConfig(e);return this.tempateFunctionForFacetSubHeader({filters:n})},e}();n.FilterTemplateService=a},function(e,n,t){function i(e){return e&&(e.__esModule?e.default:e)}var a=t(0);e.exports=(a.default||a).template({1:function(e,n,t,i,a,o,l){var r;return'<div class="content facet-subheader gui fluid-w basic curved p-5">\n    <span class="gui gui-subheading-2 caps">Applied Filters</span>\n    <button class="gui m-l-5 remove-all" >\n        <i class="gui-icon gui-icon-cancel"></i>\n        <span>Clear All</span>\n    </button>\n    <span class="gui m-l-10">\n'+(null!=(r=t.each.call(null!=n?n:e.nullContext||{},null!=n?n.filters:n,{name:"each",hash:{},fn:e.program(2,a,0,o,l),inverse:e.noop,data:a}))?r:"")+"    </span>\n</div>\n"},2:function(e,n,t,i,a,o,l){var r,s=null!=n?n:e.nullContext||{};return'        <span class="gui m-r-5">\n            <span class="gui large labels facet-labels">\n                <span class="gui gui-subheading-1">'+e.escapeExpression(e.lambda(null!=n?n.name:n,n))+"</span>\n"+(null!=(r=t.each.call(s,null!=n?n.facetValues:n,{name:"each",hash:{},fn:e.program(3,a,0,o,l),inverse:e.noop,data:a}))?r:"")+(null!=(r=t.each.call(s,null!=n?n.facetRange:n,{name:"each",hash:{},fn:e.program(5,a,0,o,l),inverse:e.noop,data:a}))?r:"")+"            </span>\n        </span>\n"},3:function(e,n,t,i,a,o,l){var r=e.lambda,s=e.escapeExpression;return'                <button class="gui m-0 m-t-2 m-r-2 p-4 label cursor-pointer strikethrough-hover" data-filter-entry="'+s(r(null!=l[1]?l[1].id:l[1],n))+":"+s(r(null!=n?n.label:n,n))+":"+s(r(null!=l[1]?l[1].type:l[1],n))+'">\n                    '+s(r(null!=n?n.label:n,n))+'\n                    <i class="gui-icon gui-icon-cancel"></i>\n                </button>\n'},5:function(e,n,a,o,l,r,s){var c=e.lambda,u=e.escapeExpression;return'                <button class="gui m-0 m-t-2 m-r-2 p-4 label cursor-pointer strikethrough-hover" data-filter-entry="'+u(c(null!=s[1]?s[1].id:s[1],n))+":"+u(c(null!=n?n.label:n,n))+":"+u(c(null!=s[1]?s[1].type:s[1],n))+':true">\n                    '+u(i(t(32)).call(null!=n?n:e.nullContext||{},null!=n?n.min:n,null!=n?n.max:n,null!=s[1]?s[1].type:s[1],{name:"Range",hash:{},data:l}))+'\n                    <i class="gui-icon gui-icon-cancel"></i>\n                </button>\n'},compiler:[7,">= 4.0.0"],main:function(e,n,t,i,a,o,l){var r;return null!=(r=t.if.call(null!=n?n:e.nullContext||{},null!=(r=null!=n?n.filters:n)?r.length:r,{name:"if",hash:{},fn:e.program(1,a,0,o,l),inverse:e.noop,data:a}))?r:""},useData:!0,useDepths:!0})},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=t(33),a=function(e,n,t){var a="",o=e,l=n;return"Edm.DateTimeOffset"===t&&(void 0!==e&&null!==e&&""!==e&&(o=i(e).format("ll")),void 0!==n&&null!==n&&""!==n&&(l=i(n).format("ll"))),void 0!==o&&null!==o&&""!==o&&(a+=" from: "+o),void 0!==l&&null!==l&&""!==l&&(a+=" to: "+l),a};n.default=a},function(e,t){e.exports=n},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e){var n=this;if(this.defaultfilterOptions={animationTime:200,containerElement:null,filterConfig:[],onAllFilterRemove:function(){},onFilterChange:function(e,n,t){}},this.extendOptions=function(e){return n.options=jQuery.extend({},n.defaultfilterOptions,e)},this.extendOptions(e),null===e.containerElement)throw new Error("Please Provide a valid container Element object for filters")}return Object.defineProperty(e.prototype,"Options",{get:function(){return this.options},enumerable:!0,configurable:!0}),e}();n.FilterConfigStore=i}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy9mYWNldG9vLm1pbi5qcyIsIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgNGE5MzBjMGE4ZjVlMTMxYWUwZDkiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIHtcInJvb3RcIjpcIkhhbmRsZWJhcnNcIixcImFtZFwiOlwiaGFuZGxlYmFycy5ydW50aW1lXCIsXCJjb21tb25qczJcIjpcImhhbmRsZWJhcnMvcnVudGltZVwiLFwiY29tbW9uanNcIjpcImhhbmRsZWJhcnMvcnVudGltZVwifSIsIndlYnBhY2s6Ly8vLi9zcmMvaGJzL2hlbHBlcnMvQ2hlY2tlZC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaGJzL2hlbHBlcnMvRGlzYWJsZWQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2V2ZW50aGFuZGxlcnMvU2hvd0hpZGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2hicy9mYWNldC1ib2R5LmhicyIsIndlYnBhY2s6Ly8vLi9zcmMvaGJzL2hlbHBlcnMvU2VsZWN0ZWRGaWx0ZXJzQ291bnQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2hicy9oZWxwZXJzL1Nob3dNb3JlTGVzc0xpbmsudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2hicy9oZWxwZXJzL0NoZWNrTGVuZ3RoLnRzIiwid2VicGFjazovLy8uL3NyYy90cy9ldmVudGhhbmRsZXJzL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy90cy9ldmVudGhhbmRsZXJzL0V4cGFuZENvbGxhcHNlTWFuYWdlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvbW9kZWxzL0ZpbHRlckFjdGlvblR5cGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL21haW4vRW50cnkudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL21haW4vRmFjZXQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2V2ZW50aGFuZGxlcnMvSG90S2V5c0ZhY2V0SGFuZGxlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvc2VydmljZXMvRmFjZXRUZW1wbGF0ZVNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2hicy9mYWNldC1tYWluLmhicyIsIndlYnBhY2s6Ly8vLi9zcmMvaGJzL2ZhY2V0LXBpbm5lZC5oYnMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2hicy9mYWNldC11bnBpbm5lZC5oYnMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2hicy9oZWxwZXJzL0NvbGxhcHNlZC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaGJzL2hlbHBlcnMvSGlkZGVuLnRzIiwid2VicGFjazovLy8uL3NyYy90cy9jb25maWcvRmFjZXRDb25maWdTdG9yZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvZXZlbnRoYW5kbGVycy9FeHBhbmRDb2xsYXBzZUZhY2V0c0hhbmRsZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2V2ZW50aGFuZGxlcnMvRmFjZXRBY3Rpb25IYW5kbGVyLnRzIiwid2VicGFjazovLy8uL3NyYy90cy9ldmVudGhhbmRsZXJzL0ZhY2V0U2VhcmNoSGFuZGxlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvZXZlbnRoYW5kbGVycy9GaWx0ZXJBY3Rpb25IYW5kbGVyLnRzIiwid2VicGFjazovLy8uL3NyYy90cy9ldmVudGhhbmRsZXJzL0hpZGVGYWNldFNlY3Rpb25IYW5kbGVyLnRzIiwid2VicGFjazovLy8uL3NyYy90cy9ldmVudGhhbmRsZXJzL1BpblVucGluRXZlbnRIYW5kbGVyLnRzIiwid2VicGFjazovLy8uL3NyYy90cy9ldmVudGhhbmRsZXJzL1Nob3dNb3JlTGVzc0hhbmRsZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL21haW4vRmlsdGVyLnRzIiwid2VicGFjazovLy8uL3NyYy90cy9ldmVudGhhbmRsZXJzL0hvdEtleXNGaWx0ZXJzSGFuZGxlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvc2VydmljZXMvRmlsdGVyVGVtcGxhdGVTZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL3NyYy9oYnMvZmFjZXQtYXBwbGllZC1maWx0ZXJzLmhicyIsIndlYnBhY2s6Ly8vLi9zcmMvaGJzL2hlbHBlcnMvUmFuZ2UudHMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwibW9tZW50XCIiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2NvbmZpZy9GaWx0ZXJDb25maWdTdG9yZS50cyJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJyZXF1aXJlIiwiZGVmaW5lIiwiYW1kIiwic2VsZiIsInRoaXMiLCJfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzBfXyIsIl9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfMzNfXyIsIm1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpbnN0YWxsZWRNb2R1bGVzIiwiaSIsImwiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJuIiwiX19lc01vZHVsZSIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsInZhbHVlIiwiY2hlY2tlZCIsImJvb2wiLCJkZWZhdWx0IiwiZGlzYWJsZWQiLCJTaG93SGlkZSIsIkhhbmRsZWJhcnMiLCJ0ZW1wbGF0ZSIsImNvbXBpbGVyIiwibWFpbiIsImNvbnRhaW5lciIsImRlcHRoMCIsImhlbHBlcnMiLCJwYXJ0aWFscyIsImRhdGEiLCJzdGFjazEiLCJpbnZva2VQYXJ0aWFsIiwiZGVjb3JhdG9ycyIsInVzZVBhcnRpYWwiLCJ1c2VEYXRhIiwic2VsZWN0ZWRGaWx0ZXJzQ291bnQiLCJmYWNldFZhbHVlcyIsImluZGV4IiwidW5kZWZpbmVkIiwibGVuZ3RoIiwiX2kiLCJmYWNldFZhbHVlc18xIiwiZmFjZXRWYWx1ZSIsInNlbGVjdGVkIiwiU2hvd01vcmVMZXNzTGluayIsInYyIiwib3B0aW9ucyIsImNoZWNrTGVuZ3RoIiwiX19leHBvcnQiLCJTaG93SGlkZV8xIiwiRXhwYW5kQ29sbGFwc2VNYW5hZ2VyIiwiQ29udHJvbFZpc2liaWxpdHlPZkZpbHRlciIsImhlYWRlckVsZW1lbnQiLCJzaG93SGlkZSIsImljb25FbGVtZW50IiwiY2hpbGRyZW4iLCJjdXJyZW50bHlWaXNpYmxlIiwiaGFzQ2xhc3MiLCJUb2dnbGUiLCJTaG93IiwiSGlkZSIsInBhcmVudHMiLCJmaW5kIiwic2xpZGVVcCIsInJlbW92ZUNsYXNzIiwiYWRkQ2xhc3MiLCJzbGlkZURvd24iLCJGaWx0ZXJBY3Rpb25UeXBlIiwiSG90S2V5c0ZhY2V0SGFuZGxlcl8xIiwiRmFjZXRUZW1wbGF0ZVNlcnZpY2VfMSIsIkZhY2V0Q29uZmlnU3RvcmVfMSIsImV2ZW50aGFuZGxlcnNfMSIsIkZhY2V0IiwiX3RoaXMiLCJoYW5kbGVyQ2hhaW4iLCJiaW5kIiwiZmFjZXRzIiwidGVtcGxhdGVTZXJ2aWNlIiwic2V0RGF0YSIsImZ1bGxGYWNldCIsImZhY2V0RWxlbWVudCIsImh0bWwiLCJoaWRlIiwiZmFkZU91dCIsImNvbmZpZ1N0b3JlIiwiT3B0aW9ucyIsImFuaW1hdGlvblRpbWUiLCJjb2xsYXBzZWQiLCJzaG93IiwiZmFkZUluIiwiZGVzdHJveSIsIm9mZiIsImZvckVhY2giLCJoYW5kbGVyIiwiZGVyZWdpc3RlciIsIkZhY2V0Q29uZmlnU3RvcmUiLCJqUXVlcnkiLCJjb250YWluZXJFbGVtZW50IiwiRmFjZXRUZW1wbGF0ZVNlcnZpY2UiLCJwdXNoIiwiRXhwYW5kQ29sbGFwc2VGYWNldHNIYW5kbGVyIiwiRmFjZXRBY3Rpb25IYW5kbGVyIiwiRmFjZXRTZWFyY2hIYW5kbGVyIiwiSGlkZUZhY2V0U2VjdGlvbkhhbmRsZXIiLCJIb3RLZXlzRmFjZXRIYW5kbGVyIiwiUGluVW5waW5FdmVudEhhbmRsZXIiLCJTaG93TW9yZUxlc3NIYW5kbGVyIiwiUmVnaXN0ZXJEb21IYW5kbGVyIiwiZG9jdW1lbnQiLCJvbiIsImZvY3VzT25TZWFyY2giLCJvblJlc2l6ZSIsIkVycm9yIiwib25Eb2N1bWVudENsaWNrIiwiZXZlbnQiLCJkZVJlZ2lzdGVyIiwiYWx0S2V5Iiwia2V5IiwicHJldmVudERlZmF1bHQiLCJmb2N1cyIsIkZhY2V0TWFpbiIsImdldERhdGEiLCJjb21wYXJlRm4iLCJwcmV2IiwibmV4dCIsIm9yZGVyIiwibWVyZ2VXaXRoRmFjZXRDb25maWciLCJtZXJnZWRBcnJheSIsImZhY2V0c18xIiwiZmFjZXQiLCJfYSIsIl9iIiwiZmFjZXRDb25maWciLCJpZCIsImZhY2V0UmFuZ2UiLCJwaW5uZWQiLCJ0eXBlIiwidGVtcGF0ZUZ1bmN0aW9uRm9yRmFjZXRNYWluIiwibWVyZ2VkRmFjZXRzIiwiZmF2b3JpdGVzIiwiZmlsdGVyIiwiZiIsIm5vbkZhdm9yaXRlcyIsInNvcnQiLCJub09mRmFjZXRUb1Nob3ciLCIxIiwiMyIsIm51bGxDb250ZXh0IiwiaGFzaCIsImZuIiwicHJvZ3JhbSIsImludmVyc2UiLCJfX2RlZmF1bHQiLCJvYmoiLCJibG9ja1BhcmFtcyIsImRlcHRocyIsImVhY2giLCJub29wIiwiMiIsImFsaWFzMSIsImxhbWJkYSIsImFsaWFzMiIsImVzY2FwZUV4cHJlc3Npb24iLCJhbGlhczMiLCI0IiwibGFiZWwiLCJjb3VudCIsIjYiLCI4IiwidXNlRGVwdGhzIiwiNyIsIjkiLCJoaWRkZW4iLCJpbnZlcnQiLCJkZWZhdWx0RmFjZXRPcHRpb25zIiwib25GaWx0ZXJDaGFuZ2UiLCJhY3Rpb24iLCJvblBpblVucGluIiwicGluIiwiZXh0ZW5kT3B0aW9ucyIsImlucHV0T3B0aW9ucyIsImV4dGVuZCIsIkV4cGFuZENvbGxhcHNlTWFuYWdlcl8xIiwiZWxlbWVudCIsImhhbmRsZVZpc2liaWxpdHlPZkFsbCIsImhpZGVTaG93IiwiY29kZSIsImtleUNvZGUiLCJ3aGljaCIsImRhdGFfMSIsInN0b3BQcm9wYWdhdGlvbiIsImhhbmRsZVZpc2liaWxpdHlPZk9uZSIsInRhcmdldCIsInBhcmVudCIsImF0dHIiLCJkYXRhXzIiLCJGaWx0ZXJBY3Rpb25UeXBlXzEiLCJ2YWxTdHIiLCJ2YWwiLCJ0b1N0cmluZyIsInNwbGl0IiwiaXMiLCJBZGQiLCJNaW51cyIsImhhbmRsZVNlYXJjaCIsInRvTG93ZXJDYXNlIiwiZSIsImZhY2V0SXRlbSIsImZhY2V0TmFtZU1hdGNoIiwiaW5wdXRWYWx1ZUJsYW5rIiwidHJpbSIsImluZGV4T2YiLCJzaHdNb3JlRWxlbSIsInNob3dMZXNzTGluayIsImZhY2V0Q2hpbGRNYXRjaCIsImoiLCJsYWJlbEVsZW0iLCJoZWFkZXJFbG1lbnQiLCJGaWx0ZXJBY3Rpb25IYW5kbGVyIiwiZmlsdGVyRWxlbWVudCIsImlzUmFuZ2UiLCJvbkFsbEZpbHRlclJlbW92ZSIsImhpZGVGYWNldCIsInNob3dGYWNldCIsIiQiLCJoYW5kbGVQaW5VbnBpbiIsInNob3dNb3JlTGVzc0ZpbHRlcnMiLCJzaG93TW9yZSIsInNpYmxpbmdzIiwiSG90S2V5c0ZpbHRlcnNIYW5kbGVyXzEiLCJGaWx0ZXJUZW1wbGF0ZVNlcnZpY2VfMSIsIkZpbHRlckNvbmZpZ1N0b3JlXzEiLCJGaWx0ZXIiLCJmaWx0ZXJzIiwiZmFjZXRTdWJIZWFkZXIiLCJGaWx0ZXJDb25maWdTdG9yZSIsIkZpbHRlclRlbXBsYXRlU2VydmljZSIsIkhvdEtleXNGaWx0ZXJzSGFuZGxlciIsIkZhY2V0U3ViSGVhZGVyIiwiZmlsdGVyc18xIiwiZmlsdGVyQ29uZmlnIiwidGVtcGF0ZUZ1bmN0aW9uRm9yRmFjZXRTdWJIZWFkZXIiLCJtZXJnZWRGaWx0ZXJzIiwiNSIsIm1pbiIsIm1heCIsIm1vbWVudCIsInJhbmdlIiwic3RyIiwibWluU3RyIiwibWF4U3RyIiwiZm9ybWF0IiwiZGVmYXVsdGZpbHRlck9wdGlvbnMiXSwibWFwcGluZ3MiOiJDQUFBLFNBQUFBLEVBQUFDLEdBQ0EsZ0JBQUFDLFVBQUEsZ0JBQUFDLFFBQ0FBLE9BQUFELFFBQUFELEVBQUFHLFFBQUEsc0JBQUFBLFFBQUEsV0FDQSxrQkFBQUMsZ0JB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R1g1USxHQUFBc0MsUUFBZXFPLEdsQ3FrRFQsU0FBVTFRLEVBQVFELEdtQzNsRHhCQyxFQUFBRCxRQUFBUSxHbkNzbURNLFNBQVVQLEVBQVFELEVBQVNVLEdBRWpDLFlBRUFZLFFBQU9DLGVBQWV2QixFQUFTLGNBQWdCbUMsT0FBTyxHb0N2bUR0RCxJQUFBNE4sR0FBQSxXQWFJLFFBQUFBLEdBQVk3TCxHQUFaLEdBQUEyQixHQUFBdkYsSUFFSSxJQWJJQSxLQUFBMFEsc0JBQ0p0SyxjQUFlLElBQ2ZXLGlCQUFrQixLQUNsQitJLGdCQUNBbkIsa0JBQW1CLGFBR25COUMsZUFBZ0IsU0FBQzFELEVBQWF0RyxFQUFlaUssTUFhekM5TCxLQUFBaU0sY0FBZ0IsU0FBQ0MsR0FDckIsTUFBUTNHLEdBQUszQixRQUFVa0QsT0FBT3FGLFVBQVc1RyxFQUFLbUwscUJBQXNCeEUsSUFUcEVsTSxLQUFLaU0sY0FBY3JJLEdBQ2MsT0FBN0JBLEVBQVFtRCxpQkFDUixLQUFNLElBQUllLE9BQU0sK0RBUzVCLE1BTkk5RyxRQUFBQyxlQUFXd08sRUFBQWhPLFVBQUEsV3BDNG1EUEwsSW9DNW1ESixXQUNJLE1BQU9wQixNQUFLNEQsU3BDOG1EWnpDLFlBQVksRUFDWkQsY0FBYyxJb0MxbUR0QnVPLElBekJhL1AsR0FBQStQIiwiZmlsZSI6ImZhY2V0b28ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiaGFuZGxlYmFycy9ydW50aW1lXCIpLCByZXF1aXJlKFwibW9tZW50XCIpKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtcImhhbmRsZWJhcnMucnVudGltZVwiLCBcIm1vbWVudFwiXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJGYWNldG9vXCJdID0gZmFjdG9yeShyZXF1aXJlKFwiaGFuZGxlYmFycy9ydW50aW1lXCIpLCByZXF1aXJlKFwibW9tZW50XCIpKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJGYWNldG9vXCJdID0gZmFjdG9yeShyb290W1wiSGFuZGxlYmFyc1wiXSwgcm9vdFtcIm1vbWVudFwiXSk7XG59KSh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDogdGhpcywgZnVuY3Rpb24oX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8wX18sIF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfMzNfXykge1xucmV0dXJuIFxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCJoYW5kbGViYXJzL3J1bnRpbWVcIiksIHJlcXVpcmUoXCJtb21lbnRcIikpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW1wiaGFuZGxlYmFycy5ydW50aW1lXCIsIFwibW9tZW50XCJdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIkZhY2V0b29cIl0gPSBmYWN0b3J5KHJlcXVpcmUoXCJoYW5kbGViYXJzL3J1bnRpbWVcIiksIHJlcXVpcmUoXCJtb21lbnRcIikpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIkZhY2V0b29cIl0gPSBmYWN0b3J5KHJvb3RbXCJIYW5kbGViYXJzXCJdLCByb290W1wibW9tZW50XCJdKTtcbn0pKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzLCBmdW5jdGlvbihfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzBfXywgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8zM19fKSB7XG5yZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuLyoqKioqKi8gXHRcdFx0XHRnZXQ6IGdldHRlclxuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDExKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogZXh0ZXJuYWwge1wicm9vdFwiOlwiSGFuZGxlYmFyc1wiLFwiYW1kXCI6XCJoYW5kbGViYXJzLnJ1bnRpbWVcIixcImNvbW1vbmpzMlwiOlwiaGFuZGxlYmFycy9ydW50aW1lXCIsXCJjb21tb25qc1wiOlwiaGFuZGxlYmFycy9ydW50aW1lXCJ9ICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzBfXztcblxuLyoqKi8gfSksXG4vKiAxICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvaGJzL2hlbHBlcnMvQ2hlY2tlZC50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgY2hlY2tlZCA9IGZ1bmN0aW9uIChib29sKSB7XHJcbiAgICByZXR1cm4gYm9vbCA/IFwiY2hlY2tlZFwiIDogXCJcIjtcclxufTtcclxuZXhwb3J0cy5kZWZhdWx0ID0gY2hlY2tlZDtcclxuXG5cbi8qKiovIH0pLFxuLyogMiAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9oYnMvaGVscGVycy9EaXNhYmxlZC50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBkeW5hbWljIGV4cG9ydHMgcHJvdmlkZWQgKi9cbi8qISBhbGwgZXhwb3J0cyB1c2VkICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIGRpc2FibGVkID0gZnVuY3Rpb24gKGJvb2wpIHtcclxuICAgIHJldHVybiBib29sID8gXCJkaXNhYmxlZFwiIDogXCJcIjtcclxufTtcclxuZXhwb3J0cy5kZWZhdWx0ID0gZGlzYWJsZWQ7XHJcblxuXG4vKioqLyB9KSxcbi8qIDMgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy90cy9ldmVudGhhbmRsZXJzL1Nob3dIaWRlLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZHluYW1pYyBleHBvcnRzIHByb3ZpZGVkICovXG4vKiEgYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBTaG93SGlkZTtcclxuKGZ1bmN0aW9uIChTaG93SGlkZSkge1xyXG4gICAgU2hvd0hpZGVbU2hvd0hpZGVbXCJTaG93XCJdID0gMF0gPSBcIlNob3dcIjtcclxuICAgIFNob3dIaWRlW1Nob3dIaWRlW1wiSGlkZVwiXSA9IDFdID0gXCJIaWRlXCI7XHJcbiAgICBTaG93SGlkZVtTaG93SGlkZVtcIlRvZ2dsZVwiXSA9IDJdID0gXCJUb2dnbGVcIjtcclxufSkoU2hvd0hpZGUgPSBleHBvcnRzLlNob3dIaWRlIHx8IChleHBvcnRzLlNob3dIaWRlID0ge30pKTtcclxuXG5cbi8qKiovIH0pLFxuLyogNCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvaGJzL2ZhY2V0LWJvZHkuaGJzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBkeW5hbWljIGV4cG9ydHMgcHJvdmlkZWQgKi9cbi8qISBhbGwgZXhwb3J0cyB1c2VkICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBIYW5kbGViYXJzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgaGFuZGxlYmFycyAqLyAwKTtcbmZ1bmN0aW9uIF9fZGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiAob2JqLl9fZXNNb2R1bGUgPyBvYmpbXCJkZWZhdWx0XCJdIDogb2JqKTsgfVxubW9kdWxlLmV4cG9ydHMgPSAoSGFuZGxlYmFyc1tcImRlZmF1bHRcIl0gfHwgSGFuZGxlYmFycykudGVtcGxhdGUoe1wiY29tcGlsZXJcIjpbNyxcIj49IDQuMC4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMTtcblxuICByZXR1cm4gXCI8ZGl2IGNsYXNzPVxcXCJndWkgb2YtaGlkZGVuIG1pbi13LTUwIHctYXV0byBmbHVpZC1oIGZsZXggY29sdW1uIGNvbnRhaW5lclxcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcImd1aSBoLWF1dG8gZmxleCBtLXQtMTJcXFwiPlxcbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiZ3VpIGN1cnNvci1wb2ludGVyIGd1aS1zdWJoZWFkaW5nLTEgbS0wIGV4cGFuZC1hbGxcXFwiPlxcbiAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJndWktaWNvbiBzcGVjaWFsIHJvdGF0ZS1yaWdodCBndWktaWNvbi1jaGV2ZG91YmxlXFxcIj48L2k+XFxuICAgICAgICAgICAgRXhwYW5kIEFsbFxcbiAgICAgICAgPC9idXR0b24+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJndWkgbS1yLTUgbS1sLTVcXFwiPjwvZGl2PlxcbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiZ3VpIGN1cnNvci1wb2ludGVyIGd1aS1zdWJoZWFkaW5nLTEgbS0wIGNvbGxhcHNlLWFsbFxcXCI+XFxuICAgICAgICAgICAgPGkgY2xhc3M9XFxcImd1aS1pY29uIHNwZWNpYWwgcm90YXRlLXJpZ2h0IGd1aS1pY29uLWNoZXZkb3VibGVcXFwiPjwvaT5cXG4gICAgICAgICAgICBDb2xsYXBzZSBBbGxcXG4gICAgICAgIDwvYnV0dG9uPlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiZ3VpIGlucHV0IGZsdWlkLXcgcC10LTUgcC1yLTUgcC1iLTUgcC1sLTEgbS10LTEwXFxcIj5cXG4gICAgICAgIDxpbnB1dCBjbGFzcz1cXFwiZ3VpIGlucHV0IHAtNSBoLTMwIGZsdWlkLXcgZ3VpLXN1YmhlYWRpbmctMiBmaWx0ZXItc2VhcmNoLWlucHV0XFxcIiBwbGFjZWhvbGRlcj1cXFwiU2VhcmNoIEZpbHRlcnNcXFwiIC8+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJndWkgZmx1aWQtaCBmYWNldC1saXN0IG9mLWF1dG8gb2Z4LWhpZGRlbiBtLXQtMTBcXFwiPlxcbiAgICAgICAgXCJcbiAgICArICgoc3RhY2sxID0gY29udGFpbmVyLmludm9rZVBhcnRpYWwoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9zcmMvaGJzL2ZhY2V0LXBpbm5lZC5oYnMgKi8gMTYpLGRlcHRoMCx7XCJuYW1lXCI6XCJmYWNldC1waW5uZWRcIixcImRhdGFcIjpkYXRhLFwiaGVscGVyc1wiOmhlbHBlcnMsXCJwYXJ0aWFsc1wiOnBhcnRpYWxzLFwiZGVjb3JhdG9yc1wiOmNvbnRhaW5lci5kZWNvcmF0b3JzfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCIgXCJcbiAgICArICgoc3RhY2sxID0gY29udGFpbmVyLmludm9rZVBhcnRpYWwoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9zcmMvaGJzL2ZhY2V0LXVucGlubmVkLmhicyAqLyAxNyksZGVwdGgwLHtcIm5hbWVcIjpcImZhY2V0LXVucGlubmVkXCIsXCJkYXRhXCI6ZGF0YSxcImhlbHBlcnNcIjpoZWxwZXJzLFwicGFydGlhbHNcIjpwYXJ0aWFscyxcImRlY29yYXRvcnNcIjpjb250YWluZXIuZGVjb3JhdG9yc30pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiXFxuICAgIDwvZGl2PlxcblxcbjwvZGl2PlwiO1xufSxcInVzZVBhcnRpYWxcIjp0cnVlLFwidXNlRGF0YVwiOnRydWV9KTtcblxuLyoqKi8gfSksXG4vKiA1ICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2hicy9oZWxwZXJzL1NlbGVjdGVkRmlsdGVyc0NvdW50LnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgc2VsZWN0ZWRGaWx0ZXJzQ291bnQgPSBmdW5jdGlvbiAoZmFjZXRWYWx1ZXMpIHtcclxuICAgIHZhciBpbmRleCA9IDA7XHJcbiAgICBpZiAoZmFjZXRWYWx1ZXMgIT09IHVuZGVmaW5lZFxyXG4gICAgICAgICYmIGZhY2V0VmFsdWVzICE9PSBudWxsXHJcbiAgICAgICAgJiYgZmFjZXRWYWx1ZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgZmFjZXRWYWx1ZXNfMSA9IGZhY2V0VmFsdWVzOyBfaSA8IGZhY2V0VmFsdWVzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBmYWNldFZhbHVlID0gZmFjZXRWYWx1ZXNfMVtfaV07XHJcbiAgICAgICAgICAgIGlmIChmYWNldFZhbHVlLnNlbGVjdGVkKSB7XHJcbiAgICAgICAgICAgICAgICBpbmRleCsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGluZGV4ID09PSAwID8gXCJcIiA6IFwiPHNwYW4gY2xhc3M9XFxcImd1aS1ib2R5LTJcXFwiPihcIiArIGluZGV4ICsgXCIpPC9zcGFuPlwiO1xyXG59O1xyXG5leHBvcnRzLmRlZmF1bHQgPSBzZWxlY3RlZEZpbHRlcnNDb3VudDtcclxuXG5cbi8qKiovIH0pLFxuLyogNiAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2hicy9oZWxwZXJzL1Nob3dNb3JlTGVzc0xpbmsudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBkeW5hbWljIGV4cG9ydHMgcHJvdmlkZWQgKi9cbi8qISBhbGwgZXhwb3J0cyB1c2VkICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIFNob3dNb3JlTGVzc0xpbmsgPSBmdW5jdGlvbiAoaW5kZXgsIHYyLCBvcHRpb25zKSB7XHJcbiAgICBpZiAoaW5kZXgubGVuZ3RoID4gdjIpIHtcclxuICAgICAgICByZXR1cm4gXCI8YSB0YWJpbmRleD1cXFwiMFxcXCIgY2xhc3M9XFxcImd1aSBzaW1wbGUgc2hvdy1tb3JlLWxpbmsgY3Vyc29yLXBvaW50ZXIgcC0wIG0tdC0zXFxcIj5TaG93IFwiXHJcbiAgICAgICAgICAgICsgKGluZGV4Lmxlbmd0aCAtIHYyKVxyXG4gICAgICAgICAgICArIFwiIE1vcmUgPC9hPlwiXHJcbiAgICAgICAgICAgICsgXCI8YSB0YWJpbmRleD1cXFwiMFxcXCIgY2xhc3M9XFxcImd1aSBzaW1wbGUgc2hvdy1sZXNzLWxpbmsgY3Vyc29yLXBvaW50ZXIgZ3VpLWhpZGRlbiBwLTAgbS10LTNcXFwiPlwiXHJcbiAgICAgICAgICAgICsgXCJTaG93IExlc3M8L2E+XCI7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gXCJcIjtcclxuICAgIH1cclxufTtcclxuZXhwb3J0cy5kZWZhdWx0ID0gU2hvd01vcmVMZXNzTGluaztcclxuXG5cbi8qKiovIH0pLFxuLyogNyAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9oYnMvaGVscGVycy9DaGVja0xlbmd0aC50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBkeW5hbWljIGV4cG9ydHMgcHJvdmlkZWQgKi9cbi8qISBhbGwgZXhwb3J0cyB1c2VkICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIGNoZWNrTGVuZ3RoID0gZnVuY3Rpb24gKGluZGV4LCB2Mikge1xyXG4gICAgaWYgKGluZGV4ICE9PSB1bmRlZmluZWQgJiYgaW5kZXggKyAxID4gdjIpIHtcclxuICAgICAgICByZXR1cm4gXCJndWktaGlkZGVuIGV4dHJhLWZpbHRlclwiO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFwiXCI7XHJcbn07XHJcbmV4cG9ydHMuZGVmYXVsdCA9IGNoZWNrTGVuZ3RoO1xyXG5cblxuLyoqKi8gfSksXG4vKiA4ICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvdHMvZXZlbnRoYW5kbGVycy9pbmRleC50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuZnVuY3Rpb24gX19leHBvcnQobSkge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9FeHBhbmRDb2xsYXBzZUZhY2V0c0hhbmRsZXIgKi8gMjEpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9GYWNldEFjdGlvbkhhbmRsZXIgKi8gMjIpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9GYWNldFNlYXJjaEhhbmRsZXIgKi8gMjMpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9GaWx0ZXJBY3Rpb25IYW5kbGVyICovIDI0KSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vSGlkZUZhY2V0U2VjdGlvbkhhbmRsZXIgKi8gMjUpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9QaW5VbnBpbkV2ZW50SGFuZGxlciAqLyAyNikpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1Nob3dNb3JlTGVzc0hhbmRsZXIgKi8gMjcpKTtcclxuXG5cbi8qKiovIH0pLFxuLyogOSAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy90cy9ldmVudGhhbmRsZXJzL0V4cGFuZENvbGxhcHNlTWFuYWdlci50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBkeW5hbWljIGV4cG9ydHMgcHJvdmlkZWQgKi9cbi8qISBhbGwgZXhwb3J0cyB1c2VkICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIFNob3dIaWRlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1Nob3dIaWRlICovIDMpO1xyXG52YXIgRXhwYW5kQ29sbGFwc2VNYW5hZ2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRXhwYW5kQ29sbGFwc2VNYW5hZ2VyKCkge1xyXG4gICAgfVxyXG4gICAgRXhwYW5kQ29sbGFwc2VNYW5hZ2VyLkNvbnRyb2xWaXNpYmlsaXR5T2ZGaWx0ZXIgPSBmdW5jdGlvbiAoaGVhZGVyRWxlbWVudCwgc2hvd0hpZGUpIHtcclxuICAgICAgICB2YXIgaWNvbkVsZW1lbnQgPSBoZWFkZXJFbGVtZW50LmNoaWxkcmVuKFwic3BhblwiKS5jaGlsZHJlbihcIi5leHBhbnNpb24taWNvblwiKTtcclxuICAgICAgICB2YXIgY3VycmVudGx5VmlzaWJsZSA9IGljb25FbGVtZW50Lmhhc0NsYXNzKFwiZ3VpLWljb24tY2hldnJvbi11cFwiKTtcclxuICAgICAgICBpZiAoU2hvd0hpZGVfMS5TaG93SGlkZS5Ub2dnbGUgIT09IHNob3dIaWRlICYmICgoY3VycmVudGx5VmlzaWJsZSAmJiBzaG93SGlkZSA9PT0gU2hvd0hpZGVfMS5TaG93SGlkZS5TaG93KSB8fFxyXG4gICAgICAgICAgICAoIWN1cnJlbnRseVZpc2libGUgJiYgc2hvd0hpZGUgPT09IFNob3dIaWRlXzEuU2hvd0hpZGUuSGlkZSkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFjdXJyZW50bHlWaXNpYmxlKSB7XHJcbiAgICAgICAgICAgIGhlYWRlckVsZW1lbnQucGFyZW50cyhcIi5mYWNldC1pdGVtXCIpLmZpbmQoXCIuZmFjZXQtaXRlbS1kZXNjcmlwdGlvblwiKS5zbGlkZURvd24oMjAwKTtcclxuICAgICAgICAgICAgaWNvbkVsZW1lbnQucmVtb3ZlQ2xhc3MoXCJndWktaWNvbi1jaGV2cm9uLWRvd25cIik7XHJcbiAgICAgICAgICAgIGljb25FbGVtZW50LmFkZENsYXNzKFwiZ3VpLWljb24tY2hldnJvbi11cFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGhlYWRlckVsZW1lbnQucGFyZW50cyhcIi5mYWNldC1pdGVtXCIpLmZpbmQoXCIuZmFjZXQtaXRlbS1kZXNjcmlwdGlvblwiKS5zbGlkZVVwKDIwMCk7XHJcbiAgICAgICAgICAgIGljb25FbGVtZW50LnJlbW92ZUNsYXNzKFwiZ3VpLWljb24tY2hldnJvbi11cFwiKTtcclxuICAgICAgICAgICAgaWNvbkVsZW1lbnQuYWRkQ2xhc3MoXCJndWktaWNvbi1jaGV2cm9uLWRvd25cIik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBFeHBhbmRDb2xsYXBzZU1hbmFnZXI7XHJcbn0oKSk7XHJcbmV4cG9ydHMuRXhwYW5kQ29sbGFwc2VNYW5hZ2VyID0gRXhwYW5kQ29sbGFwc2VNYW5hZ2VyO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxMCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy90cy9tb2RlbHMvRmlsdGVyQWN0aW9uVHlwZS50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBkeW5hbWljIGV4cG9ydHMgcHJvdmlkZWQgKi9cbi8qISBhbGwgZXhwb3J0cyB1c2VkICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIEZpbHRlckFjdGlvblR5cGU7XHJcbihmdW5jdGlvbiAoRmlsdGVyQWN0aW9uVHlwZSkge1xyXG4gICAgRmlsdGVyQWN0aW9uVHlwZVtcIkFkZFwiXSA9IFwiQWRkXCI7XHJcbiAgICBGaWx0ZXJBY3Rpb25UeXBlW1wiTWludXNcIl0gPSBcIk1pbnVzXCI7XHJcbn0pKEZpbHRlckFjdGlvblR5cGUgPSBleHBvcnRzLkZpbHRlckFjdGlvblR5cGUgfHwgKGV4cG9ydHMuRmlsdGVyQWN0aW9uVHlwZSA9IHt9KSk7XHJcblxuXG4vKioqLyB9KSxcbi8qIDExICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvdHMvbWFpbi9FbnRyeS50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuZnVuY3Rpb24gX19leHBvcnQobSkge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9GYWNldCAqLyAxMikpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0ZpbHRlciAqLyAyOCkpO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxMiAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3RzL21haW4vRmFjZXQudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBkeW5hbWljIGV4cG9ydHMgcHJvdmlkZWQgKi9cbi8qISBhbGwgZXhwb3J0cyB1c2VkICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIEhvdEtleXNGYWNldEhhbmRsZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2V2ZW50aGFuZGxlcnMvSG90S2V5c0ZhY2V0SGFuZGxlciAqLyAxMyk7XHJcbnZhciBGYWNldFRlbXBsYXRlU2VydmljZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vc2VydmljZXMvRmFjZXRUZW1wbGF0ZVNlcnZpY2UgKi8gMTQpO1xyXG52YXIgRmFjZXRDb25maWdTdG9yZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi8uLi9jb25maWcvRmFjZXRDb25maWdTdG9yZSAqLyAyMCk7XHJcbnZhciBldmVudGhhbmRsZXJzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLy4uL2V2ZW50aGFuZGxlcnMgKi8gOCk7XHJcbnZhciBGYWNldCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEZhY2V0KG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlckNoYWluID0gW107XHJcbiAgICAgICAgdGhpcy5iaW5kID0gZnVuY3Rpb24gKGZhY2V0cykge1xyXG4gICAgICAgICAgICBfdGhpcy50ZW1wbGF0ZVNlcnZpY2Uuc2V0RGF0YShmYWNldHMpO1xyXG4gICAgICAgICAgICB2YXIgZnVsbEZhY2V0ID0gX3RoaXMudGVtcGxhdGVTZXJ2aWNlLmJpbmQoZmFjZXRzKTtcclxuICAgICAgICAgICAgX3RoaXMuZmFjZXRFbGVtZW50Lmh0bWwoZnVsbEZhY2V0KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuaGlkZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMuZmFjZXRFbGVtZW50LmZpbmQoXCIuZmFjZXQtYm9keVwiKS5mYWRlT3V0KF90aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMuYW5pbWF0aW9uVGltZSk7XHJcbiAgICAgICAgICAgIF90aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMuY29sbGFwc2VkID0gdHJ1ZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuc2hvdyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMuZmFjZXRFbGVtZW50LmZpbmQoXCIuZmFjZXQtYm9keVwiKS5mYWRlSW4oX3RoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5hbmltYXRpb25UaW1lKTtcclxuICAgICAgICAgICAgX3RoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5jb2xsYXBzZWQgPSBmYWxzZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKF90aGlzLmZhY2V0RWxlbWVudCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5mYWNldEVsZW1lbnQub2ZmKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgX3RoaXMuaGFuZGxlckNoYWluLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZXIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChoYW5kbGVyICE9PSB1bmRlZmluZWQgJiYgaGFuZGxlci5kZXJlZ2lzdGVyICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLmRlcmVnaXN0ZXIoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmNvbmZpZ1N0b3JlID0gbmV3IEZhY2V0Q29uZmlnU3RvcmVfMS5GYWNldENvbmZpZ1N0b3JlKG9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuZmFjZXRFbGVtZW50ID0galF1ZXJ5KG9wdGlvbnMuY29udGFpbmVyRWxlbWVudCk7XHJcbiAgICAgICAgdGhpcy50ZW1wbGF0ZVNlcnZpY2UgPSBuZXcgRmFjZXRUZW1wbGF0ZVNlcnZpY2VfMS5GYWNldFRlbXBsYXRlU2VydmljZSh0aGlzLmNvbmZpZ1N0b3JlKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXJDaGFpbi5wdXNoKG5ldyBldmVudGhhbmRsZXJzXzEuRXhwYW5kQ29sbGFwc2VGYWNldHNIYW5kbGVyKHRoaXMuZmFjZXRFbGVtZW50LCB0aGlzLmNvbmZpZ1N0b3JlLCB0aGlzLnRlbXBsYXRlU2VydmljZSkpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlckNoYWluLnB1c2gobmV3IGV2ZW50aGFuZGxlcnNfMS5GYWNldEFjdGlvbkhhbmRsZXIodGhpcy5mYWNldEVsZW1lbnQsIHRoaXMuY29uZmlnU3RvcmUpKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXJDaGFpbi5wdXNoKG5ldyBldmVudGhhbmRsZXJzXzEuRmFjZXRTZWFyY2hIYW5kbGVyKHRoaXMuZmFjZXRFbGVtZW50LCB0aGlzLmNvbmZpZ1N0b3JlKSk7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyQ2hhaW4ucHVzaChuZXcgZXZlbnRoYW5kbGVyc18xLkhpZGVGYWNldFNlY3Rpb25IYW5kbGVyKHRoaXMuZmFjZXRFbGVtZW50LCB0aGlzLmNvbmZpZ1N0b3JlKSk7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyQ2hhaW4ucHVzaChuZXcgSG90S2V5c0ZhY2V0SGFuZGxlcl8xLkhvdEtleXNGYWNldEhhbmRsZXIoKSk7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyQ2hhaW4ucHVzaChuZXcgZXZlbnRoYW5kbGVyc18xLlBpblVucGluRXZlbnRIYW5kbGVyKHRoaXMuZmFjZXRFbGVtZW50LCB0aGlzLmNvbmZpZ1N0b3JlLCB0aGlzLnRlbXBsYXRlU2VydmljZSkpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlckNoYWluLnB1c2gobmV3IGV2ZW50aGFuZGxlcnNfMS5TaG93TW9yZUxlc3NIYW5kbGVyKHRoaXMuZmFjZXRFbGVtZW50LCB0aGlzLmNvbmZpZ1N0b3JlKSk7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyQ2hhaW4uZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlcikge1xyXG4gICAgICAgICAgICBoYW5kbGVyLlJlZ2lzdGVyRG9tSGFuZGxlcigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEZhY2V0O1xyXG59KCkpO1xyXG5leHBvcnRzLkZhY2V0ID0gRmFjZXQ7XHJcblxuXG4vKioqLyB9KSxcbi8qIDEzICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy90cy9ldmVudGhhbmRsZXJzL0hvdEtleXNGYWNldEhhbmRsZXIudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgSG90S2V5c0ZhY2V0SGFuZGxlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEhvdEtleXNGYWNldEhhbmRsZXIoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLlJlZ2lzdGVyRG9tSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgalF1ZXJ5KGRvY3VtZW50KS5vbihcImtleWRvd25cIiwgX3RoaXMuZm9jdXNPblNlYXJjaCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLm9uUmVzaXplID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMub25Eb2N1bWVudENsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIC8vIERvIG5vdGhpbmdcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZGVSZWdpc3RlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgalF1ZXJ5KGRvY3VtZW50KS5vZmYoXCJrZXlkb3duXCIsIF90aGlzLmZvY3VzT25TZWFyY2gpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5mb2N1c09uU2VhcmNoID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIGlmIChldmVudC5hbHRLZXkgJiYgZXZlbnQua2V5ID09PSBcImZcIikge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGpRdWVyeShcIi5maWx0ZXItc2VhcmNoLWlucHV0XCIpLmZvY3VzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEhvdEtleXNGYWNldEhhbmRsZXI7XHJcbn0oKSk7XHJcbmV4cG9ydHMuSG90S2V5c0ZhY2V0SGFuZGxlciA9IEhvdEtleXNGYWNldEhhbmRsZXI7XHJcblxuXG4vKioqLyB9KSxcbi8qIDE0ICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3RzL3NlcnZpY2VzL0ZhY2V0VGVtcGxhdGVTZXJ2aWNlLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgRmFjZXRNYWluID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi8uLi8uLi9oYnMvZmFjZXQtbWFpbi5oYnMgKi8gMTUpO1xyXG52YXIgRmFjZXRUZW1wbGF0ZVNlcnZpY2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBGYWNldFRlbXBsYXRlU2VydmljZShjb25maWdTdG9yZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5jb25maWdTdG9yZSA9IGNvbmZpZ1N0b3JlO1xyXG4gICAgICAgIHRoaXMuc2V0RGF0YSA9IGZ1bmN0aW9uIChmYWNldHMpIHtcclxuICAgICAgICAgICAgX3RoaXMuZGF0YSA9IGZhY2V0cztcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZ2V0RGF0YSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmRhdGE7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmNvbXBhcmVGbiA9IGZ1bmN0aW9uIChwcmV2LCBuZXh0KSB7XHJcbiAgICAgICAgICAgIGlmIChwcmV2Lm9yZGVyID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAobmV4dC5vcmRlciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcHJldi5vcmRlciAtIG5leHQub3JkZXI7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLm1lcmdlV2l0aEZhY2V0Q29uZmlnID0gZnVuY3Rpb24gKGZhY2V0cykge1xyXG4gICAgICAgICAgICB2YXIgbWVyZ2VkQXJyYXkgPSBbXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBmYWNldHNfMSA9IGZhY2V0czsgX2kgPCBmYWNldHNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBmYWNldCA9IGZhY2V0c18xW19pXTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9hID0gMCwgX2IgPSBfdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLmZhY2V0Q29uZmlnOyBfYSA8IF9iLmxlbmd0aDsgX2ErKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmYWNldENvbmZpZyA9IF9iW19hXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmFjZXRDb25maWcuaWQgPT09IGZhY2V0LmlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lcmdlZEFycmF5LnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sbGFwc2VkOiBmYWNldENvbmZpZy5jb2xsYXBzZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWNldFJhbmdlOiBmYWNldC5mYWNldFJhbmdlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFjZXRWYWx1ZXM6IGZhY2V0LmZhY2V0VmFsdWVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGZhY2V0Q29uZmlnLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogZmFjZXRDb25maWcubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyOiBmYWNldENvbmZpZy5vcmRlcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpbm5lZDogZmFjZXRDb25maWcucGlubmVkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogZmFjZXRDb25maWcudHlwZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbWVyZ2VkQXJyYXk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLnRlbXBhdGVGdW5jdGlvbkZvckZhY2V0TWFpbiA9IEZhY2V0TWFpbjtcclxuICAgIH1cclxuICAgIEZhY2V0VGVtcGxhdGVTZXJ2aWNlLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKGZhY2V0cykge1xyXG4gICAgICAgIHZhciBjb2xsYXBzZWQgPSB0aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMuY29sbGFwc2VkO1xyXG4gICAgICAgIHZhciBtZXJnZWRGYWNldHMgPSB0aGlzLm1lcmdlV2l0aEZhY2V0Q29uZmlnKGZhY2V0cyk7XHJcbiAgICAgICAgdmFyIGZhdm9yaXRlcyA9IG1lcmdlZEZhY2V0cy5maWx0ZXIoZnVuY3Rpb24gKGYpIHsgcmV0dXJuIGYucGlubmVkICE9PSB1bmRlZmluZWQgJiYgZi5waW5uZWQ7IH0pO1xyXG4gICAgICAgIHZhciBub25GYXZvcml0ZXMgPSBtZXJnZWRGYWNldHMuZmlsdGVyKGZ1bmN0aW9uIChmKSB7IHJldHVybiBmLnBpbm5lZCA9PT0gdW5kZWZpbmVkIHx8ICFmLnBpbm5lZDsgfSk7XHJcbiAgICAgICAgZmF2b3JpdGVzLnNvcnQodGhpcy5jb21wYXJlRm4pO1xyXG4gICAgICAgIG5vbkZhdm9yaXRlcy5zb3J0KHRoaXMuY29tcGFyZUZuKTtcclxuICAgICAgICB2YXIgbm9PZkZhY2V0VG9TaG93ID0gdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLm5vT2ZGYWNldFRvU2hvdztcclxuICAgICAgICByZXR1cm4gdGhpcy50ZW1wYXRlRnVuY3Rpb25Gb3JGYWNldE1haW4oeyBmYXZvcml0ZXM6IGZhdm9yaXRlcywgbm9uRmF2b3JpdGVzOiBub25GYXZvcml0ZXMsIG5vT2ZGYWNldFRvU2hvdzogbm9PZkZhY2V0VG9TaG93IH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBGYWNldFRlbXBsYXRlU2VydmljZTtcclxufSgpKTtcclxuZXhwb3J0cy5GYWNldFRlbXBsYXRlU2VydmljZSA9IEZhY2V0VGVtcGxhdGVTZXJ2aWNlO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxNSAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvaGJzL2ZhY2V0LW1haW4uaGJzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBkeW5hbWljIGV4cG9ydHMgcHJvdmlkZWQgKi9cbi8qISBhbGwgZXhwb3J0cyB1c2VkICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBIYW5kbGViYXJzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgaGFuZGxlYmFycyAqLyAwKTtcbmZ1bmN0aW9uIF9fZGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiAob2JqLl9fZXNNb2R1bGUgPyBvYmpbXCJkZWZhdWx0XCJdIDogb2JqKTsgfVxubW9kdWxlLmV4cG9ydHMgPSAoSGFuZGxlYmFyc1tcImRlZmF1bHRcIl0gfHwgSGFuZGxlYmFycykudGVtcGxhdGUoe1wiMVwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMTtcblxuICByZXR1cm4gXCIgICAgPGRpdiBjbGFzcz1cXFwiZmFjZXQtYm9keSBndWkgZmx1aWQtaCBvZi1oaWRkZW4gZ3VpLWhpZGRlblxcXCI+XCJcbiAgICArICgoc3RhY2sxID0gY29udGFpbmVyLmludm9rZVBhcnRpYWwoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9zcmMvaGJzL2ZhY2V0LWJvZHkuaGJzICovIDQpLGRlcHRoMCx7XCJuYW1lXCI6XCJmYWNldC1ib2R5XCIsXCJkYXRhXCI6ZGF0YSxcImhlbHBlcnNcIjpoZWxwZXJzLFwicGFydGlhbHNcIjpwYXJ0aWFscyxcImRlY29yYXRvcnNcIjpjb250YWluZXIuZGVjb3JhdG9yc30pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiPC9kaXY+XFxuXCI7XG59LFwiM1wiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMTtcblxuICByZXR1cm4gXCIgICAgPGRpdiBjbGFzcz1cXFwiZmFjZXQtYm9keSBndWkgZmx1aWQtaCBvZi1oaWRkZW5cXFwiPlwiXG4gICAgKyAoKHN0YWNrMSA9IGNvbnRhaW5lci5pbnZva2VQYXJ0aWFsKF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vc3JjL2hicy9mYWNldC1ib2R5LmhicyAqLyA0KSxkZXB0aDAse1wibmFtZVwiOlwiZmFjZXQtYm9keVwiLFwiZGF0YVwiOmRhdGEsXCJoZWxwZXJzXCI6aGVscGVycyxcInBhcnRpYWxzXCI6cGFydGlhbHMsXCJkZWNvcmF0b3JzXCI6Y29udGFpbmVyLmRlY29yYXRvcnN9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIjwvZGl2PlxcblwiO1xufSxcImNvbXBpbGVyXCI6WzcsXCI+PSA0LjAuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBzdGFjazE7XG5cbiAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFwiZ3VpIGZsdWlkLWggXFxcIj5cXG5cIlxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzW1wiaWZcIl0uY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jb2xsYXBzZWQgOiBkZXB0aDApLHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDEsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5wcm9ncmFtKDMsIGRhdGEsIDApLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIjwvZGl2PlwiO1xufSxcInVzZVBhcnRpYWxcIjp0cnVlLFwidXNlRGF0YVwiOnRydWV9KTtcblxuLyoqKi8gfSksXG4vKiAxNiAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9oYnMvZmFjZXQtcGlubmVkLmhicyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBkeW5hbWljIGV4cG9ydHMgcHJvdmlkZWQgKi9cbi8qISBhbGwgZXhwb3J0cyB1c2VkICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBIYW5kbGViYXJzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgaGFuZGxlYmFycyAqLyAwKTtcbmZ1bmN0aW9uIF9fZGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiAob2JqLl9fZXNNb2R1bGUgPyBvYmpbXCJkZWZhdWx0XCJdIDogb2JqKTsgfVxubW9kdWxlLmV4cG9ydHMgPSAoSGFuZGxlYmFyc1tcImRlZmF1bHRcIl0gfHwgSGFuZGxlYmFycykudGVtcGxhdGUoe1wiMVwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhLGJsb2NrUGFyYW1zLGRlcHRocykge1xuICAgIHZhciBzdGFjazE7XG5cbiAgcmV0dXJuIFwiIFwiXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnMuZWFjaC5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmZhdm9yaXRlcyA6IGRlcHRoMCkse1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgyLCBkYXRhLCAwLCBibG9ja1BhcmFtcywgZGVwdGhzKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKTtcbn0sXCIyXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEsYmxvY2tQYXJhbXMsZGVwdGhzKSB7XG4gICAgdmFyIHN0YWNrMSwgYWxpYXMxPWNvbnRhaW5lci5sYW1iZGEsIGFsaWFzMj1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbiwgYWxpYXMzPWRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSk7XG5cbiAgcmV0dXJuIFwiXFxyXFxuPGRpdiBjbGFzcz1cXFwiaXRlbSBmYWNldC1pdGVtIGNvbGxhcHNlZCBndWkgbS10LTZcXFwiIGRhdGEtYXR0ci1uYW1lPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCI+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImNvbnRlbnRcXFwiPlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiZmFjZXQtaXRlbS1oZWFkZXIgZmx1aWQgZ3VpIGl0ZW0gZmxleCBqYy1zYlxcXCI+XFxyXFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImd1aSBndWktc3ViaGVhZGluZy0xIHByaW1hcnkgbS0wIGV4cGFuc2lvbi1pY29uIGN1cnNvci1wb2ludGVyXFxcIiB0YWJpbmRleD1cXFwiMFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgIFwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiIFwiXG4gICAgKyAoKHN0YWNrMSA9IF9fZGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3NyYy9oYnMvaGVscGVycy9TZWxlY3RlZEZpbHRlcnNDb3VudC50cyAqLyA1KSkuY2FsbChhbGlhczMsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmZhY2V0VmFsdWVzIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJTZWxlY3RlZEZpbHRlcnNDb3VudFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIlxcclxcbiAgICAgICAgICAgIDwvc3Bhbj5cXHJcXG4gICAgICAgICAgICA8c3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgPGkgZGF0YS1hdHRyLWlkPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuaWQgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIGNsYXNzPVxcXCJndWkgZ3VpLWljb24gc2VsZWN0YWJsZSBwcmltYXJ5IGd1aS1pY29uLXVucGluIG0tdC01IG0tci0xMCB1bnBpbi1pY29uIGN1cnNvci1wb2ludGVyXFxcIiB0YWJpbmRleD1cXFwiMFxcXCI+PC9pPlxcclxcbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cXFwiZ3VpIGd1aS1pY29uIHNlbGVjdGFibGUgZ3VpLWljb24tY2hldnJvbi11cCBwcmltYXJ5IGV4cGFuc2lvbi1pY29uIG0tdC01IG0tci0xMCBjdXJzb3ItcG9pbnRlclxcXCIgdGFiaW5kZXg9XFxcIjBcXFwiPjwvaT5cXHJcXG4gICAgICAgICAgICA8L3NwYW4+XFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImNsZWFyXFxcIj48L2Rpdj5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImRlc2NyaXB0aW9uIGd1aSBmYWNldC1pdGVtLWRlc2NyaXB0aW9uIG0tdC0yIG0tbC01XFxcIj5cXHJcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJndWkgZmx1aWQtdyBtLTAgcC0wXFxcIj5cXHJcXG5cIlxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzLmVhY2guY2FsbChhbGlhczMsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmZhY2V0VmFsdWVzIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDMsIGRhdGEsIDAsIGJsb2NrUGFyYW1zLCBkZXB0aHMpLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIiAgICAgICAgICAgICAgICBcIlxuICAgICsgKChzdGFjazEgPSBfX2RlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9zcmMvaGJzL2hlbHBlcnMvU2hvd01vcmVMZXNzTGluay50cyAqLyA2KSkuY2FsbChhbGlhczMsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmZhY2V0VmFsdWVzIDogZGVwdGgwKSwoZGVwdGhzWzFdICE9IG51bGwgPyBkZXB0aHNbMV0ubm9PZkZhY2V0VG9TaG93IDogZGVwdGhzWzFdKSx7XCJuYW1lXCI6XCJTaG93TW9yZUxlc3NMaW5rXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiXFxyXFxuICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgPC9kaXY+XFxyXFxuPC9kaXY+XFxyXFxuXCI7XG59LFwiM1wiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhLGJsb2NrUGFyYW1zLGRlcHRocykge1xuICAgIHZhciBzdGFjazEsIGFsaWFzMT1kZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pO1xuXG4gIHJldHVybiBcIiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJndWkgaXRlbSBcIlxuICAgICsgY29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb24oX19kZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vc3JjL2hicy9oZWxwZXJzL0NoZWNrTGVuZ3RoLnRzICovIDcpKS5jYWxsKGFsaWFzMSwoZGF0YSAmJiBkYXRhLmluZGV4KSwoZGVwdGhzWzJdICE9IG51bGwgPyBkZXB0aHNbMl0ubm9PZkZhY2V0VG9TaG93IDogZGVwdGhzWzJdKSx7XCJuYW1lXCI6XCJDaGVja0xlbmd0aFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSlcbiAgICArIFwiXFxcIj5cXHJcXG5cIlxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzW1wiaWZcIl0uY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnNlbGVjdGVkIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSg0LCBkYXRhLCAwLCBibG9ja1BhcmFtcywgZGVwdGhzKSxcImludmVyc2VcIjpjb250YWluZXIucHJvZ3JhbSg2LCBkYXRhLCAwLCBibG9ja1BhcmFtcywgZGVwdGhzKSxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCIgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuXCI7XG59LFwiNFwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhLGJsb2NrUGFyYW1zLGRlcHRocykge1xuICAgIHZhciBhbGlhczE9Y29udGFpbmVyLmxhbWJkYSwgYWxpYXMyPWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uLCBhbGlhczM9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KTtcblxuICByZXR1cm4gXCIgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBkYXRhLWF0dHItdmFsdWU9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5sYWJlbCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCIgdGl0bGU9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5sYWJlbCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIihcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY291bnQgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCIpXFxcIiBjbGFzcz1cXFwiZ3VpIGN1cnNvci1wb2ludGVyIG5vLXdyYXAgcHJpbWFyeSB0ZXh0LXNob3J0ZW4gbS0wXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XFxcImd1aSBmYWNldC12YWx1ZS1jaGVja2JveCBjdXJzb3ItcG9pbnRlciBtLWwtMFxcXCIgaWQ9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5sYWJlbCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIi1cIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGF0YSAmJiBkYXRhLmluZGV4KSwgZGVwdGgwKSlcbiAgICArIFwiXFxcIiBcIlxuICAgICsgYWxpYXMyKF9fZGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3NyYy9oYnMvaGVscGVycy9DaGVja2VkLnRzICovIDEpKS5jYWxsKGFsaWFzMywoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuc2VsZWN0ZWQgOiBkZXB0aDApLHtcIm5hbWVcIjpcIkNoZWNrZWRcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpXG4gICAgKyBcIiBcIlxuICAgICsgYWxpYXMyKF9fZGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3NyYy9oYnMvaGVscGVycy9EaXNhYmxlZC50cyAqLyAyKSkuY2FsbChhbGlhczMsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmRpc2FibGVkIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJEaXNhYmxlZFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSlcbiAgICArIFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGhzWzFdICE9IG51bGwgPyBkZXB0aHNbMV0uaWQgOiBkZXB0aHNbMV0pLCBkZXB0aDApKVxuICAgICsgXCI6XCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmxhYmVsIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiOlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aHNbMV0gIT0gbnVsbCA/IGRlcHRoc1sxXS50eXBlIDogZGVwdGhzWzFdKSwgZGVwdGgwKSlcbiAgICArIFwiXFxcIiB0eXBlPVxcXCJjaGVja2JveFxcXCIgLz4gXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmxhYmVsIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImd1aSBndWktc3ViaGVhZGluZy0xIG0tMFxcXCI+KFwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jb3VudCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIik8L3NwYW4+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxcclxcblwiO1xufSxcIjZcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSxibG9ja1BhcmFtcyxkZXB0aHMpIHtcbiAgICB2YXIgYWxpYXMxPWNvbnRhaW5lci5sYW1iZGEsIGFsaWFzMj1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbiwgYWxpYXMzPWRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSk7XG5cbiAgcmV0dXJuIFwiICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZGF0YS1hdHRyLXZhbHVlPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGFiZWwgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIHRpdGxlPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGFiZWwgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCIoXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNvdW50IDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiKVxcXCIgY2xhc3M9XFxcImd1aSBjdXJzb3ItcG9pbnRlciBuby13cmFwIHRleHQtc2hvcnRlbiBtLTBcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cXFwiZ3VpIGZhY2V0LXZhbHVlLWNoZWNrYm94IGN1cnNvci1wb2ludGVyIG0tbC0wXFxcIiBpZD1cXFwiXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmxhYmVsIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiLVwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkYXRhICYmIGRhdGEuaW5kZXgpLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIFwiXG4gICAgKyBhbGlhczIoX19kZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vc3JjL2hicy9oZWxwZXJzL0NoZWNrZWQudHMgKi8gMSkpLmNhbGwoYWxpYXMzLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5zZWxlY3RlZCA6IGRlcHRoMCkse1wibmFtZVwiOlwiQ2hlY2tlZFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSlcbiAgICArIFwiIFwiXG4gICAgKyBhbGlhczIoX19kZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vc3JjL2hicy9oZWxwZXJzL0Rpc2FibGVkLnRzICovIDIpKS5jYWxsKGFsaWFzMywoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuZGlzYWJsZWQgOiBkZXB0aDApLHtcIm5hbWVcIjpcIkRpc2FibGVkXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKVxuICAgICsgXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aHNbMV0gIT0gbnVsbCA/IGRlcHRoc1sxXS5pZCA6IGRlcHRoc1sxXSksIGRlcHRoMCkpXG4gICAgKyBcIjpcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGFiZWwgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCI6XCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoc1sxXSAhPSBudWxsID8gZGVwdGhzWzFdLnR5cGUgOiBkZXB0aHNbMV0pLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIHR5cGU9XFxcImNoZWNrYm94XFxcIiAvPiBcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGFiZWwgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiZ3VpIGd1aS1zdWJoZWFkaW5nLTEgbS0wXFxcIj4oXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNvdW50IDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiKTwvc3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XFxyXFxuXCI7XG59LFwiOFwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFwiZ3VpIG0tdC0xMFxcXCI+XFxyXFxuICAgIFxcclxcbjwvZGl2PlxcclxcblwiO1xufSxcImNvbXBpbGVyXCI6WzcsXCI+PSA0LjAuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSxibG9ja1BhcmFtcyxkZXB0aHMpIHtcbiAgICB2YXIgc3RhY2sxO1xuXG4gIHJldHVybiBcIjxkaXYgY2xhc3M9XFxcImd1aSBtLWItNSBtLXQtNVxcXCI+XFxyXFxuICAgIDxzcGFuIGNsYXNzPVxcXCJndWkgZ3VpLXN1YmhlYWRpbmctMVxcXCI+XFxyXFxuICAgICAgICBQSU5ORUQgRklMVEVSU1xcclxcbiAgICA8L3NwYW4+XFxyXFxuPC9kaXY+XFxyXFxuXCJcbiAgICArICgoc3RhY2sxID0gaGVscGVyc1tcImlmXCJdLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSwoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5mYXZvcml0ZXMgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLmxlbmd0aCA6IHN0YWNrMSkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMSwgZGF0YSwgMCwgYmxvY2tQYXJhbXMsIGRlcHRocyksXCJpbnZlcnNlXCI6Y29udGFpbmVyLnByb2dyYW0oOCwgZGF0YSwgMCwgYmxvY2tQYXJhbXMsIGRlcHRocyksXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIik7XG59LFwidXNlRGF0YVwiOnRydWUsXCJ1c2VEZXB0aHNcIjp0cnVlfSk7XG5cbi8qKiovIH0pLFxuLyogMTcgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9oYnMvZmFjZXQtdW5waW5uZWQuaGJzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZHluYW1pYyBleHBvcnRzIHByb3ZpZGVkICovXG4vKiEgYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgSGFuZGxlYmFycyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIGhhbmRsZWJhcnMgKi8gMCk7XG5mdW5jdGlvbiBfX2RlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgKG9iai5fX2VzTW9kdWxlID8gb2JqW1wiZGVmYXVsdFwiXSA6IG9iaik7IH1cbm1vZHVsZS5leHBvcnRzID0gKEhhbmRsZWJhcnNbXCJkZWZhdWx0XCJdIHx8IEhhbmRsZWJhcnMpLnRlbXBsYXRlKHtcIjFcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSxibG9ja1BhcmFtcyxkZXB0aHMpIHtcbiAgICB2YXIgc3RhY2sxLCBhbGlhczE9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSwgYWxpYXMyPWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uLCBhbGlhczM9Y29udGFpbmVyLmxhbWJkYTtcblxuICByZXR1cm4gXCI8ZGl2IGNsYXNzPVxcXCJpdGVtIGZhY2V0LWl0ZW0gZ3VpIG0tdC02IFwiXG4gICAgKyBhbGlhczIoX19kZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vc3JjL2hicy9oZWxwZXJzL0NvbGxhcHNlZC50cyAqLyAxOCkpLmNhbGwoYWxpYXMxLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jb2xsYXBzZWQgOiBkZXB0aDApLHtcIm5hbWVcIjpcIkNvbGxhcHNlZFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSlcbiAgICArIFwiXFxcIiBkYXRhLWF0dHItaWQ9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMzKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5pZCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCIgZGF0YS1hdHRyLW5hbWU9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMzKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiXFxcIj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiY29udGVudFxcXCI+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmYWNldC1pdGVtLWhlYWRlciBmbHVpZCBndWkgaXRlbSBmbGV4IGpjLXNiXFxcIj5cXHJcXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiZ3VpIGd1aS1zdWJoZWFkaW5nLTEgcHJpbWFyeSBtLTAgZXhwYW5zaW9uLWljb24gY3Vyc29yLXBvaW50ZXJcXFwiIHRhYmluZGV4PVxcXCIwXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgXCJcbiAgICArIGFsaWFzMihhbGlhczMoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCIgXCJcbiAgICArICgoc3RhY2sxID0gX19kZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vc3JjL2hicy9oZWxwZXJzL1NlbGVjdGVkRmlsdGVyc0NvdW50LnRzICovIDUpKS5jYWxsKGFsaWFzMSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuZmFjZXRWYWx1ZXMgOiBkZXB0aDApLHtcIm5hbWVcIjpcIlNlbGVjdGVkRmlsdGVyc0NvdW50XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiXFxyXFxuICAgICAgICAgICAgPC9zcGFuPlxcclxcbiAgICAgICAgICAgIDxzcGFuPlxcclxcbiAgICAgICAgICAgICAgICA8aSBkYXRhLWF0dHItaWQ9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMzKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5pZCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCIgY2xhc3M9XFxcImd1aSBndWktaWNvbiBzZWxlY3RhYmxlIHByaW1hcnkgZ3VpLWljb24tcGluIG0tdC01IHBpbi1pY29uIG0tci0xMCBjdXJzb3ItcG9pbnRlclxcXCIgdGFiaW5kZXg9XFxcIjBcXFwiPjwvaT5cXHJcXG5cIlxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzW1wiaWZcIl0uY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNvbGxhcHNlZCA6IGRlcHRoMCkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMiwgZGF0YSwgMCwgYmxvY2tQYXJhbXMsIGRlcHRocyksXCJpbnZlcnNlXCI6Y29udGFpbmVyLnByb2dyYW0oNCwgZGF0YSwgMCwgYmxvY2tQYXJhbXMsIGRlcHRocyksXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiICAgICAgICAgICAgPC9zcGFuPlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjbGVhclxcXCI+PC9kaXY+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJkZXNjcmlwdGlvbiBndWkgXCJcbiAgICArIGFsaWFzMihfX2RlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9zcmMvaGJzL2hlbHBlcnMvSGlkZGVuLnRzICovIDE5KSkuY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNvbGxhcHNlZCA6IGRlcHRoMCksdHJ1ZSx7XCJuYW1lXCI6XCJIaWRkZW5cIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpXG4gICAgKyBcIiBmYWNldC1pdGVtLWRlc2NyaXB0aW9uIG0tdC0yIG0tbC01XFxcIj5cXHJcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJndWkgZmx1aWQtdyBtLTAgcC0wXFxcIj5cXHJcXG5cIlxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzLmVhY2guY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmZhY2V0VmFsdWVzIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDYsIGRhdGEsIDAsIGJsb2NrUGFyYW1zLCBkZXB0aHMpLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIiAgICAgICAgICAgICAgICBcIlxuICAgICsgKChzdGFjazEgPSBfX2RlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9zcmMvaGJzL2hlbHBlcnMvU2hvd01vcmVMZXNzTGluay50cyAqLyA2KSkuY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmZhY2V0VmFsdWVzIDogZGVwdGgwKSwoZGVwdGhzWzFdICE9IG51bGwgPyBkZXB0aHNbMV0ubm9PZkZhY2V0VG9TaG93IDogZGVwdGhzWzFdKSx7XCJuYW1lXCI6XCJTaG93TW9yZUxlc3NMaW5rXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiXFxyXFxuICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgPC9kaXY+XFxyXFxuPC9kaXY+XFxyXFxuXCI7XG59LFwiMlwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgcmV0dXJuIFwiICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cXFwiZ3VpIGd1aS1pY29uIHNlbGVjdGFibGUgZ3VpLWljb24tY2hldnJvbi11cCBwcmltYXJ5IGV4cGFuc2lvbi1pY29uIG0tdC01IG0tci0xMCBjdXJzb3ItcG9pbnRlclxcXCIgdGFiaW5kZXg9XFxcIjBcXFwiPjwvaT5cXHJcXG5cIjtcbn0sXCI0XCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICByZXR1cm4gXCIgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJndWkgZ3VpLWljb24gc2VsZWN0YWJsZSBndWktaWNvbi1jaGV2cm9uLWRvd24gcHJpbWFyeSBleHBhbnNpb24taWNvbiBtLXQtNSBtLXItMTAgY3Vyc29yLXBvaW50ZXJcXFwiIHRhYmluZGV4PVxcXCIwXFxcIj48L2k+XFxyXFxuXCI7XG59LFwiNlwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhLGJsb2NrUGFyYW1zLGRlcHRocykge1xuICAgIHZhciBzdGFjazEsIGFsaWFzMT1kZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pO1xuXG4gIHJldHVybiBcIiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJndWkgaXRlbSBcIlxuICAgICsgY29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb24oX19kZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vc3JjL2hicy9oZWxwZXJzL0NoZWNrTGVuZ3RoLnRzICovIDcpKS5jYWxsKGFsaWFzMSwoZGF0YSAmJiBkYXRhLmluZGV4KSwoZGVwdGhzWzJdICE9IG51bGwgPyBkZXB0aHNbMl0ubm9PZkZhY2V0VG9TaG93IDogZGVwdGhzWzJdKSx7XCJuYW1lXCI6XCJDaGVja0xlbmd0aFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSlcbiAgICArIFwiXFxcIj5cXHJcXG5cIlxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzW1wiaWZcIl0uY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnNlbGVjdGVkIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSg3LCBkYXRhLCAwLCBibG9ja1BhcmFtcywgZGVwdGhzKSxcImludmVyc2VcIjpjb250YWluZXIucHJvZ3JhbSg5LCBkYXRhLCAwLCBibG9ja1BhcmFtcywgZGVwdGhzKSxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCIgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuXCI7XG59LFwiN1wiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhLGJsb2NrUGFyYW1zLGRlcHRocykge1xuICAgIHZhciBhbGlhczE9Y29udGFpbmVyLmxhbWJkYSwgYWxpYXMyPWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uLCBhbGlhczM9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KTtcblxuICByZXR1cm4gXCIgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBkYXRhLWF0dHItdmFsdWU9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5sYWJlbCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCIgdGl0bGU9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5sYWJlbCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIihcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY291bnQgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCIpXFxcIiBjbGFzcz1cXFwiZ3VpIGN1cnNvci1wb2ludGVyIG5vLXdyYXAgcHJpbWFyeSB0ZXh0LXNob3J0ZW4gbS0wXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XFxcImd1aSBmYWNldC12YWx1ZS1jaGVja2JveCBjdXJzb3ItcG9pbnRlciBtLWwtMFxcXCIgaWQ9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5sYWJlbCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIi1cIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGF0YSAmJiBkYXRhLmluZGV4KSwgZGVwdGgwKSlcbiAgICArIFwiXFxcIiBcIlxuICAgICsgYWxpYXMyKF9fZGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3NyYy9oYnMvaGVscGVycy9DaGVja2VkLnRzICovIDEpKS5jYWxsKGFsaWFzMywoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuc2VsZWN0ZWQgOiBkZXB0aDApLHtcIm5hbWVcIjpcIkNoZWNrZWRcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpXG4gICAgKyBcIiBcIlxuICAgICsgYWxpYXMyKF9fZGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3NyYy9oYnMvaGVscGVycy9EaXNhYmxlZC50cyAqLyAyKSkuY2FsbChhbGlhczMsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmRpc2FibGVkIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJEaXNhYmxlZFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSlcbiAgICArIFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGhzWzFdICE9IG51bGwgPyBkZXB0aHNbMV0uaWQgOiBkZXB0aHNbMV0pLCBkZXB0aDApKVxuICAgICsgXCI6XCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmxhYmVsIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiOlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aHNbMV0gIT0gbnVsbCA/IGRlcHRoc1sxXS50eXBlIDogZGVwdGhzWzFdKSwgZGVwdGgwKSlcbiAgICArIFwiXFxcIiB0eXBlPVxcXCJjaGVja2JveFxcXCIgLz4gXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmxhYmVsIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImd1aSBndWktc3ViaGVhZGluZy0xIG0tMFxcXCI+KFwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jb3VudCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIik8L3NwYW4+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxcclxcblwiO1xufSxcIjlcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSxibG9ja1BhcmFtcyxkZXB0aHMpIHtcbiAgICB2YXIgYWxpYXMxPWNvbnRhaW5lci5sYW1iZGEsIGFsaWFzMj1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbiwgYWxpYXMzPWRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSk7XG5cbiAgcmV0dXJuIFwiICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZGF0YS1hdHRyLXZhbHVlPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGFiZWwgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIHRpdGxlPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGFiZWwgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCIoXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNvdW50IDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiKVxcXCIgY2xhc3M9XFxcImd1aSBjdXJzb3ItcG9pbnRlciBuby13cmFwIHRleHQtc2hvcnRlbiBtLTBcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cXFwiZ3VpIGZhY2V0LXZhbHVlLWNoZWNrYm94IGN1cnNvci1wb2ludGVyIG0tbC0wXFxcIiBpZD1cXFwiXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmxhYmVsIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiLVwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkYXRhICYmIGRhdGEuaW5kZXgpLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIFwiXG4gICAgKyBhbGlhczIoX19kZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vc3JjL2hicy9oZWxwZXJzL0NoZWNrZWQudHMgKi8gMSkpLmNhbGwoYWxpYXMzLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5zZWxlY3RlZCA6IGRlcHRoMCkse1wibmFtZVwiOlwiQ2hlY2tlZFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSlcbiAgICArIFwiIFwiXG4gICAgKyBhbGlhczIoX19kZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vc3JjL2hicy9oZWxwZXJzL0Rpc2FibGVkLnRzICovIDIpKS5jYWxsKGFsaWFzMywoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuZGlzYWJsZWQgOiBkZXB0aDApLHtcIm5hbWVcIjpcIkRpc2FibGVkXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKVxuICAgICsgXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aHNbMV0gIT0gbnVsbCA/IGRlcHRoc1sxXS5pZCA6IGRlcHRoc1sxXSksIGRlcHRoMCkpXG4gICAgKyBcIjpcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGFiZWwgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCI6XCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoc1sxXSAhPSBudWxsID8gZGVwdGhzWzFdLnR5cGUgOiBkZXB0aHNbMV0pLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIHR5cGU9XFxcImNoZWNrYm94XFxcIiAvPiBcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGFiZWwgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiZ3VpIGd1aS1zdWJoZWFkaW5nLTEgbS0wXFxcIj4oXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNvdW50IDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiKTwvc3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XFxyXFxuXCI7XG59LFwiY29tcGlsZXJcIjpbNyxcIj49IDQuMC4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhLGJsb2NrUGFyYW1zLGRlcHRocykge1xuICAgIHZhciBzdGFjazE7XG5cbiAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFwiZ3VpIG0tYi01IG0tdC0xMCBcXFwiPlxcclxcbiAgICA8c3BhbiBjbGFzcz1cXFwiZ3VpIGd1aS1zdWJoZWFkaW5nLTFcXFwiPlxcclxcbiAgICAgICAgQUxMIEZJTFRFUlNcXHJcXG4gICAgPC9zcGFuPlxcclxcbjwvZGl2PlxcclxcblwiXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnMuZWFjaC5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5vbkZhdm9yaXRlcyA6IGRlcHRoMCkse1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgxLCBkYXRhLCAwLCBibG9ja1BhcmFtcywgZGVwdGhzKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKTtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZSxcInVzZURlcHRoc1wiOnRydWV9KTtcblxuLyoqKi8gfSksXG4vKiAxOCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvaGJzL2hlbHBlcnMvQ29sbGFwc2VkLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBkeW5hbWljIGV4cG9ydHMgcHJvdmlkZWQgKi9cbi8qISBhbGwgZXhwb3J0cyB1c2VkICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIGNvbGxhcHNlZCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiIGNvbGxhcHNlZCBcIjtcclxuICAgIH1cclxuICAgIHJldHVybiBcIlwiO1xyXG59O1xyXG5leHBvcnRzLmRlZmF1bHQgPSBjb2xsYXBzZWQ7XHJcblxuXG4vKioqLyB9KSxcbi8qIDE5ICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9oYnMvaGVscGVycy9IaWRkZW4udHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgaGlkZGVuID0gZnVuY3Rpb24gKHZhbHVlLCBpbnZlcnQpIHtcclxuICAgIHZhciBoaWRlO1xyXG4gICAgaWYgKGludmVydCkge1xyXG4gICAgICAgIGlmICghdmFsdWUpIHtcclxuICAgICAgICAgICAgaGlkZSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBoaWRlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGhpZGUgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaGlkZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBoaWRlID8gXCIgZ3VpLWhpZGRlbiBcIiA6IFwiIFwiO1xyXG59O1xyXG5leHBvcnRzLmRlZmF1bHQgPSBoaWRkZW47XHJcblxuXG4vKioqLyB9KSxcbi8qIDIwICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3RzL2NvbmZpZy9GYWNldENvbmZpZ1N0b3JlLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgRmFjZXRDb25maWdTdG9yZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEZhY2V0Q29uZmlnU3RvcmUob3B0aW9ucykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5kZWZhdWx0RmFjZXRPcHRpb25zID0ge1xyXG4gICAgICAgICAgICBhbmltYXRpb25UaW1lOiAyMDAsXHJcbiAgICAgICAgICAgIGNvbGxhcHNlZDogZmFsc2UsXHJcbiAgICAgICAgICAgIGNvbnRhaW5lckVsZW1lbnQ6IG51bGwsXHJcbiAgICAgICAgICAgIGZhY2V0Q29uZmlnOiBbXSxcclxuICAgICAgICAgICAgbm9PZkZhY2V0VG9TaG93OiA1LFxyXG4gICAgICAgICAgICAvLyBmYWNldHM6IFtdLFxyXG4gICAgICAgICAgICBvbkZpbHRlckNoYW5nZTogZnVuY3Rpb24gKGtleSwgdmFsdWUsIGFjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgLy8gSWdub3JlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uUGluVW5waW46IGZ1bmN0aW9uIChrZXksIHBpbikge1xyXG4gICAgICAgICAgICAgICAgLy8gSWdub3JlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmV4dGVuZE9wdGlvbnMgPSBmdW5jdGlvbiAoaW5wdXRPcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5vcHRpb25zID0galF1ZXJ5LmV4dGVuZCh7fSwgX3RoaXMuZGVmYXVsdEZhY2V0T3B0aW9ucywgaW5wdXRPcHRpb25zKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZXh0ZW5kT3B0aW9ucyhvcHRpb25zKTtcclxuICAgICAgICBpZiAob3B0aW9ucy5jb250YWluZXJFbGVtZW50ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBsZWFzZSBQcm92aWRlIGEgdmFsaWQgY29udGFpbmVyIEVsZW1lbnQgb2JqZWN0XCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGYWNldENvbmZpZ1N0b3JlLnByb3RvdHlwZSwgXCJPcHRpb25zXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMub3B0aW9uczsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gRmFjZXRDb25maWdTdG9yZTtcclxufSgpKTtcclxuZXhwb3J0cy5GYWNldENvbmZpZ1N0b3JlID0gRmFjZXRDb25maWdTdG9yZTtcclxuXG5cbi8qKiovIH0pLFxuLyogMjEgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvdHMvZXZlbnRoYW5kbGVycy9FeHBhbmRDb2xsYXBzZUZhY2V0c0hhbmRsZXIudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZHluYW1pYyBleHBvcnRzIHByb3ZpZGVkICovXG4vKiEgYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBFeHBhbmRDb2xsYXBzZU1hbmFnZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vRXhwYW5kQ29sbGFwc2VNYW5hZ2VyICovIDkpO1xyXG52YXIgU2hvd0hpZGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vU2hvd0hpZGUgKi8gMyk7XHJcbnZhciBFeHBhbmRDb2xsYXBzZUZhY2V0c0hhbmRsZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBFeHBhbmRDb2xsYXBzZUZhY2V0c0hhbmRsZXIoZWxlbWVudCwgY29uZmlnU3RvcmUsIHRlbXBsYXRlU2VydmljZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcclxuICAgICAgICB0aGlzLmNvbmZpZ1N0b3JlID0gY29uZmlnU3RvcmU7XHJcbiAgICAgICAgdGhpcy50ZW1wbGF0ZVNlcnZpY2UgPSB0ZW1wbGF0ZVNlcnZpY2U7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVWaXNpYmlsaXR5T2ZBbGwgPSBmdW5jdGlvbiAoZXZlbnQsIGhpZGVTaG93KSB7XHJcbiAgICAgICAgICAgIHZhciBjb2RlID0gZXZlbnQua2V5Q29kZSB8fCBldmVudC53aGljaDtcclxuICAgICAgICAgICAgaWYgKGV2ZW50LnR5cGUgIT09IFwiY2xpY2tcIiAmJiAoZXZlbnQudHlwZSA9PT0gXCJrZXl1cFwiICYmIGNvZGUgIT09IDEzICYmIGNvZGUgIT09IDMyKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF90aGlzLmVsZW1lbnQuZmluZChcIi5mYWNldC1pdGVtLWhlYWRlclwiKS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgRXhwYW5kQ29sbGFwc2VNYW5hZ2VyXzEuRXhwYW5kQ29sbGFwc2VNYW5hZ2VyLkNvbnRyb2xWaXNpYmlsaXR5T2ZGaWx0ZXIoalF1ZXJ5KGVsZW1lbnQpLCBoaWRlU2hvdyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBoaWRlU2hvdyA9PT0gU2hvd0hpZGVfMS5TaG93SGlkZS5TaG93ID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgICAgICB2YXIgZGF0YSA9IF90aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMuZmFjZXRDb25maWc7XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgZGF0YV8xID0gZGF0YTsgX2kgPCBkYXRhXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZmFjZXQgPSBkYXRhXzFbX2ldO1xyXG4gICAgICAgICAgICAgICAgZmFjZXQuY29sbGFwc2VkID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmhhbmRsZVZpc2liaWxpdHlPZk9uZSA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICB2YXIgY29kZSA9IGV2ZW50LmtleUNvZGUgfHwgZXZlbnQud2hpY2g7XHJcbiAgICAgICAgICAgIGlmIChldmVudC50eXBlICE9PSBcImNsaWNrXCIgJiYgKGV2ZW50LnR5cGUgPT09IFwia2V5dXBcIiAmJiBjb2RlICE9PSAxMyAmJiBjb2RlICE9PSAzMikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0galF1ZXJ5KGV2ZW50LnRhcmdldCk7XHJcbiAgICAgICAgICAgIHZhciBoZWFkZXJFbGVtZW50ID0gdGFyZ2V0LnBhcmVudHMoXCIuZmFjZXQtaXRlbS1oZWFkZXJcIik7XHJcbiAgICAgICAgICAgIHZhciBwYXJlbnQgPSBoZWFkZXJFbGVtZW50LnBhcmVudHMoXCIuZmFjZXQtaXRlbVwiKTtcclxuICAgICAgICAgICAgdmFyIGJvb2wgPSB0YXJnZXQuaGFzQ2xhc3MoXCJndWktaWNvbi1jaGV2cm9uLXVwXCIpO1xyXG4gICAgICAgICAgICB2YXIgaWQgPSBwYXJlbnQuYXR0cihcImRhdGEtYXR0ci1pZFwiKTtcclxuICAgICAgICAgICAgdmFyIGRhdGEgPSBfdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLmZhY2V0Q29uZmlnO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGRhdGFfMiA9IGRhdGE7IF9pIDwgZGF0YV8yLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGZhY2V0ID0gZGF0YV8yW19pXTtcclxuICAgICAgICAgICAgICAgIGlmIChmYWNldC5pZCA9PT0gaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBmYWNldC5jb2xsYXBzZWQgPSBib29sO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIEV4cGFuZENvbGxhcHNlTWFuYWdlcl8xLkV4cGFuZENvbGxhcHNlTWFuYWdlci5Db250cm9sVmlzaWJpbGl0eU9mRmlsdGVyKGhlYWRlckVsZW1lbnQsIFNob3dIaWRlXzEuU2hvd0hpZGUuVG9nZ2xlKTtcclxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIEV4cGFuZENvbGxhcHNlRmFjZXRzSGFuZGxlci5wcm90b3R5cGUuUmVnaXN0ZXJEb21IYW5kbGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50Lm9uKFwiY2xpY2tcIiwgXCIuZXhwYW5kLWFsbFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgX3RoaXMuaGFuZGxlVmlzaWJpbGl0eU9mQWxsKGV2ZW50LCBTaG93SGlkZV8xLlNob3dIaWRlLlNob3cpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5vbihcImtleXVwXCIsIFwiLmV4cGFuZC1hbGxcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIF90aGlzLmhhbmRsZVZpc2liaWxpdHlPZkFsbChldmVudCwgU2hvd0hpZGVfMS5TaG93SGlkZS5TaG93KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmVsZW1lbnQub24oXCJjbGlja1wiLCBcIi5jb2xsYXBzZS1hbGxcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIF90aGlzLmhhbmRsZVZpc2liaWxpdHlPZkFsbChldmVudCwgU2hvd0hpZGVfMS5TaG93SGlkZS5IaWRlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmVsZW1lbnQub24oXCJrZXl1cFwiLCBcIi5jb2xsYXBzZS1hbGxcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIF90aGlzLmhhbmRsZVZpc2liaWxpdHlPZkFsbChldmVudCwgU2hvd0hpZGVfMS5TaG93SGlkZS5IaWRlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmVsZW1lbnQub24oXCJjbGlja1wiLCBcIi5mYWNldC1pdGVtLWhlYWRlciAuZXhwYW5zaW9uLWljb25cIiwgdGhpcy5oYW5kbGVWaXNpYmlsaXR5T2ZPbmUpO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5vbihcImtleXVwXCIsIFwiLmZhY2V0LWl0ZW0taGVhZGVyIC5leHBhbnNpb24taWNvblwiLCB0aGlzLmhhbmRsZVZpc2liaWxpdHlPZk9uZSk7XHJcbiAgICB9O1xyXG4gICAgRXhwYW5kQ29sbGFwc2VGYWNldHNIYW5kbGVyLnByb3RvdHlwZS5vblJlc2l6ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcclxuICAgIH07XHJcbiAgICBFeHBhbmRDb2xsYXBzZUZhY2V0c0hhbmRsZXIucHJvdG90eXBlLm9uRG9jdW1lbnRDbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIC8vIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBFeHBhbmRDb2xsYXBzZUZhY2V0c0hhbmRsZXI7XHJcbn0oKSk7XHJcbmV4cG9ydHMuRXhwYW5kQ29sbGFwc2VGYWNldHNIYW5kbGVyID0gRXhwYW5kQ29sbGFwc2VGYWNldHNIYW5kbGVyO1xyXG5cblxuLyoqKi8gfSksXG4vKiAyMiAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy90cy9ldmVudGhhbmRsZXJzL0ZhY2V0QWN0aW9uSGFuZGxlci50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBkeW5hbWljIGV4cG9ydHMgcHJvdmlkZWQgKi9cbi8qISBhbGwgZXhwb3J0cyB1c2VkICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIEZpbHRlckFjdGlvblR5cGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL21vZGVscy9GaWx0ZXJBY3Rpb25UeXBlICovIDEwKTtcclxudmFyIEZhY2V0QWN0aW9uSGFuZGxlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEZhY2V0QWN0aW9uSGFuZGxlcihlbGVtZW50LCBjb25maWdTdG9yZSkge1xyXG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICAgICAgdGhpcy5jb25maWdTdG9yZSA9IGNvbmZpZ1N0b3JlO1xyXG4gICAgfVxyXG4gICAgRmFjZXRBY3Rpb25IYW5kbGVyLnByb3RvdHlwZS5SZWdpc3RlckRvbUhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLmVsZW1lbnQub24oXCJjaGFuZ2VcIiwgXCIuZmFjZXQtYm9keSAuZmFjZXQtaXRlbS1kZXNjcmlwdGlvbiAuZmFjZXQtdmFsdWUtY2hlY2tib3hcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIHZhciBlbGVtZW50ID0galF1ZXJ5KGV2ZW50LnRhcmdldCk7XHJcbiAgICAgICAgICAgIHZhciB2YWxTdHIgPSBlbGVtZW50LnZhbCgpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHZhbFN0ci5zcGxpdChcIjpcIik7XHJcbiAgICAgICAgICAgIHZhciBjaGVja2VkID0gZWxlbWVudC5pcyhcIjpjaGVja2VkXCIpO1xyXG4gICAgICAgICAgICB2YXIgYWN0aW9uID0gY2hlY2tlZCA/IEZpbHRlckFjdGlvblR5cGVfMS5GaWx0ZXJBY3Rpb25UeXBlLkFkZCA6IEZpbHRlckFjdGlvblR5cGVfMS5GaWx0ZXJBY3Rpb25UeXBlLk1pbnVzO1xyXG4gICAgICAgICAgICBfdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLm9uRmlsdGVyQ2hhbmdlKHZhbHVlWzBdLCB2YWx1ZVsxXSwgYWN0aW9uLCB2YWx1ZVsyXSwgZmFsc2UpO1xyXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBGYWNldEFjdGlvbkhhbmRsZXIucHJvdG90eXBlLm9uUmVzaXplID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4gICAgfTtcclxuICAgIEZhY2V0QWN0aW9uSGFuZGxlci5wcm90b3R5cGUub25Eb2N1bWVudENsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgLy8gdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEZhY2V0QWN0aW9uSGFuZGxlcjtcclxufSgpKTtcclxuZXhwb3J0cy5GYWNldEFjdGlvbkhhbmRsZXIgPSBGYWNldEFjdGlvbkhhbmRsZXI7XHJcblxuXG4vKioqLyB9KSxcbi8qIDIzICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3RzL2V2ZW50aGFuZGxlcnMvRmFjZXRTZWFyY2hIYW5kbGVyLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgRXhwYW5kQ29sbGFwc2VNYW5hZ2VyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0V4cGFuZENvbGxhcHNlTWFuYWdlciAqLyA5KTtcclxudmFyIFNob3dIaWRlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1Nob3dIaWRlICovIDMpO1xyXG52YXIgRmFjZXRTZWFyY2hIYW5kbGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRmFjZXRTZWFyY2hIYW5kbGVyKGVsZW1lbnQsIGNvbmZpZ1N0b3JlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgICAgIHRoaXMuY29uZmlnU3RvcmUgPSBjb25maWdTdG9yZTtcclxuICAgICAgICB0aGlzLmhhbmRsZVNlYXJjaCA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IGpRdWVyeShldmVudC50YXJnZXQpO1xyXG4gICAgICAgICAgICB2YXIgdmFsID0gZWxlbWVudFxyXG4gICAgICAgICAgICAgICAgLnZhbCgpXHJcbiAgICAgICAgICAgICAgICAudG9TdHJpbmcoKVxyXG4gICAgICAgICAgICAgICAgLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgIF90aGlzXHJcbiAgICAgICAgICAgICAgICAuZWxlbWVudFxyXG4gICAgICAgICAgICAgICAgLmZpbmQoXCIuZmFjZXQtbGlzdCAuZmFjZXQtaXRlbVwiKVxyXG4gICAgICAgICAgICAgICAgLmVhY2goZnVuY3Rpb24gKGksIGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBmYWNldEl0ZW0gPSBqUXVlcnkoZSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZmFjZXROYW1lTWF0Y2ggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHZhciBpbnB1dFZhbHVlQmxhbmsgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHZhbHVlIGlzIGVtcHR5XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsID09PSB1bmRlZmluZWQgfHwgdmFsID09PSBudWxsIHx8IHZhbC50cmltKCkgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnB1dFZhbHVlQmxhbmsgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gQ29tcGFyZSB2YWx1ZSB3aXRoIGZhY2V0IG5hbWVcclxuICAgICAgICAgICAgICAgIGlmICghaW5wdXRWYWx1ZUJsYW5rICYmIGZhY2V0SXRlbS5hdHRyKFwiZGF0YS1hdHRyLW5hbWVcIikudG9Mb3dlckNhc2UoKS5pbmRleE9mKHZhbCkgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmFjZXROYW1lTWF0Y2ggPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGlucHV0VmFsdWVCbGFuaykge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5lbGVtZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKFwiLnNob3ctbW9yZS1saW5rXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uIChpbmRleCwgc2h3TW9yZUVsZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGpRdWVyeShzaHdNb3JlRWxlbSkuaGFzQ2xhc3MoXCJndWktaGlkZGVuXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkoc2h3TW9yZUVsZW0pLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeShzaHdNb3JlRWxlbSkuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmVsZW1lbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoXCIuc2hvdy1sZXNzLWxpbmtcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmVhY2goZnVuY3Rpb24gKGluZGV4LCBzaG93TGVzc0xpbmspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGpRdWVyeShzaG93TGVzc0xpbmspLmhhc0NsYXNzKFwiZ3VpLWhpZGRlblwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5KHNob3dMZXNzTGluaykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5KHNob3dMZXNzTGluaykuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZWxlbWVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmluZChcIi5zaG93LW1vcmUtbGlua1wiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5lbGVtZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKFwiLnNob3ctbGVzcy1saW5rXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBDb21wYXJlIHZhbHVlcyBhZ2FpbnN0IGNoaWxkIHZhbHVlc1xyXG4gICAgICAgICAgICAgICAgdmFyIGZhY2V0Q2hpbGRNYXRjaCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgZmFjZXRJdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoXCJsYWJlbFwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uIChqLCBsYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBsYWJlbEVsZW0gPSBqUXVlcnkobGFiZWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dFZhbHVlQmxhbmspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxFbGVtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucGFyZW50KFwiLmV4dHJhLWZpbHRlclwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsRWxlbVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnBhcmVudChcIi5leHRyYS1maWx0ZXJcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmYWNldE5hbWVNYXRjaCB8fCBpbnB1dFZhbHVlQmxhbmspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxFbGVtLnNob3coKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YXIgbGFiZWxWYWx1ZSA9IGxhYmVsRWxlbS5hdHRyKFwiZGF0YS1hdHRyLXZhbHVlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsYWJlbFZhbHVlLnRvTG93ZXJDYXNlKCkuaW5kZXhPZih2YWwpID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbEVsZW0uaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmFjZXRDaGlsZE1hdGNoID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxFbGVtLnNob3coKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIC8vIFNob3cgaGlkZSBGYWNldCBJdGVtIGl0c2VsZlxyXG4gICAgICAgICAgICAgICAgdmFyIGhlYWRlckVsbWVudCA9IGZhY2V0SXRlbS5maW5kKFwiLmZhY2V0LWl0ZW0taGVhZGVyXCIpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbGxhcHNlZCA9IGZhY2V0SXRlbS5oYXNDbGFzcyhcImNvbGxhcHNlZFwiKTtcclxuICAgICAgICAgICAgICAgIGlmIChmYWNldE5hbWVNYXRjaCB8fCBmYWNldENoaWxkTWF0Y2ggfHwgaW5wdXRWYWx1ZUJsYW5rKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmFjZXRJdGVtLmZhZGVJbihfdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLmFuaW1hdGlvblRpbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmFjZXRJdGVtLmZhZGVPdXQoX3RoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5hbmltYXRpb25UaW1lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIEV4cGFuZCBDb2xsYXBzZSBGYWNldFxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbGxhcHNlZCB8fCBmYWNldE5hbWVNYXRjaCB8fCBmYWNldENoaWxkTWF0Y2gpIHtcclxuICAgICAgICAgICAgICAgICAgICBFeHBhbmRDb2xsYXBzZU1hbmFnZXJfMS5FeHBhbmRDb2xsYXBzZU1hbmFnZXIuQ29udHJvbFZpc2liaWxpdHlPZkZpbHRlcihoZWFkZXJFbG1lbnQsIFNob3dIaWRlXzEuU2hvd0hpZGUuU2hvdyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBFeHBhbmRDb2xsYXBzZU1hbmFnZXJfMS5FeHBhbmRDb2xsYXBzZU1hbmFnZXIuQ29udHJvbFZpc2liaWxpdHlPZkZpbHRlcihoZWFkZXJFbG1lbnQsIFNob3dIaWRlXzEuU2hvd0hpZGUuSGlkZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgRmFjZXRTZWFyY2hIYW5kbGVyLnByb3RvdHlwZS5SZWdpc3RlckRvbUhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpc1xyXG4gICAgICAgICAgICAuZWxlbWVudFxyXG4gICAgICAgICAgICAub24oXCJrZXl1cFwiLCBcIi5maWx0ZXItc2VhcmNoLWlucHV0XCIsIHRoaXMuaGFuZGxlU2VhcmNoKTtcclxuICAgIH07XHJcbiAgICBGYWNldFNlYXJjaEhhbmRsZXIucHJvdG90eXBlLm9uUmVzaXplID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIElnbm9yZVxyXG4gICAgfTtcclxuICAgIEZhY2V0U2VhcmNoSGFuZGxlci5wcm90b3R5cGUub25Eb2N1bWVudENsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgLy8gSWdub3JlXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEZhY2V0U2VhcmNoSGFuZGxlcjtcclxufSgpKTtcclxuZXhwb3J0cy5GYWNldFNlYXJjaEhhbmRsZXIgPSBGYWNldFNlYXJjaEhhbmRsZXI7XHJcblxuXG4vKioqLyB9KSxcbi8qIDI0ICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy90cy9ldmVudGhhbmRsZXJzL0ZpbHRlckFjdGlvbkhhbmRsZXIudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgRmlsdGVyQWN0aW9uVHlwZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vbW9kZWxzL0ZpbHRlckFjdGlvblR5cGUgKi8gMTApO1xyXG52YXIgRmlsdGVyQWN0aW9uSGFuZGxlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEZpbHRlckFjdGlvbkhhbmRsZXIoZmlsdGVyRWxlbWVudCwgY29uZmlnU3RvcmUpIHtcclxuICAgICAgICB0aGlzLmZpbHRlckVsZW1lbnQgPSBmaWx0ZXJFbGVtZW50O1xyXG4gICAgICAgIHRoaXMuY29uZmlnU3RvcmUgPSBjb25maWdTdG9yZTtcclxuICAgIH1cclxuICAgIEZpbHRlckFjdGlvbkhhbmRsZXIucHJvdG90eXBlLlJlZ2lzdGVyRG9tSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuZmlsdGVyRWxlbWVudC5vbihcImNsaWNrXCIsIFwiLmZhY2V0LXN1YmhlYWRlciAuZmFjZXQtbGFiZWxzIC5sYWJlbFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBqUXVlcnkoZXZlbnQudGFyZ2V0KTtcclxuICAgICAgICAgICAgaWYgKCFlbGVtZW50LmlzKFwiLmxhYmVsXCIpKSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnRzKFwiLmxhYmVsXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciB2YWxTdHIgPSBlbGVtZW50LmF0dHIoXCJkYXRhLWZpbHRlci1lbnRyeVwiKS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB2YWxTdHIuc3BsaXQoXCI6XCIpO1xyXG4gICAgICAgICAgICB2YXIgaXNSYW5nZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSA0KSB7XHJcbiAgICAgICAgICAgICAgICBpc1JhbmdlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLm9uRmlsdGVyQ2hhbmdlKHZhbHVlWzBdLCB2YWx1ZVsxXSwgRmlsdGVyQWN0aW9uVHlwZV8xLkZpbHRlckFjdGlvblR5cGUuTWludXMsIHZhbHVlWzJdLCBpc1JhbmdlKTtcclxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJFbGVtZW50Lm9uKFwiY2xpY2tcIiwgXCIuZmFjZXQtc3ViaGVhZGVyIC5yZW1vdmUtYWxsXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICBfdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLm9uQWxsRmlsdGVyUmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEZpbHRlckFjdGlvbkhhbmRsZXIucHJvdG90eXBlLm9uUmVzaXplID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4gICAgfTtcclxuICAgIEZpbHRlckFjdGlvbkhhbmRsZXIucHJvdG90eXBlLm9uRG9jdW1lbnRDbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIC8vIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBGaWx0ZXJBY3Rpb25IYW5kbGVyO1xyXG59KCkpO1xyXG5leHBvcnRzLkZpbHRlckFjdGlvbkhhbmRsZXIgPSBGaWx0ZXJBY3Rpb25IYW5kbGVyO1xyXG5cblxuLyoqKi8gfSksXG4vKiAyNSAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3RzL2V2ZW50aGFuZGxlcnMvSGlkZUZhY2V0U2VjdGlvbkhhbmRsZXIudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBkeW5hbWljIGV4cG9ydHMgcHJvdmlkZWQgKi9cbi8qISBhbGwgZXhwb3J0cyB1c2VkICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIEhpZGVGYWNldFNlY3Rpb25IYW5kbGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gSGlkZUZhY2V0U2VjdGlvbkhhbmRsZXIoZWxlbWVudCwgY29uZmlnU3RvcmUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICAgICAgdGhpcy5jb25maWdTdG9yZSA9IGNvbmZpZ1N0b3JlO1xyXG4gICAgICAgIHRoaXMuUmVnaXN0ZXJEb21IYW5kbGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfdGhpcy5lbGVtZW50Lm9uKFwiY2xpY2tcIiwgXCIuaGlkZS1mYWNldFwiLCBfdGhpcy5oaWRlRmFjZXQpO1xyXG4gICAgICAgICAgICBfdGhpcy5lbGVtZW50Lm9uKFwiY2xpY2tcIiwgXCIuc2hvdy1mYWNldFwiLCBfdGhpcy5zaG93RmFjZXQpO1xyXG4gICAgICAgICAgICBfdGhpcy5lbGVtZW50Lm9uKFwia2V5dXBcIiwgXCIuaGlkZS1mYWNldFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjb2RlID0gZXZlbnQua2V5Q29kZSB8fCBldmVudC53aGljaDtcclxuICAgICAgICAgICAgICAgIGlmIChjb2RlICE9PSAxMyAmJiBjb2RlICE9PSAzMikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIF90aGlzLmhpZGVGYWNldChldmVudCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBfdGhpcy5lbGVtZW50Lm9uKFwia2V5dXBcIiwgXCIuc2hvdy1mYWNldFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjb2RlID0gZXZlbnQua2V5Q29kZSB8fCBldmVudC53aGljaDtcclxuICAgICAgICAgICAgICAgIGlmIChjb2RlICE9PSAxMyAmJiBjb2RlICE9PSAzMikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIF90aGlzLnNob3dGYWNldChldmVudCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5oaWRlRmFjZXQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgJChcIi5mYWNldC1ib2R5XCIpLmhpZGUoKTtcclxuICAgICAgICAgICAgJChcIi5mYWNldC1jb2xsYXBzZWQtYm9keVwiKS5mYWRlSW4oX3RoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5hbmltYXRpb25UaW1lKTtcclxuICAgICAgICAgICAgX3RoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5jb2xsYXBzZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuc2hvd0ZhY2V0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICQoXCIuZmFjZXQtY29sbGFwc2VkLWJvZHlcIikuaGlkZSgpO1xyXG4gICAgICAgICAgICAkKFwiLmZhY2V0LWJvZHlcIikuZmFkZUluKF90aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMuYW5pbWF0aW9uVGltZSk7XHJcbiAgICAgICAgICAgIF90aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMuY29sbGFwc2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBIaWRlRmFjZXRTZWN0aW9uSGFuZGxlci5wcm90b3R5cGUub25SZXNpemUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gSWdub3JlXHJcbiAgICB9O1xyXG4gICAgSGlkZUZhY2V0U2VjdGlvbkhhbmRsZXIucHJvdG90eXBlLm9uRG9jdW1lbnRDbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIC8vIElnbm9yZVxyXG4gICAgfTtcclxuICAgIHJldHVybiBIaWRlRmFjZXRTZWN0aW9uSGFuZGxlcjtcclxufSgpKTtcclxuZXhwb3J0cy5IaWRlRmFjZXRTZWN0aW9uSGFuZGxlciA9IEhpZGVGYWNldFNlY3Rpb25IYW5kbGVyO1xyXG5cblxuLyoqKi8gfSksXG4vKiAyNiAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3RzL2V2ZW50aGFuZGxlcnMvUGluVW5waW5FdmVudEhhbmRsZXIudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBkeW5hbWljIGV4cG9ydHMgcHJvdmlkZWQgKi9cbi8qISBhbGwgZXhwb3J0cyB1c2VkICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIFBpblVucGluRXZlbnRIYW5kbGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUGluVW5waW5FdmVudEhhbmRsZXIoZWxlbWVudCwgY29uZmlnU3RvcmUsIHRlbXBsYXRlU2VydmljZSkge1xyXG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICAgICAgdGhpcy5jb25maWdTdG9yZSA9IGNvbmZpZ1N0b3JlO1xyXG4gICAgICAgIHRoaXMudGVtcGxhdGVTZXJ2aWNlID0gdGVtcGxhdGVTZXJ2aWNlO1xyXG4gICAgfVxyXG4gICAgUGluVW5waW5FdmVudEhhbmRsZXIucHJvdG90eXBlLlJlZ2lzdGVyRG9tSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5vbihcImNsaWNrXCIsIFwiLnBpbi1pY29uXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVQaW5VbnBpbihldmVudCwgdHJ1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50Lm9uKFwiY2xpY2tcIiwgXCIudW5waW4taWNvblwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgX3RoaXMuaGFuZGxlUGluVW5waW4oZXZlbnQsIGZhbHNlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmVsZW1lbnQub24oXCJrZXl1cFwiLCBcIi5waW4taWNvblwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgdmFyIGNvZGUgPSBldmVudC5rZXlDb2RlIHx8IGV2ZW50LndoaWNoO1xyXG4gICAgICAgICAgICBpZiAoY29kZSAhPT0gMTMgJiYgY29kZSAhPT0gMzIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVQaW5VbnBpbihldmVudCwgdHJ1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50Lm9uKFwia2V5dXBcIiwgXCIudW5waW4taWNvblwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgdmFyIGNvZGUgPSBldmVudC5rZXlDb2RlIHx8IGV2ZW50LndoaWNoO1xyXG4gICAgICAgICAgICBpZiAoY29kZSAhPT0gMTMgJiYgY29kZSAhPT0gMzIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVQaW5VbnBpbihldmVudCwgZmFsc2UpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFBpblVucGluRXZlbnRIYW5kbGVyLnByb3RvdHlwZS5vblJlc2l6ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBJZ25vcmVcclxuICAgIH07XHJcbiAgICBQaW5VbnBpbkV2ZW50SGFuZGxlci5wcm90b3R5cGUub25Eb2N1bWVudENsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgLy8gSWdub3JlXHJcbiAgICB9O1xyXG4gICAgUGluVW5waW5FdmVudEhhbmRsZXIucHJvdG90eXBlLmhhbmRsZVBpblVucGluID0gZnVuY3Rpb24gKGV2ZW50LCBwaW4pIHtcclxuICAgICAgICB2YXIgZWxlbWVudCA9IGpRdWVyeShldmVudC50YXJnZXQpO1xyXG4gICAgICAgIHZhciBpZCA9IGVsZW1lbnQuYXR0cihcImRhdGEtYXR0ci1pZFwiKTtcclxuICAgICAgICB2YXIgZGF0YSA9IHRoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5mYWNldENvbmZpZztcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGRhdGFfMSA9IGRhdGE7IF9pIDwgZGF0YV8xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgZmFjZXQgPSBkYXRhXzFbX2ldO1xyXG4gICAgICAgICAgICBpZiAoZmFjZXQuaWQgPT09IGlkKSB7XHJcbiAgICAgICAgICAgICAgICBmYWNldC5waW5uZWQgPSBwaW47XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmVsZW1lbnQuaHRtbCh0aGlzLnRlbXBsYXRlU2VydmljZS5iaW5kKHRoaXMudGVtcGxhdGVTZXJ2aWNlLmdldERhdGEoKSkpO1xyXG4gICAgICAgIHRoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5vblBpblVucGluKGlkLCBwaW4pO1xyXG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBQaW5VbnBpbkV2ZW50SGFuZGxlcjtcclxufSgpKTtcclxuZXhwb3J0cy5QaW5VbnBpbkV2ZW50SGFuZGxlciA9IFBpblVucGluRXZlbnRIYW5kbGVyO1xyXG5cblxuLyoqKi8gfSksXG4vKiAyNyAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvdHMvZXZlbnRoYW5kbGVycy9TaG93TW9yZUxlc3NIYW5kbGVyLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBkeW5hbWljIGV4cG9ydHMgcHJvdmlkZWQgKi9cbi8qISBhbGwgZXhwb3J0cyB1c2VkICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIFNob3dNb3JlTGVzc0hhbmRsZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBTaG93TW9yZUxlc3NIYW5kbGVyKGVsZW1lbnQsIGNvbmZpZ1N0b3JlKSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcclxuICAgICAgICB0aGlzLmNvbmZpZ1N0b3JlID0gY29uZmlnU3RvcmU7XHJcbiAgICB9XHJcbiAgICBTaG93TW9yZUxlc3NIYW5kbGVyLnByb3RvdHlwZS5SZWdpc3RlckRvbUhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzXHJcbiAgICAgICAgICAgIC5lbGVtZW50XHJcbiAgICAgICAgICAgIC5vbihcImNsaWNrXCIsIFwiLnNob3ctbW9yZS1saW5rXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICBfdGhpcy5zaG93TW9yZUxlc3NGaWx0ZXJzKGV2ZW50LCB0cnVlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzXHJcbiAgICAgICAgICAgIC5lbGVtZW50XHJcbiAgICAgICAgICAgIC5vbihcImNsaWNrXCIsIFwiLnNob3ctbGVzcy1saW5rXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICBfdGhpcy5zaG93TW9yZUxlc3NGaWx0ZXJzKGV2ZW50LCBmYWxzZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpc1xyXG4gICAgICAgICAgICAuZWxlbWVudFxyXG4gICAgICAgICAgICAub24oXCJrZXl1cFwiLCBcIi5zaG93LW1vcmUtbGlua1wiLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgdmFyIGNvZGUgPSBldmVudC5rZXlDb2RlIHx8IGV2ZW50LndoaWNoO1xyXG4gICAgICAgICAgICBpZiAoY29kZSAhPT0gMTMgJiYgY29kZSAhPT0gMzIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfdGhpcy5zaG93TW9yZUxlc3NGaWx0ZXJzKGV2ZW50LCB0cnVlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzXHJcbiAgICAgICAgICAgIC5lbGVtZW50XHJcbiAgICAgICAgICAgIC5vbihcImtleXVwXCIsIFwiLnNob3ctbGVzcy1saW5rXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICB2YXIgY29kZSA9IGV2ZW50LmtleUNvZGUgfHwgZXZlbnQud2hpY2g7XHJcbiAgICAgICAgICAgIGlmIChjb2RlICE9PSAxMyAmJiBjb2RlICE9PSAzMikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF90aGlzLnNob3dNb3JlTGVzc0ZpbHRlcnMoZXZlbnQsIGZhbHNlKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBTaG93TW9yZUxlc3NIYW5kbGVyLnByb3RvdHlwZS5vblJlc2l6ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBJZ25vcmVcclxuICAgIH07XHJcbiAgICBTaG93TW9yZUxlc3NIYW5kbGVyLnByb3RvdHlwZS5vbkRvY3VtZW50Q2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAvLyBJZ25vcmVcclxuICAgIH07XHJcbiAgICBTaG93TW9yZUxlc3NIYW5kbGVyLnByb3RvdHlwZS5zaG93TW9yZUxlc3NGaWx0ZXJzID0gZnVuY3Rpb24gKGV2ZW50LCBzaG93TW9yZSkge1xyXG4gICAgICAgIHZhciBlbGVtZW50ID0galF1ZXJ5KGV2ZW50LnRhcmdldCk7XHJcbiAgICAgICAgaWYgKHNob3dNb3JlKSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnRcclxuICAgICAgICAgICAgICAgIC5wYXJlbnQoKVxyXG4gICAgICAgICAgICAgICAgLmZpbmQoXCIuZXh0cmEtZmlsdGVyXCIpXHJcbiAgICAgICAgICAgICAgICAuZmFkZUluKHRoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5hbmltYXRpb25UaW1lLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LmhpZGUoKTtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnRcclxuICAgICAgICAgICAgICAgICAgICAuc2libGluZ3MoXCJhXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBlbGVtZW50XHJcbiAgICAgICAgICAgICAgICAucGFyZW50KClcclxuICAgICAgICAgICAgICAgIC5maW5kKFwiLmV4dHJhLWZpbHRlclwiKVxyXG4gICAgICAgICAgICAgICAgLmZhZGVPdXQodGhpcy5jb25maWdTdG9yZS5PcHRpb25zLmFuaW1hdGlvblRpbWUsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnRcclxuICAgICAgICAgICAgICAgICAgICAuc2libGluZ3MoXCJhXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKTtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuaGlkZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFNob3dNb3JlTGVzc0hhbmRsZXI7XHJcbn0oKSk7XHJcbmV4cG9ydHMuU2hvd01vcmVMZXNzSGFuZGxlciA9IFNob3dNb3JlTGVzc0hhbmRsZXI7XHJcblxuXG4vKioqLyB9KSxcbi8qIDI4ICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3RzL21haW4vRmlsdGVyLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgSG90S2V5c0ZpbHRlcnNIYW5kbGVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9ldmVudGhhbmRsZXJzL0hvdEtleXNGaWx0ZXJzSGFuZGxlciAqLyAyOSk7XHJcbnZhciBGaWx0ZXJUZW1wbGF0ZVNlcnZpY2VfMSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL3NlcnZpY2VzL0ZpbHRlclRlbXBsYXRlU2VydmljZSAqLyAzMCk7XHJcbnZhciBGaWx0ZXJDb25maWdTdG9yZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi8uLi9jb25maWcvRmlsdGVyQ29uZmlnU3RvcmUgKi8gMzQpO1xyXG52YXIgZXZlbnRoYW5kbGVyc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi8uLi9ldmVudGhhbmRsZXJzICovIDgpO1xyXG52YXIgRmlsdGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRmlsdGVyKG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlckNoYWluID0gW107XHJcbiAgICAgICAgdGhpcy5iaW5kID0gZnVuY3Rpb24gKGZpbHRlcnMpIHtcclxuICAgICAgICAgICAgdmFyIGZhY2V0U3ViSGVhZGVyID0gX3RoaXMudGVtcGxhdGVTZXJ2aWNlLmJpbmQoZmlsdGVycyk7XHJcbiAgICAgICAgICAgIF90aGlzLmZpbHRlckVsZW1lbnQuaHRtbChmYWNldFN1YkhlYWRlcik7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChfdGhpcy5maWx0ZXJFbGVtZW50ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmZpbHRlckVsZW1lbnQub2ZmKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgX3RoaXMuaGFuZGxlckNoYWluLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZXIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChoYW5kbGVyICE9PSB1bmRlZmluZWQgJiYgaGFuZGxlci5kZXJlZ2lzdGVyICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLmRlcmVnaXN0ZXIoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmNvbmZpZ1N0b3JlID0gbmV3IEZpbHRlckNvbmZpZ1N0b3JlXzEuRmlsdGVyQ29uZmlnU3RvcmUob3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJFbGVtZW50ID0galF1ZXJ5KG9wdGlvbnMuY29udGFpbmVyRWxlbWVudCk7XHJcbiAgICAgICAgdGhpcy50ZW1wbGF0ZVNlcnZpY2UgPSBuZXcgRmlsdGVyVGVtcGxhdGVTZXJ2aWNlXzEuRmlsdGVyVGVtcGxhdGVTZXJ2aWNlKHRoaXMuY29uZmlnU3RvcmUpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlckNoYWluLnB1c2gobmV3IGV2ZW50aGFuZGxlcnNfMS5GaWx0ZXJBY3Rpb25IYW5kbGVyKHRoaXMuZmlsdGVyRWxlbWVudCwgdGhpcy5jb25maWdTdG9yZSkpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlckNoYWluLnB1c2gobmV3IEhvdEtleXNGaWx0ZXJzSGFuZGxlcl8xLkhvdEtleXNGaWx0ZXJzSGFuZGxlcigpKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXJDaGFpbi5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XHJcbiAgICAgICAgICAgIGhhbmRsZXIuUmVnaXN0ZXJEb21IYW5kbGVyKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRmlsdGVyO1xyXG59KCkpO1xyXG5leHBvcnRzLkZpbHRlciA9IEZpbHRlcjtcclxuXG5cbi8qKiovIH0pLFxuLyogMjkgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvdHMvZXZlbnRoYW5kbGVycy9Ib3RLZXlzRmlsdGVyc0hhbmRsZXIudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZHluYW1pYyBleHBvcnRzIHByb3ZpZGVkICovXG4vKiEgYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBIb3RLZXlzRmlsdGVyc0hhbmRsZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBIb3RLZXlzRmlsdGVyc0hhbmRsZXIoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLlJlZ2lzdGVyRG9tSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgalF1ZXJ5KGRvY3VtZW50KS5vbihcImtleWRvd25cIiwgX3RoaXMuZm9jdXNPblNlYXJjaCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLm9uUmVzaXplID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMub25Eb2N1bWVudENsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIC8vIERvIG5vdGhpbmdcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZGVSZWdpc3RlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgalF1ZXJ5KGRvY3VtZW50KS5vZmYoXCJrZXlkb3duXCIsIF90aGlzLmZvY3VzT25TZWFyY2gpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5mb2N1c09uU2VhcmNoID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIGlmIChldmVudC5hbHRLZXkgJiYgZXZlbnQua2V5ID09PSBcInJcIikge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGpRdWVyeShcIi5mYWNldC1zdWJoZWFkZXIgLnJlbW92ZS1hbGxcIikuZm9jdXMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gSG90S2V5c0ZpbHRlcnNIYW5kbGVyO1xyXG59KCkpO1xyXG5leHBvcnRzLkhvdEtleXNGaWx0ZXJzSGFuZGxlciA9IEhvdEtleXNGaWx0ZXJzSGFuZGxlcjtcclxuXG5cbi8qKiovIH0pLFxuLyogMzAgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3RzL3NlcnZpY2VzL0ZpbHRlclRlbXBsYXRlU2VydmljZS50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZHluYW1pYyBleHBvcnRzIHByb3ZpZGVkICovXG4vKiEgYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBGYWNldFN1YkhlYWRlciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vLi4vLi4vaGJzL2ZhY2V0LWFwcGxpZWQtZmlsdGVycy5oYnMgKi8gMzEpO1xyXG52YXIgRmlsdGVyVGVtcGxhdGVTZXJ2aWNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRmlsdGVyVGVtcGxhdGVTZXJ2aWNlKGNvbmZpZ1N0b3JlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLmNvbmZpZ1N0b3JlID0gY29uZmlnU3RvcmU7XHJcbiAgICAgICAgdGhpcy5tZXJnZVdpdGhGYWNldENvbmZpZyA9IGZ1bmN0aW9uIChmaWx0ZXJzKSB7XHJcbiAgICAgICAgICAgIHZhciBtZXJnZWRBcnJheSA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGZpbHRlcnNfMSA9IGZpbHRlcnM7IF9pIDwgZmlsdGVyc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGZhY2V0ID0gZmlsdGVyc18xW19pXTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9hID0gMCwgX2IgPSBfdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLmZpbHRlckNvbmZpZzsgX2EgPCBfYi5sZW5ndGg7IF9hKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZmFjZXRDb25maWcgPSBfYltfYV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZhY2V0Q29uZmlnLmlkID09PSBmYWNldC5pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXJnZWRBcnJheS5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxhcHNlZDogZmFjZXRDb25maWcuY29sbGFwc2VkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFjZXRSYW5nZTogZmFjZXQuZmFjZXRSYW5nZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhY2V0VmFsdWVzOiBmYWNldC5mYWNldFZhbHVlcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBmYWNldENvbmZpZy5pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGZhY2V0Q29uZmlnLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmRlcjogZmFjZXRDb25maWcub3JkZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaW5uZWQ6IGZhY2V0Q29uZmlnLnBpbm5lZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGZhY2V0Q29uZmlnLnR5cGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG1lcmdlZEFycmF5O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy50ZW1wYXRlRnVuY3Rpb25Gb3JGYWNldFN1YkhlYWRlciA9IEZhY2V0U3ViSGVhZGVyO1xyXG4gICAgfVxyXG4gICAgRmlsdGVyVGVtcGxhdGVTZXJ2aWNlLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKGZpbHRlcnMpIHtcclxuICAgICAgICB2YXIgbWVyZ2VkRmlsdGVycyA9IHRoaXMubWVyZ2VXaXRoRmFjZXRDb25maWcoZmlsdGVycyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudGVtcGF0ZUZ1bmN0aW9uRm9yRmFjZXRTdWJIZWFkZXIoeyBmaWx0ZXJzOiBtZXJnZWRGaWx0ZXJzIH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBGaWx0ZXJUZW1wbGF0ZVNlcnZpY2U7XHJcbn0oKSk7XHJcbmV4cG9ydHMuRmlsdGVyVGVtcGxhdGVTZXJ2aWNlID0gRmlsdGVyVGVtcGxhdGVTZXJ2aWNlO1xyXG5cblxuLyoqKi8gfSksXG4vKiAzMSAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9oYnMvZmFjZXQtYXBwbGllZC1maWx0ZXJzLmhicyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBkeW5hbWljIGV4cG9ydHMgcHJvdmlkZWQgKi9cbi8qISBhbGwgZXhwb3J0cyB1c2VkICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBIYW5kbGViYXJzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgaGFuZGxlYmFycyAqLyAwKTtcbmZ1bmN0aW9uIF9fZGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiAob2JqLl9fZXNNb2R1bGUgPyBvYmpbXCJkZWZhdWx0XCJdIDogb2JqKTsgfVxubW9kdWxlLmV4cG9ydHMgPSAoSGFuZGxlYmFyc1tcImRlZmF1bHRcIl0gfHwgSGFuZGxlYmFycykudGVtcGxhdGUoe1wiMVwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhLGJsb2NrUGFyYW1zLGRlcHRocykge1xuICAgIHZhciBzdGFjazE7XG5cbiAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFwiY29udGVudCBmYWNldC1zdWJoZWFkZXIgZ3VpIGZsdWlkLXcgYmFzaWMgY3VydmVkIHAtNVxcXCI+XFxuICAgIDxzcGFuIGNsYXNzPVxcXCJndWkgZ3VpLXN1YmhlYWRpbmctMiBjYXBzXFxcIj5BcHBsaWVkIEZpbHRlcnM8L3NwYW4+XFxuICAgIDxidXR0b24gY2xhc3M9XFxcImd1aSBtLWwtNSByZW1vdmUtYWxsXFxcIiA+XFxuICAgICAgICA8aSBjbGFzcz1cXFwiZ3VpLWljb24gZ3VpLWljb24tY2FuY2VsXFxcIj48L2k+XFxuICAgICAgICA8c3Bhbj5DbGVhciBBbGw8L3NwYW4+XFxuICAgIDwvYnV0dG9uPlxcbiAgICA8c3BhbiBjbGFzcz1cXFwiZ3VpIG0tbC0xMFxcXCI+XFxuXCJcbiAgICArICgoc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuZmlsdGVycyA6IGRlcHRoMCkse1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgyLCBkYXRhLCAwLCBibG9ja1BhcmFtcywgZGVwdGhzKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCIgICAgPC9zcGFuPlxcbjwvZGl2PlxcblwiO1xufSxcIjJcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSxibG9ja1BhcmFtcyxkZXB0aHMpIHtcbiAgICB2YXIgc3RhY2sxLCBhbGlhczE9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KTtcblxuICByZXR1cm4gXCIgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJndWkgbS1yLTVcXFwiPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJndWkgbGFyZ2UgbGFiZWxzIGZhY2V0LWxhYmVsc1xcXCI+XFxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJndWkgZ3VpLXN1YmhlYWRpbmctMVxcXCI+XCJcbiAgICArIGNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uKGNvbnRhaW5lci5sYW1iZGEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCI8L3NwYW4+XFxuXCJcbiAgICArICgoc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoYWxpYXMxLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5mYWNldFZhbHVlcyA6IGRlcHRoMCkse1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgzLCBkYXRhLCAwLCBibG9ja1BhcmFtcywgZGVwdGhzKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzLmVhY2guY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmZhY2V0UmFuZ2UgOiBkZXB0aDApLHtcIm5hbWVcIjpcImVhY2hcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oNSwgZGF0YSwgMCwgYmxvY2tQYXJhbXMsIGRlcHRocyksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgPC9zcGFuPlxcblwiO1xufSxcIjNcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSxibG9ja1BhcmFtcyxkZXB0aHMpIHtcbiAgICB2YXIgYWxpYXMxPWNvbnRhaW5lci5sYW1iZGEsIGFsaWFzMj1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbjtcblxuICByZXR1cm4gXCIgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiZ3VpIG0tMCBtLXQtMiBtLXItMiBwLTQgbGFiZWwgY3Vyc29yLXBvaW50ZXIgc3RyaWtldGhyb3VnaC1ob3ZlclxcXCIgZGF0YS1maWx0ZXItZW50cnk9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aHNbMV0gIT0gbnVsbCA/IGRlcHRoc1sxXS5pZCA6IGRlcHRoc1sxXSksIGRlcHRoMCkpXG4gICAgKyBcIjpcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGFiZWwgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCI6XCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoc1sxXSAhPSBudWxsID8gZGVwdGhzWzFdLnR5cGUgOiBkZXB0aHNbMV0pLCBkZXB0aDApKVxuICAgICsgXCJcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmxhYmVsIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiXFxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cXFwiZ3VpLWljb24gZ3VpLWljb24tY2FuY2VsXFxcIj48L2k+XFxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxcblwiO1xufSxcIjVcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSxibG9ja1BhcmFtcyxkZXB0aHMpIHtcbiAgICB2YXIgYWxpYXMxPWNvbnRhaW5lci5sYW1iZGEsIGFsaWFzMj1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbjtcblxuICByZXR1cm4gXCIgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiZ3VpIG0tMCBtLXQtMiBtLXItMiBwLTQgbGFiZWwgY3Vyc29yLXBvaW50ZXIgc3RyaWtldGhyb3VnaC1ob3ZlclxcXCIgZGF0YS1maWx0ZXItZW50cnk9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aHNbMV0gIT0gbnVsbCA/IGRlcHRoc1sxXS5pZCA6IGRlcHRoc1sxXSksIGRlcHRoMCkpXG4gICAgKyBcIjpcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGFiZWwgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCI6XCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoc1sxXSAhPSBudWxsID8gZGVwdGhzWzFdLnR5cGUgOiBkZXB0aHNbMV0pLCBkZXB0aDApKVxuICAgICsgXCI6dHJ1ZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICBcIlxuICAgICsgYWxpYXMyKF9fZGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3NyYy9oYnMvaGVscGVycy9SYW5nZS50cyAqLyAzMikpLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubWluIDogZGVwdGgwKSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubWF4IDogZGVwdGgwKSwoZGVwdGhzWzFdICE9IG51bGwgPyBkZXB0aHNbMV0udHlwZSA6IGRlcHRoc1sxXSkse1wibmFtZVwiOlwiUmFuZ2VcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpXG4gICAgKyBcIlxcbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XFxcImd1aS1pY29uIGd1aS1pY29uLWNhbmNlbFxcXCI+PC9pPlxcbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cXG5cIjtcbn0sXCJjb21waWxlclwiOls3LFwiPj0gNC4wLjBcIl0sXCJtYWluXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEsYmxvY2tQYXJhbXMsZGVwdGhzKSB7XG4gICAgdmFyIHN0YWNrMTtcblxuICByZXR1cm4gKChzdGFjazEgPSBoZWxwZXJzW1wiaWZcIl0uY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmZpbHRlcnMgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLmxlbmd0aCA6IHN0YWNrMSkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMSwgZGF0YSwgMCwgYmxvY2tQYXJhbXMsIGRlcHRocyksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIik7XG59LFwidXNlRGF0YVwiOnRydWUsXCJ1c2VEZXB0aHNcIjp0cnVlfSk7XG5cbi8qKiovIH0pLFxuLyogMzIgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvaGJzL2hlbHBlcnMvUmFuZ2UudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZHluYW1pYyBleHBvcnRzIHByb3ZpZGVkICovXG4vKiEgYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBtb21lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBtb21lbnQgKi8gMzMpO1xyXG52YXIgcmFuZ2UgPSBmdW5jdGlvbiAobWluLCBtYXgsIHR5cGUpIHtcclxuICAgIHZhciBzdHIgPSBcIlwiO1xyXG4gICAgdmFyIG1pblN0ciA9IG1pbjtcclxuICAgIHZhciBtYXhTdHIgPSBtYXg7XHJcbiAgICBpZiAodHlwZSA9PT0gXCJFZG0uRGF0ZVRpbWVPZmZzZXRcIikge1xyXG4gICAgICAgIGlmIChtaW4gIT09IHVuZGVmaW5lZCAmJiBtaW4gIT09IG51bGwgJiYgbWluICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIG1pblN0ciA9IG1vbWVudChtaW4pLmZvcm1hdChcImxsXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobWF4ICE9PSB1bmRlZmluZWQgJiYgbWF4ICE9PSBudWxsICYmIG1heCAhPT0gXCJcIikge1xyXG4gICAgICAgICAgICBtYXhTdHIgPSBtb21lbnQobWF4KS5mb3JtYXQoXCJsbFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAobWluU3RyICE9PSB1bmRlZmluZWQgJiYgbWluU3RyICE9PSBudWxsICYmIG1pblN0ciAhPT0gXCJcIikge1xyXG4gICAgICAgIHN0ciArPSBcIiBmcm9tOiBcIiArIG1pblN0cjtcclxuICAgIH1cclxuICAgIGlmIChtYXhTdHIgIT09IHVuZGVmaW5lZCAmJiBtYXhTdHIgIT09IG51bGwgJiYgbWF4U3RyICE9PSBcIlwiKSB7XHJcbiAgICAgICAgc3RyICs9IFwiIHRvOiBcIiArIG1heFN0cjtcclxuICAgIH1cclxuICAgIHJldHVybiBzdHI7XHJcbn07XHJcbmV4cG9ydHMuZGVmYXVsdCA9IHJhbmdlO1xyXG5cblxuLyoqKi8gfSksXG4vKiAzMyAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiBleHRlcm5hbCBcIm1vbWVudFwiICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzMzX187XG5cbi8qKiovIH0pLFxuLyogMzQgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3RzL2NvbmZpZy9GaWx0ZXJDb25maWdTdG9yZS50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZHluYW1pYyBleHBvcnRzIHByb3ZpZGVkICovXG4vKiEgYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBGaWx0ZXJDb25maWdTdG9yZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEZpbHRlckNvbmZpZ1N0b3JlKG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuZGVmYXVsdGZpbHRlck9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvblRpbWU6IDIwMCxcclxuICAgICAgICAgICAgY29udGFpbmVyRWxlbWVudDogbnVsbCxcclxuICAgICAgICAgICAgZmlsdGVyQ29uZmlnOiBbXSxcclxuICAgICAgICAgICAgb25BbGxGaWx0ZXJSZW1vdmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIC8vIElnbm9yZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvbkZpbHRlckNoYW5nZTogZnVuY3Rpb24gKGtleSwgdmFsdWUsIGFjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgLy8gSWdub3JlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmV4dGVuZE9wdGlvbnMgPSBmdW5jdGlvbiAoaW5wdXRPcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoX3RoaXMub3B0aW9ucyA9IGpRdWVyeS5leHRlbmQoe30sIF90aGlzLmRlZmF1bHRmaWx0ZXJPcHRpb25zLCBpbnB1dE9wdGlvbnMpKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZXh0ZW5kT3B0aW9ucyhvcHRpb25zKTtcclxuICAgICAgICBpZiAob3B0aW9ucy5jb250YWluZXJFbGVtZW50ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBsZWFzZSBQcm92aWRlIGEgdmFsaWQgY29udGFpbmVyIEVsZW1lbnQgb2JqZWN0IGZvciBmaWx0ZXJzXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGaWx0ZXJDb25maWdTdG9yZS5wcm90b3R5cGUsIFwiT3B0aW9uc1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gRmlsdGVyQ29uZmlnU3RvcmU7XHJcbn0oKSk7XHJcbmV4cG9ydHMuRmlsdGVyQ29uZmlnU3RvcmUgPSBGaWx0ZXJDb25maWdTdG9yZTtcclxuXG5cbi8qKiovIH0pXG4vKioqKioqLyBdKTtcbn0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBmYWNldG9vLm1pbi5qcyIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDExKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL2Jvb3RzdHJhcCA0YTkzMGMwYThmNWUxMzFhZTBkOSIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8wX187XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwge1wicm9vdFwiOlwiSGFuZGxlYmFyc1wiLFwiYW1kXCI6XCJoYW5kbGViYXJzLnJ1bnRpbWVcIixcImNvbW1vbmpzMlwiOlwiaGFuZGxlYmFycy9ydW50aW1lXCIsXCJjb21tb25qc1wiOlwiaGFuZGxlYmFycy9ydW50aW1lXCJ9XG4vLyBtb2R1bGUgaWQgPSAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiY29uc3QgY2hlY2tlZCA9IChib29sOiBib29sZWFuKTogc3RyaW5nID0+IHtcclxuICAgIHJldHVybiBib29sID8gXCJjaGVja2VkXCIgOiBcIlwiO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2hlY2tlZDtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXI/P3JlZi0tMSEuL3NyYy9oYnMvaGVscGVycy9DaGVja2VkLnRzIiwiY29uc3QgZGlzYWJsZWQgPSAoYm9vbDogYm9vbGVhbik6IHN0cmluZyA9PiB7XHJcbiAgICByZXR1cm4gYm9vbCA/IFwiZGlzYWJsZWRcIiA6IFwiXCI7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBkaXNhYmxlZDtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXI/P3JlZi0tMSEuL3NyYy9oYnMvaGVscGVycy9EaXNhYmxlZC50cyIsImV4cG9ydCBlbnVtIFNob3dIaWRlIHtcclxuICAgIFNob3csXHJcbiAgICBIaWRlLFxyXG4gICAgVG9nZ2xlLFxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy90c2xpbnQtbG9hZGVyPz9yZWYtLTEhLi9zcmMvdHMvZXZlbnRoYW5kbGVycy9TaG93SGlkZS50cyIsInZhciBIYW5kbGViYXJzID0gcmVxdWlyZShcImhhbmRsZWJhcnNcIik7XG5mdW5jdGlvbiBfX2RlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgKG9iai5fX2VzTW9kdWxlID8gb2JqW1wiZGVmYXVsdFwiXSA6IG9iaik7IH1cbm1vZHVsZS5leHBvcnRzID0gKEhhbmRsZWJhcnNbXCJkZWZhdWx0XCJdIHx8IEhhbmRsZWJhcnMpLnRlbXBsYXRlKHtcImNvbXBpbGVyXCI6WzcsXCI+PSA0LjAuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBzdGFjazE7XG5cbiAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFwiZ3VpIG9mLWhpZGRlbiBtaW4tdy01MCB3LWF1dG8gZmx1aWQtaCBmbGV4IGNvbHVtbiBjb250YWluZXJcXFwiPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJndWkgaC1hdXRvIGZsZXggbS10LTEyXFxcIj5cXG4gICAgICAgIDxidXR0b24gY2xhc3M9XFxcImd1aSBjdXJzb3ItcG9pbnRlciBndWktc3ViaGVhZGluZy0xIG0tMCBleHBhbmQtYWxsXFxcIj5cXG4gICAgICAgICAgICA8aSBjbGFzcz1cXFwiZ3VpLWljb24gc3BlY2lhbCByb3RhdGUtcmlnaHQgZ3VpLWljb24tY2hldmRvdWJsZVxcXCI+PC9pPlxcbiAgICAgICAgICAgIEV4cGFuZCBBbGxcXG4gICAgICAgIDwvYnV0dG9uPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiZ3VpIG0tci01IG0tbC01XFxcIj48L2Rpdj5cXG4gICAgICAgIDxidXR0b24gY2xhc3M9XFxcImd1aSBjdXJzb3ItcG9pbnRlciBndWktc3ViaGVhZGluZy0xIG0tMCBjb2xsYXBzZS1hbGxcXFwiPlxcbiAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJndWktaWNvbiBzcGVjaWFsIHJvdGF0ZS1yaWdodCBndWktaWNvbi1jaGV2ZG91YmxlXFxcIj48L2k+XFxuICAgICAgICAgICAgQ29sbGFwc2UgQWxsXFxuICAgICAgICA8L2J1dHRvbj5cXG4gICAgPC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XFxcImd1aSBpbnB1dCBmbHVpZC13IHAtdC01IHAtci01IHAtYi01IHAtbC0xIG0tdC0xMFxcXCI+XFxuICAgICAgICA8aW5wdXQgY2xhc3M9XFxcImd1aSBpbnB1dCBwLTUgaC0zMCBmbHVpZC13IGd1aS1zdWJoZWFkaW5nLTIgZmlsdGVyLXNlYXJjaC1pbnB1dFxcXCIgcGxhY2Vob2xkZXI9XFxcIlNlYXJjaCBGaWx0ZXJzXFxcIiAvPlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiZ3VpIGZsdWlkLWggZmFjZXQtbGlzdCBvZi1hdXRvIG9meC1oaWRkZW4gbS10LTEwXFxcIj5cXG4gICAgICAgIFwiXG4gICAgKyAoKHN0YWNrMSA9IGNvbnRhaW5lci5pbnZva2VQYXJ0aWFsKHJlcXVpcmUoXCJDOlxcXFxVc2Vyc1xcXFxyb3VzdHVyZ1xcXFxTb3VyY2VcXFxcUmVwb3NcXFxcU2VhcmNoTWFzdGVyXFxcXEZhY2V0b29cXFxcc3JjXFxcXGhic1xcXFxmYWNldC1waW5uZWQuaGJzXCIpLGRlcHRoMCx7XCJuYW1lXCI6XCJmYWNldC1waW5uZWRcIixcImRhdGFcIjpkYXRhLFwiaGVscGVyc1wiOmhlbHBlcnMsXCJwYXJ0aWFsc1wiOnBhcnRpYWxzLFwiZGVjb3JhdG9yc1wiOmNvbnRhaW5lci5kZWNvcmF0b3JzfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCIgXCJcbiAgICArICgoc3RhY2sxID0gY29udGFpbmVyLmludm9rZVBhcnRpYWwocmVxdWlyZShcIkM6XFxcXFVzZXJzXFxcXHJvdXN0dXJnXFxcXFNvdXJjZVxcXFxSZXBvc1xcXFxTZWFyY2hNYXN0ZXJcXFxcRmFjZXRvb1xcXFxzcmNcXFxcaGJzXFxcXGZhY2V0LXVucGlubmVkLmhic1wiKSxkZXB0aDAse1wibmFtZVwiOlwiZmFjZXQtdW5waW5uZWRcIixcImRhdGFcIjpkYXRhLFwiaGVscGVyc1wiOmhlbHBlcnMsXCJwYXJ0aWFsc1wiOnBhcnRpYWxzLFwiZGVjb3JhdG9yc1wiOmNvbnRhaW5lci5kZWNvcmF0b3JzfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCJcXG4gICAgPC9kaXY+XFxuXFxuPC9kaXY+XCI7XG59LFwidXNlUGFydGlhbFwiOnRydWUsXCJ1c2VEYXRhXCI6dHJ1ZX0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2hicy9mYWNldC1ib2R5Lmhic1xuLy8gbW9kdWxlIGlkID0gNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsImltcG9ydCB7IElGYWNldFZhbHVlIH0gZnJvbSBcIi4uLy4uLy4uL2luZGV4XCI7XHJcblxyXG5jb25zdCBzZWxlY3RlZEZpbHRlcnNDb3VudCA9IChmYWNldFZhbHVlczogSUZhY2V0VmFsdWVbXSk6IHN0cmluZyA9PiB7XHJcbiAgICBsZXQgaW5kZXggPSAwO1xyXG4gICAgaWYgKGZhY2V0VmFsdWVzICE9PSB1bmRlZmluZWRcclxuICAgICAgICAmJiBmYWNldFZhbHVlcyAhPT0gbnVsbFxyXG4gICAgICAgICYmIGZhY2V0VmFsdWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBmYWNldFZhbHVlIG9mIGZhY2V0VmFsdWVzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZmFjZXRWYWx1ZS5zZWxlY3RlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBpbmRleCA9PT0gMCA/IFwiXCIgOiBcIjxzcGFuIGNsYXNzPVxcXCJndWktYm9keS0yXFxcIj4oXCIgKyBpbmRleCArIFwiKTwvc3Bhbj5cIjtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHNlbGVjdGVkRmlsdGVyc0NvdW50O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvdHNsaW50LWxvYWRlcj8/cmVmLS0xIS4vc3JjL2hicy9oZWxwZXJzL1NlbGVjdGVkRmlsdGVyc0NvdW50LnRzIiwiY29uc3QgU2hvd01vcmVMZXNzTGluayA9IChpbmRleCwgdjIsIG9wdGlvbnMpOiBzdHJpbmcgPT4ge1xyXG4gICAgaWYgKGluZGV4Lmxlbmd0aCA+IHYyKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiPGEgdGFiaW5kZXg9XFxcIjBcXFwiIGNsYXNzPVxcXCJndWkgc2ltcGxlIHNob3ctbW9yZS1saW5rIGN1cnNvci1wb2ludGVyIHAtMCBtLXQtM1xcXCI+U2hvdyBcIlxyXG4gICAgICAgICAgICAgICsgKGluZGV4Lmxlbmd0aCAtIHYyKVxyXG4gICAgICAgICAgICAgICsgXCIgTW9yZSA8L2E+XCJcclxuICAgICAgICAgICAgICArIFwiPGEgdGFiaW5kZXg9XFxcIjBcXFwiIGNsYXNzPVxcXCJndWkgc2ltcGxlIHNob3ctbGVzcy1saW5rIGN1cnNvci1wb2ludGVyIGd1aS1oaWRkZW4gcC0wIG0tdC0zXFxcIj5cIlxyXG4gICAgICAgICAgICAgICsgXCJTaG93IExlc3M8L2E+XCI7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2hvd01vcmVMZXNzTGluaztcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXI/P3JlZi0tMSEuL3NyYy9oYnMvaGVscGVycy9TaG93TW9yZUxlc3NMaW5rLnRzIiwiY29uc3QgY2hlY2tMZW5ndGggPSAoaW5kZXgsIHYyKTogc3RyaW5nID0+IHtcclxuICAgIGlmIChpbmRleCAhPT0gdW5kZWZpbmVkICYmIGluZGV4ICsgMSA+IHYyKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiZ3VpLWhpZGRlbiBleHRyYS1maWx0ZXJcIjtcclxuICAgIH1cclxuICAgIHJldHVybiBcIlwiO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2hlY2tMZW5ndGg7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy90c2xpbnQtbG9hZGVyPz9yZWYtLTEhLi9zcmMvaGJzL2hlbHBlcnMvQ2hlY2tMZW5ndGgudHMiLCJleHBvcnQgKiBmcm9tIFwiLi9FeHBhbmRDb2xsYXBzZUZhY2V0c0hhbmRsZXJcIjtcclxuZXhwb3J0ICogZnJvbSAgXCIuL0ZhY2V0QWN0aW9uSGFuZGxlclwiO1xyXG5leHBvcnQgKiBmcm9tICBcIi4vRmFjZXRTZWFyY2hIYW5kbGVyXCI7XHJcbmV4cG9ydCAqIGZyb20gIFwiLi9GaWx0ZXJBY3Rpb25IYW5kbGVyXCI7XHJcbmV4cG9ydCAqIGZyb20gIFwiLi9IaWRlRmFjZXRTZWN0aW9uSGFuZGxlclwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9JRXZlbnRIYW5kbGVyXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL1BpblVucGluRXZlbnRIYW5kbGVyXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL1Nob3dNb3JlTGVzc0hhbmRsZXJcIjtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXI/P3JlZi0tMSEuL3NyYy90cy9ldmVudGhhbmRsZXJzL2luZGV4LnRzIiwiaW1wb3J0IHsgU2hvd0hpZGUgfSBmcm9tIFwiLi9TaG93SGlkZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEV4cGFuZENvbGxhcHNlTWFuYWdlciB7XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBDb250cm9sVmlzaWJpbGl0eU9mRmlsdGVyID0gKGhlYWRlckVsZW1lbnQ6IEpRdWVyeSwgc2hvd0hpZGU6IFNob3dIaWRlKSA9PiB7XHJcbiAgICAgICAgY29uc3QgaWNvbkVsZW1lbnQgPSBoZWFkZXJFbGVtZW50LmNoaWxkcmVuKFwic3BhblwiKS5jaGlsZHJlbihcIi5leHBhbnNpb24taWNvblwiKSA7XHJcbiAgICAgICAgY29uc3QgY3VycmVudGx5VmlzaWJsZSA9IGljb25FbGVtZW50Lmhhc0NsYXNzKFwiZ3VpLWljb24tY2hldnJvbi11cFwiKTtcclxuICAgICAgICBpZiAoU2hvd0hpZGUuVG9nZ2xlICE9PSBzaG93SGlkZSAmJiAoKGN1cnJlbnRseVZpc2libGUgJiYgc2hvd0hpZGUgPT09IFNob3dIaWRlLlNob3cpIHx8XHJcbiAgICAgICAgICAgICghY3VycmVudGx5VmlzaWJsZSAmJiBzaG93SGlkZSA9PT0gU2hvd0hpZGUuSGlkZSkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFjdXJyZW50bHlWaXNpYmxlKSB7XHJcbiAgICAgICAgICAgIGhlYWRlckVsZW1lbnQucGFyZW50cyhcIi5mYWNldC1pdGVtXCIpLmZpbmQoXCIuZmFjZXQtaXRlbS1kZXNjcmlwdGlvblwiKS5zbGlkZURvd24oMjAwKTtcclxuICAgICAgICAgICAgaWNvbkVsZW1lbnQucmVtb3ZlQ2xhc3MoXCJndWktaWNvbi1jaGV2cm9uLWRvd25cIik7XHJcbiAgICAgICAgICAgIGljb25FbGVtZW50LmFkZENsYXNzKFwiZ3VpLWljb24tY2hldnJvbi11cFwiKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBoZWFkZXJFbGVtZW50LnBhcmVudHMoXCIuZmFjZXQtaXRlbVwiKS5maW5kKFwiLmZhY2V0LWl0ZW0tZGVzY3JpcHRpb25cIikuc2xpZGVVcCgyMDApO1xyXG4gICAgICAgICAgICBpY29uRWxlbWVudC5yZW1vdmVDbGFzcyhcImd1aS1pY29uLWNoZXZyb24tdXBcIik7XHJcbiAgICAgICAgICAgIGljb25FbGVtZW50LmFkZENsYXNzKFwiZ3VpLWljb24tY2hldnJvbi1kb3duXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXI/P3JlZi0tMSEuL3NyYy90cy9ldmVudGhhbmRsZXJzL0V4cGFuZENvbGxhcHNlTWFuYWdlci50cyIsImV4cG9ydCBlbnVtIEZpbHRlckFjdGlvblR5cGUge1xuICAgIEFkZCA9IFwiQWRkXCIsXG4gICAgTWludXMgPSBcIk1pbnVzXCIsXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvdHNsaW50LWxvYWRlcj8/cmVmLS0xIS4vc3JjL3RzL21vZGVscy9GaWx0ZXJBY3Rpb25UeXBlLnRzIiwiZXhwb3J0ICogZnJvbSBcIi4vRmFjZXRcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vRmlsdGVyXCI7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy90c2xpbnQtbG9hZGVyPz9yZWYtLTEhLi9zcmMvdHMvbWFpbi9FbnRyeS50cyIsImltcG9ydCB7IEhvdEtleXNGYWNldEhhbmRsZXIgfSBmcm9tIFwiLi4vZXZlbnRoYW5kbGVycy9Ib3RLZXlzRmFjZXRIYW5kbGVyXCI7XG5pbXBvcnQgeyBJRmFjZXQgfSBmcm9tIFwiLi4vbW9kZWxzL0lGYWNldFwiO1xuaW1wb3J0IHsgSUZhY2V0VmFsdWUgfSBmcm9tIFwiLi4vbW9kZWxzL0lGYWNldFZhbHVlXCI7XG5pbXBvcnQgeyBGYWNldFRlbXBsYXRlU2VydmljZSB9IGZyb20gXCIuLi9zZXJ2aWNlcy9GYWNldFRlbXBsYXRlU2VydmljZVwiO1xuaW1wb3J0IHsgSUZhY2V0VGVtcGxhdGVTZXJ2aWNlIH0gZnJvbSBcIi4uL3NlcnZpY2VzL0lGYWNldFRlbXBsYXRlU2VydmljZVwiO1xuaW1wb3J0IHsgRmFjZXRDb25maWdTdG9yZSB9IGZyb20gXCIuLy4uL2NvbmZpZy9GYWNldENvbmZpZ1N0b3JlXCI7XG5pbXBvcnQgeyBJRmFjZXRPcHRpb25zIH0gZnJvbSBcIi4vLi4vY29uZmlnL0lGYWNldE9wdGlvbnNcIjtcbmltcG9ydCB7IEV4cGFuZENvbGxhcHNlRmFjZXRzSGFuZGxlciAsIEZhY2V0QWN0aW9uSGFuZGxlciwgRmFjZXRTZWFyY2hIYW5kbGVyLFxuICAgICAgICAgSGlkZUZhY2V0U2VjdGlvbkhhbmRsZXIsIElFdmVudEhhbmRsZXIsIFBpblVucGluRXZlbnRIYW5kbGVyLCBTaG93TW9yZUxlc3NIYW5kbGVyIH0gZnJvbSBcIi4vLi4vZXZlbnRoYW5kbGVyc1wiO1xuXG5leHBvcnQgY2xhc3MgRmFjZXQge1xuICAgIHByaXZhdGUgY29uZmlnU3RvcmU6IEZhY2V0Q29uZmlnU3RvcmU7XG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZVNlcnZpY2U6IElGYWNldFRlbXBsYXRlU2VydmljZTtcbiAgICBwcml2YXRlIGZhY2V0RWxlbWVudDogSlF1ZXJ5O1xuICAgIHByaXZhdGUgaGFuZGxlckNoYWluOiBJRXZlbnRIYW5kbGVyW10gPSBbXTtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zOiBJRmFjZXRPcHRpb25zKSB7XG4gICAgICAgIHRoaXMuY29uZmlnU3RvcmUgPSAgbmV3IEZhY2V0Q29uZmlnU3RvcmUob3B0aW9ucyk7XG4gICAgICAgIHRoaXMuZmFjZXRFbGVtZW50ID0galF1ZXJ5KG9wdGlvbnMuY29udGFpbmVyRWxlbWVudCk7XG4gICAgICAgIHRoaXMudGVtcGxhdGVTZXJ2aWNlID0gbmV3IEZhY2V0VGVtcGxhdGVTZXJ2aWNlKHRoaXMuY29uZmlnU3RvcmUpO1xuICAgICAgICB0aGlzLmhhbmRsZXJDaGFpbi5wdXNoKG5ldyBFeHBhbmRDb2xsYXBzZUZhY2V0c0hhbmRsZXIodGhpcy5mYWNldEVsZW1lbnQsXG4gICAgICAgICAgICB0aGlzLmNvbmZpZ1N0b3JlLCB0aGlzLnRlbXBsYXRlU2VydmljZSkpO1xuICAgICAgICB0aGlzLmhhbmRsZXJDaGFpbi5wdXNoKG5ldyBGYWNldEFjdGlvbkhhbmRsZXIodGhpcy5mYWNldEVsZW1lbnQsIHRoaXMuY29uZmlnU3RvcmUpKTtcbiAgICAgICAgdGhpcy5oYW5kbGVyQ2hhaW4ucHVzaChuZXcgRmFjZXRTZWFyY2hIYW5kbGVyKHRoaXMuZmFjZXRFbGVtZW50LCB0aGlzLmNvbmZpZ1N0b3JlKSk7XG4gICAgICAgIHRoaXMuaGFuZGxlckNoYWluLnB1c2gobmV3IEhpZGVGYWNldFNlY3Rpb25IYW5kbGVyKHRoaXMuZmFjZXRFbGVtZW50LCB0aGlzLmNvbmZpZ1N0b3JlKSk7XG4gICAgICAgIHRoaXMuaGFuZGxlckNoYWluLnB1c2gobmV3IEhvdEtleXNGYWNldEhhbmRsZXIoKSk7XG4gICAgICAgIHRoaXMuaGFuZGxlckNoYWluLnB1c2gobmV3IFBpblVucGluRXZlbnRIYW5kbGVyKHRoaXMuZmFjZXRFbGVtZW50LCB0aGlzLmNvbmZpZ1N0b3JlLCB0aGlzLnRlbXBsYXRlU2VydmljZSkpO1xuICAgICAgICB0aGlzLmhhbmRsZXJDaGFpbi5wdXNoKG5ldyBTaG93TW9yZUxlc3NIYW5kbGVyKHRoaXMuZmFjZXRFbGVtZW50LCB0aGlzLmNvbmZpZ1N0b3JlKSk7XG4gICAgICAgIHRoaXMuaGFuZGxlckNoYWluLmZvckVhY2goKGhhbmRsZXIpID0+IHtcbiAgICAgICAgICAgIGhhbmRsZXIuUmVnaXN0ZXJEb21IYW5kbGVyKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBwdWJsaWMgYmluZCA9ICAoZmFjZXRzOiBJRmFjZXRbXSk6IHZvaWQgPT4ge1xuICAgICAgICB0aGlzLnRlbXBsYXRlU2VydmljZS5zZXREYXRhKGZhY2V0cyk7XG4gICAgICAgIGNvbnN0IGZ1bGxGYWNldCA9IHRoaXMudGVtcGxhdGVTZXJ2aWNlLmJpbmQoZmFjZXRzKTtcbiAgICAgICAgdGhpcy5mYWNldEVsZW1lbnQuaHRtbChmdWxsRmFjZXQpO1xuICAgIH1cbiAgICBwdWJsaWMgaGlkZSA9ICgpOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy5mYWNldEVsZW1lbnQuZmluZChcIi5mYWNldC1ib2R5XCIpLmZhZGVPdXQodGhpcy5jb25maWdTdG9yZS5PcHRpb25zLmFuaW1hdGlvblRpbWUpO1xuICAgICAgICB0aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMuY29sbGFwc2VkID0gdHJ1ZTtcbiAgICB9XG4gICAgcHVibGljIHNob3cgPSAoKTogdm9pZCA9PiB7XG4gICAgICAgIHRoaXMuZmFjZXRFbGVtZW50LmZpbmQoXCIuZmFjZXQtYm9keVwiKS5mYWRlSW4odGhpcy5jb25maWdTdG9yZS5PcHRpb25zLmFuaW1hdGlvblRpbWUpO1xuICAgICAgICB0aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMuY29sbGFwc2VkID0gZmFsc2U7XG4gICAgfVxuICAgIHB1YmxpYyBkZXN0cm95ID0gICgpOiB2b2lkID0+IHtcbiAgICAgICAgaWYgKCB0aGlzLmZhY2V0RWxlbWVudCAhPT0gdW5kZWZpbmVkICkge1xuICAgICAgICAgICAgdGhpcy5mYWNldEVsZW1lbnQub2ZmKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5oYW5kbGVyQ2hhaW4uZm9yRWFjaCgoaGFuZGxlcikgPT4ge1xuICAgICAgICAgICAgaWYgKGhhbmRsZXIgIT09IHVuZGVmaW5lZCAmJiBoYW5kbGVyLmRlcmVnaXN0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGhhbmRsZXIuZGVyZWdpc3RlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvdHNsaW50LWxvYWRlcj8/cmVmLS0xIS4vc3JjL3RzL21haW4vRmFjZXQudHMiLCJpbXBvcnQgeyBJRXZlbnRIYW5kbGVyIH0gZnJvbSBcIi4vSUV2ZW50SGFuZGxlclwiO1xyXG5jbGFzcyBIb3RLZXlzRmFjZXRIYW5kbGVyIGltcGxlbWVudHMgSUV2ZW50SGFuZGxlciB7XHJcblxyXG4gICAgcHVibGljIFJlZ2lzdGVyRG9tSGFuZGxlciA9ICgpOiB2b2lkID0+IHtcclxuICAgICAgICBqUXVlcnkoZG9jdW1lbnQpLm9uKFwia2V5ZG93blwiLCB0aGlzLmZvY3VzT25TZWFyY2gpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIG9uUmVzaXplID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIG9uRG9jdW1lbnRDbGljayA9IChldmVudDogYW55KTogdm9pZCA9PiB7XHJcbiAgICAgICAgLy8gRG8gbm90aGluZ1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkZVJlZ2lzdGVyID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgICAgIGpRdWVyeShkb2N1bWVudCkub2ZmKFwia2V5ZG93blwiLCB0aGlzLmZvY3VzT25TZWFyY2gpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZm9jdXNPblNlYXJjaCA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIGlmIChldmVudC5hbHRLZXkgICYmICBldmVudC5rZXkgPT09IFwiZlwiKSB7XHJcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIGpRdWVyeShcIi5maWx0ZXItc2VhcmNoLWlucHV0XCIpLmZvY3VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQge0hvdEtleXNGYWNldEhhbmRsZXJ9O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvdHNsaW50LWxvYWRlcj8/cmVmLS0xIS4vc3JjL3RzL2V2ZW50aGFuZGxlcnMvSG90S2V5c0ZhY2V0SGFuZGxlci50cyIsImltcG9ydCAqIGFzIEhhbmRsZWJhcnMgZnJvbSBcImhhbmRsZWJhcnNcIjtcbmltcG9ydCB7SUZhY2V0fSBmcm9tIFwiLi4vbW9kZWxzL0lGYWNldFwiO1xuaW1wb3J0ICogYXMgRmFjZXRNYWluIGZyb20gXCIuLy4uLy4uL2hicy9mYWNldC1tYWluLmhic1wiO1xuaW1wb3J0IHtGYWNldENvbmZpZ1N0b3JlfSBmcm9tIFwiLi8uLi9jb25maWcvRmFjZXRDb25maWdTdG9yZVwiO1xuaW1wb3J0IHtJRmFjZXRUZW1wbGF0ZVNlcnZpY2V9IGZyb20gXCIuL0lGYWNldFRlbXBsYXRlU2VydmljZVwiO1xuXG5leHBvcnQgY2xhc3MgRmFjZXRUZW1wbGF0ZVNlcnZpY2UgaW1wbGVtZW50cyBJRmFjZXRUZW1wbGF0ZVNlcnZpY2Uge1xuICBwcml2YXRlIGRhdGE6IElGYWNldFtdO1xuICBwcml2YXRlIHRlbXBhdGVGdW5jdGlvbkZvckZhY2V0TWFpbjogYW55O1xuICBwcml2YXRlIHRlbXBhdGVGdW5jdGlvbkZvckZhY2V0SGVhZGVyOiBhbnk7XG4gIHByaXZhdGUgdGVtcGF0ZUZ1bmN0aW9uRm9yRmFjZXRTdWJIZWFkZXI6IGFueTtcbiAgcHJpdmF0ZSB0ZW1wYXRlRnVuY3Rpb25Gb3JGYWNldEJvZHk6IGFueTtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjb25maWdTdG9yZTogRmFjZXRDb25maWdTdG9yZSkge1xuICAgIHRoaXMudGVtcGF0ZUZ1bmN0aW9uRm9yRmFjZXRNYWluID0gRmFjZXRNYWluO1xuICB9XG4gIHB1YmxpYyBiaW5kKGZhY2V0czogSUZhY2V0W10pOiBzdHJpbmcge1xuICAgIGNvbnN0IGNvbGxhcHNlZDogYm9vbGVhbiA9IHRoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5jb2xsYXBzZWQ7XG4gICAgY29uc3QgbWVyZ2VkRmFjZXRzID0gdGhpcy5tZXJnZVdpdGhGYWNldENvbmZpZyhmYWNldHMpO1xuICAgIGNvbnN0IGZhdm9yaXRlcyA9IG1lcmdlZEZhY2V0cy5maWx0ZXIoKGYpID0+IGYucGlubmVkICE9PSB1bmRlZmluZWQgJiYgZi5waW5uZWQpO1xuICAgIGNvbnN0IG5vbkZhdm9yaXRlcyA9IG1lcmdlZEZhY2V0cy5maWx0ZXIoKGYpID0+IGYucGlubmVkID09PSB1bmRlZmluZWQgfHwgIWYucGlubmVkKTtcbiAgICBmYXZvcml0ZXMuc29ydCh0aGlzLmNvbXBhcmVGbik7XG4gICAgbm9uRmF2b3JpdGVzLnNvcnQodGhpcy5jb21wYXJlRm4pO1xuICAgIGNvbnN0IG5vT2ZGYWNldFRvU2hvdyA9IHRoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5ub09mRmFjZXRUb1Nob3c7XG4gICAgcmV0dXJuIHRoaXMudGVtcGF0ZUZ1bmN0aW9uRm9yRmFjZXRNYWluKHtmYXZvcml0ZXMsIG5vbkZhdm9yaXRlcywgbm9PZkZhY2V0VG9TaG93fSk7XG4gIH1cbiAgcHVibGljIHNldERhdGEgPSAoZmFjZXRzOiBJRmFjZXRbXSk6IHZvaWQgPT4ge1xuICAgIHRoaXMuZGF0YSA9IGZhY2V0cztcbiAgfVxuICBwdWJsaWMgZ2V0RGF0YSA9ICgpOiBJRmFjZXRbXSA9PiB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YTtcbiAgfVxuICBwcml2YXRlIGNvbXBhcmVGbiA9IChwcmV2OiBhbnksIG5leHQ6IGFueSkgPT4ge1xuICAgIGlmIChwcmV2Lm9yZGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgaWYgKG5leHQub3JkZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIHJldHVybiBwcmV2Lm9yZGVyIC0gbmV4dC5vcmRlcjtcbiAgfVxuICBwcml2YXRlIG1lcmdlV2l0aEZhY2V0Q29uZmlnID0gKGZhY2V0czogSUZhY2V0W10pID0+IHtcbiAgICBjb25zdCBtZXJnZWRBcnJheTogYW55W10gPSBbXTtcbiAgICBmb3IgKGNvbnN0IGZhY2V0IG9mIGZhY2V0cykge1xuICAgICAgZm9yIChjb25zdCBmYWNldENvbmZpZyBvZiB0aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMuZmFjZXRDb25maWcpIHtcbiAgICAgICAgaWYgKGZhY2V0Q29uZmlnLmlkID09PSBmYWNldC5pZCkge1xuICAgICAgICAgIG1lcmdlZEFycmF5LnB1c2goe1xuICAgICAgICAgICAgY29sbGFwc2VkOiBmYWNldENvbmZpZy5jb2xsYXBzZWQsXG4gICAgICAgICAgICBmYWNldFJhbmdlOiBmYWNldC5mYWNldFJhbmdlLFxuICAgICAgICAgICAgZmFjZXRWYWx1ZXM6IGZhY2V0LmZhY2V0VmFsdWVzLFxuICAgICAgICAgICAgaWQ6IGZhY2V0Q29uZmlnLmlkLFxuICAgICAgICAgICAgbmFtZTogZmFjZXRDb25maWcubmFtZSxcbiAgICAgICAgICAgIG9yZGVyOiBmYWNldENvbmZpZy5vcmRlcixcbiAgICAgICAgICAgIHBpbm5lZDogZmFjZXRDb25maWcucGlubmVkLFxuICAgICAgICAgICAgdHlwZTogZmFjZXRDb25maWcudHlwZSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VkQXJyYXk7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy90c2xpbnQtbG9hZGVyPz9yZWYtLTEhLi9zcmMvdHMvc2VydmljZXMvRmFjZXRUZW1wbGF0ZVNlcnZpY2UudHMiLCJ2YXIgSGFuZGxlYmFycyA9IHJlcXVpcmUoXCJoYW5kbGViYXJzXCIpO1xuZnVuY3Rpb24gX19kZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIChvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmopOyB9XG5tb2R1bGUuZXhwb3J0cyA9IChIYW5kbGViYXJzW1wiZGVmYXVsdFwiXSB8fCBIYW5kbGViYXJzKS50ZW1wbGF0ZSh7XCIxXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxO1xuXG4gIHJldHVybiBcIiAgICA8ZGl2IGNsYXNzPVxcXCJmYWNldC1ib2R5IGd1aSBmbHVpZC1oIG9mLWhpZGRlbiBndWktaGlkZGVuXFxcIj5cIlxuICAgICsgKChzdGFjazEgPSBjb250YWluZXIuaW52b2tlUGFydGlhbChyZXF1aXJlKFwiQzpcXFxcVXNlcnNcXFxccm91c3R1cmdcXFxcU291cmNlXFxcXFJlcG9zXFxcXFNlYXJjaE1hc3RlclxcXFxGYWNldG9vXFxcXHNyY1xcXFxoYnNcXFxcZmFjZXQtYm9keS5oYnNcIiksZGVwdGgwLHtcIm5hbWVcIjpcImZhY2V0LWJvZHlcIixcImRhdGFcIjpkYXRhLFwiaGVscGVyc1wiOmhlbHBlcnMsXCJwYXJ0aWFsc1wiOnBhcnRpYWxzLFwiZGVjb3JhdG9yc1wiOmNvbnRhaW5lci5kZWNvcmF0b3JzfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCI8L2Rpdj5cXG5cIjtcbn0sXCIzXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxO1xuXG4gIHJldHVybiBcIiAgICA8ZGl2IGNsYXNzPVxcXCJmYWNldC1ib2R5IGd1aSBmbHVpZC1oIG9mLWhpZGRlblxcXCI+XCJcbiAgICArICgoc3RhY2sxID0gY29udGFpbmVyLmludm9rZVBhcnRpYWwocmVxdWlyZShcIkM6XFxcXFVzZXJzXFxcXHJvdXN0dXJnXFxcXFNvdXJjZVxcXFxSZXBvc1xcXFxTZWFyY2hNYXN0ZXJcXFxcRmFjZXRvb1xcXFxzcmNcXFxcaGJzXFxcXGZhY2V0LWJvZHkuaGJzXCIpLGRlcHRoMCx7XCJuYW1lXCI6XCJmYWNldC1ib2R5XCIsXCJkYXRhXCI6ZGF0YSxcImhlbHBlcnNcIjpoZWxwZXJzLFwicGFydGlhbHNcIjpwYXJ0aWFscyxcImRlY29yYXRvcnNcIjpjb250YWluZXIuZGVjb3JhdG9yc30pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiPC9kaXY+XFxuXCI7XG59LFwiY29tcGlsZXJcIjpbNyxcIj49IDQuMC4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMTtcblxuICByZXR1cm4gXCI8ZGl2IGNsYXNzPVxcXCJndWkgZmx1aWQtaCBcXFwiPlxcblwiXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnNbXCJpZlwiXS5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNvbGxhcHNlZCA6IGRlcHRoMCkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMSwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLnByb2dyYW0oMywgZGF0YSwgMCksXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiPC9kaXY+XCI7XG59LFwidXNlUGFydGlhbFwiOnRydWUsXCJ1c2VEYXRhXCI6dHJ1ZX0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2hicy9mYWNldC1tYWluLmhic1xuLy8gbW9kdWxlIGlkID0gMTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCJ2YXIgSGFuZGxlYmFycyA9IHJlcXVpcmUoXCJoYW5kbGViYXJzXCIpO1xuZnVuY3Rpb24gX19kZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIChvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmopOyB9XG5tb2R1bGUuZXhwb3J0cyA9IChIYW5kbGViYXJzW1wiZGVmYXVsdFwiXSB8fCBIYW5kbGViYXJzKS50ZW1wbGF0ZSh7XCIxXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEsYmxvY2tQYXJhbXMsZGVwdGhzKSB7XG4gICAgdmFyIHN0YWNrMTtcblxuICByZXR1cm4gXCIgXCJcbiAgICArICgoc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuZmF2b3JpdGVzIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDIsIGRhdGEsIDAsIGJsb2NrUGFyYW1zLCBkZXB0aHMpLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpO1xufSxcIjJcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSxibG9ja1BhcmFtcyxkZXB0aHMpIHtcbiAgICB2YXIgc3RhY2sxLCBhbGlhczE9Y29udGFpbmVyLmxhbWJkYSwgYWxpYXMyPWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uLCBhbGlhczM9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KTtcblxuICByZXR1cm4gXCJcXHJcXG48ZGl2IGNsYXNzPVxcXCJpdGVtIGZhY2V0LWl0ZW0gY29sbGFwc2VkIGd1aSBtLXQtNlxcXCIgZGF0YS1hdHRyLW5hbWU9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiXFxcIj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiY29udGVudFxcXCI+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmYWNldC1pdGVtLWhlYWRlciBmbHVpZCBndWkgaXRlbSBmbGV4IGpjLXNiXFxcIj5cXHJcXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiZ3VpIGd1aS1zdWJoZWFkaW5nLTEgcHJpbWFyeSBtLTAgZXhwYW5zaW9uLWljb24gY3Vyc29yLXBvaW50ZXJcXFwiIHRhYmluZGV4PVxcXCIwXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCIgXCJcbiAgICArICgoc3RhY2sxID0gX19kZWZhdWx0KHJlcXVpcmUoXCJDOlxcXFxVc2Vyc1xcXFxyb3VzdHVyZ1xcXFxTb3VyY2VcXFxcUmVwb3NcXFxcU2VhcmNoTWFzdGVyXFxcXEZhY2V0b29cXFxcc3JjXFxcXGhic1xcXFxoZWxwZXJzXFxcXFNlbGVjdGVkRmlsdGVyc0NvdW50LnRzXCIpKS5jYWxsKGFsaWFzMywoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuZmFjZXRWYWx1ZXMgOiBkZXB0aDApLHtcIm5hbWVcIjpcIlNlbGVjdGVkRmlsdGVyc0NvdW50XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiXFxyXFxuICAgICAgICAgICAgPC9zcGFuPlxcclxcbiAgICAgICAgICAgIDxzcGFuPlxcclxcbiAgICAgICAgICAgICAgICA8aSBkYXRhLWF0dHItaWQ9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5pZCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCIgY2xhc3M9XFxcImd1aSBndWktaWNvbiBzZWxlY3RhYmxlIHByaW1hcnkgZ3VpLWljb24tdW5waW4gbS10LTUgbS1yLTEwIHVucGluLWljb24gY3Vyc29yLXBvaW50ZXJcXFwiIHRhYmluZGV4PVxcXCIwXFxcIj48L2k+XFxyXFxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJndWkgZ3VpLWljb24gc2VsZWN0YWJsZSBndWktaWNvbi1jaGV2cm9uLXVwIHByaW1hcnkgZXhwYW5zaW9uLWljb24gbS10LTUgbS1yLTEwIGN1cnNvci1wb2ludGVyXFxcIiB0YWJpbmRleD1cXFwiMFxcXCI+PC9pPlxcclxcbiAgICAgICAgICAgIDwvc3Bhbj5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiY2xlYXJcXFwiPjwvZGl2PlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiZGVzY3JpcHRpb24gZ3VpIGZhY2V0LWl0ZW0tZGVzY3JpcHRpb24gbS10LTIgbS1sLTVcXFwiPlxcclxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImd1aSBmbHVpZC13IG0tMCBwLTBcXFwiPlxcclxcblwiXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnMuZWFjaC5jYWxsKGFsaWFzMywoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuZmFjZXRWYWx1ZXMgOiBkZXB0aDApLHtcIm5hbWVcIjpcImVhY2hcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMywgZGF0YSwgMCwgYmxvY2tQYXJhbXMsIGRlcHRocyksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiICAgICAgICAgICAgICAgIFwiXG4gICAgKyAoKHN0YWNrMSA9IF9fZGVmYXVsdChyZXF1aXJlKFwiQzpcXFxcVXNlcnNcXFxccm91c3R1cmdcXFxcU291cmNlXFxcXFJlcG9zXFxcXFNlYXJjaE1hc3RlclxcXFxGYWNldG9vXFxcXHNyY1xcXFxoYnNcXFxcaGVscGVyc1xcXFxTaG93TW9yZUxlc3NMaW5rLnRzXCIpKS5jYWxsKGFsaWFzMywoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuZmFjZXRWYWx1ZXMgOiBkZXB0aDApLChkZXB0aHNbMV0gIT0gbnVsbCA/IGRlcHRoc1sxXS5ub09mRmFjZXRUb1Nob3cgOiBkZXB0aHNbMV0pLHtcIm5hbWVcIjpcIlNob3dNb3JlTGVzc0xpbmtcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCJcXHJcXG4gICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICA8L2Rpdj5cXHJcXG48L2Rpdj5cXHJcXG5cIjtcbn0sXCIzXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEsYmxvY2tQYXJhbXMsZGVwdGhzKSB7XG4gICAgdmFyIHN0YWNrMSwgYWxpYXMxPWRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSk7XG5cbiAgcmV0dXJuIFwiICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImd1aSBpdGVtIFwiXG4gICAgKyBjb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbihfX2RlZmF1bHQocmVxdWlyZShcIkM6XFxcXFVzZXJzXFxcXHJvdXN0dXJnXFxcXFNvdXJjZVxcXFxSZXBvc1xcXFxTZWFyY2hNYXN0ZXJcXFxcRmFjZXRvb1xcXFxzcmNcXFxcaGJzXFxcXGhlbHBlcnNcXFxcQ2hlY2tMZW5ndGgudHNcIikpLmNhbGwoYWxpYXMxLChkYXRhICYmIGRhdGEuaW5kZXgpLChkZXB0aHNbMl0gIT0gbnVsbCA/IGRlcHRoc1syXS5ub09mRmFjZXRUb1Nob3cgOiBkZXB0aHNbMl0pLHtcIm5hbWVcIjpcIkNoZWNrTGVuZ3RoXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKVxuICAgICsgXCJcXFwiPlxcclxcblwiXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnNbXCJpZlwiXS5jYWxsKGFsaWFzMSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuc2VsZWN0ZWQgOiBkZXB0aDApLHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDQsIGRhdGEsIDAsIGJsb2NrUGFyYW1zLCBkZXB0aHMpLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5wcm9ncmFtKDYsIGRhdGEsIDAsIGJsb2NrUGFyYW1zLCBkZXB0aHMpLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIiAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG5cIjtcbn0sXCI0XCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEsYmxvY2tQYXJhbXMsZGVwdGhzKSB7XG4gICAgdmFyIGFsaWFzMT1jb250YWluZXIubGFtYmRhLCBhbGlhczI9Y29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb24sIGFsaWFzMz1kZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pO1xuXG4gIHJldHVybiBcIiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGRhdGEtYXR0ci12YWx1ZT1cXFwiXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmxhYmVsIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiXFxcIiB0aXRsZT1cXFwiXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmxhYmVsIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiKFwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jb3VudCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIilcXFwiIGNsYXNzPVxcXCJndWkgY3Vyc29yLXBvaW50ZXIgbm8td3JhcCBwcmltYXJ5IHRleHQtc2hvcnRlbiBtLTBcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cXFwiZ3VpIGZhY2V0LXZhbHVlLWNoZWNrYm94IGN1cnNvci1wb2ludGVyIG0tbC0wXFxcIiBpZD1cXFwiXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmxhYmVsIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiLVwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkYXRhICYmIGRhdGEuaW5kZXgpLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIFwiXG4gICAgKyBhbGlhczIoX19kZWZhdWx0KHJlcXVpcmUoXCJDOlxcXFxVc2Vyc1xcXFxyb3VzdHVyZ1xcXFxTb3VyY2VcXFxcUmVwb3NcXFxcU2VhcmNoTWFzdGVyXFxcXEZhY2V0b29cXFxcc3JjXFxcXGhic1xcXFxoZWxwZXJzXFxcXENoZWNrZWQudHNcIikpLmNhbGwoYWxpYXMzLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5zZWxlY3RlZCA6IGRlcHRoMCkse1wibmFtZVwiOlwiQ2hlY2tlZFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSlcbiAgICArIFwiIFwiXG4gICAgKyBhbGlhczIoX19kZWZhdWx0KHJlcXVpcmUoXCJDOlxcXFxVc2Vyc1xcXFxyb3VzdHVyZ1xcXFxTb3VyY2VcXFxcUmVwb3NcXFxcU2VhcmNoTWFzdGVyXFxcXEZhY2V0b29cXFxcc3JjXFxcXGhic1xcXFxoZWxwZXJzXFxcXERpc2FibGVkLnRzXCIpKS5jYWxsKGFsaWFzMywoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuZGlzYWJsZWQgOiBkZXB0aDApLHtcIm5hbWVcIjpcIkRpc2FibGVkXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKVxuICAgICsgXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aHNbMV0gIT0gbnVsbCA/IGRlcHRoc1sxXS5pZCA6IGRlcHRoc1sxXSksIGRlcHRoMCkpXG4gICAgKyBcIjpcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGFiZWwgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCI6XCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoc1sxXSAhPSBudWxsID8gZGVwdGhzWzFdLnR5cGUgOiBkZXB0aHNbMV0pLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIHR5cGU9XFxcImNoZWNrYm94XFxcIiAvPiBcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGFiZWwgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiZ3VpIGd1aS1zdWJoZWFkaW5nLTEgbS0wXFxcIj4oXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNvdW50IDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiKTwvc3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XFxyXFxuXCI7XG59LFwiNlwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhLGJsb2NrUGFyYW1zLGRlcHRocykge1xuICAgIHZhciBhbGlhczE9Y29udGFpbmVyLmxhbWJkYSwgYWxpYXMyPWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uLCBhbGlhczM9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KTtcblxuICByZXR1cm4gXCIgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBkYXRhLWF0dHItdmFsdWU9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5sYWJlbCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCIgdGl0bGU9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5sYWJlbCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIihcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY291bnQgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCIpXFxcIiBjbGFzcz1cXFwiZ3VpIGN1cnNvci1wb2ludGVyIG5vLXdyYXAgdGV4dC1zaG9ydGVuIG0tMFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPVxcXCJndWkgZmFjZXQtdmFsdWUtY2hlY2tib3ggY3Vyc29yLXBvaW50ZXIgbS1sLTBcXFwiIGlkPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGFiZWwgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCItXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRhdGEgJiYgZGF0YS5pbmRleCksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCIgXCJcbiAgICArIGFsaWFzMihfX2RlZmF1bHQocmVxdWlyZShcIkM6XFxcXFVzZXJzXFxcXHJvdXN0dXJnXFxcXFNvdXJjZVxcXFxSZXBvc1xcXFxTZWFyY2hNYXN0ZXJcXFxcRmFjZXRvb1xcXFxzcmNcXFxcaGJzXFxcXGhlbHBlcnNcXFxcQ2hlY2tlZC50c1wiKSkuY2FsbChhbGlhczMsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnNlbGVjdGVkIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJDaGVja2VkXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKVxuICAgICsgXCIgXCJcbiAgICArIGFsaWFzMihfX2RlZmF1bHQocmVxdWlyZShcIkM6XFxcXFVzZXJzXFxcXHJvdXN0dXJnXFxcXFNvdXJjZVxcXFxSZXBvc1xcXFxTZWFyY2hNYXN0ZXJcXFxcRmFjZXRvb1xcXFxzcmNcXFxcaGJzXFxcXGhlbHBlcnNcXFxcRGlzYWJsZWQudHNcIikpLmNhbGwoYWxpYXMzLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5kaXNhYmxlZCA6IGRlcHRoMCkse1wibmFtZVwiOlwiRGlzYWJsZWRcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpXG4gICAgKyBcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT1cXFwiXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoc1sxXSAhPSBudWxsID8gZGVwdGhzWzFdLmlkIDogZGVwdGhzWzFdKSwgZGVwdGgwKSlcbiAgICArIFwiOlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5sYWJlbCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIjpcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGhzWzFdICE9IG51bGwgPyBkZXB0aHNbMV0udHlwZSA6IGRlcHRoc1sxXSksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCIgdHlwZT1cXFwiY2hlY2tib3hcXFwiIC8+IFwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5sYWJlbCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJndWkgZ3VpLXN1YmhlYWRpbmctMSBtLTBcXFwiPihcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY291bnQgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCIpPC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cXHJcXG5cIjtcbn0sXCI4XCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICByZXR1cm4gXCI8ZGl2IGNsYXNzPVxcXCJndWkgbS10LTEwXFxcIj5cXHJcXG4gICAgXFxyXFxuPC9kaXY+XFxyXFxuXCI7XG59LFwiY29tcGlsZXJcIjpbNyxcIj49IDQuMC4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhLGJsb2NrUGFyYW1zLGRlcHRocykge1xuICAgIHZhciBzdGFjazE7XG5cbiAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFwiZ3VpIG0tYi01IG0tdC01XFxcIj5cXHJcXG4gICAgPHNwYW4gY2xhc3M9XFxcImd1aSBndWktc3ViaGVhZGluZy0xXFxcIj5cXHJcXG4gICAgICAgIFBJTk5FRCBGSUxURVJTXFxyXFxuICAgIDwvc3Bhbj5cXHJcXG48L2Rpdj5cXHJcXG5cIlxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzW1wiaWZcIl0uY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmZhdm9yaXRlcyA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEubGVuZ3RoIDogc3RhY2sxKSx7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgxLCBkYXRhLCAwLCBibG9ja1BhcmFtcywgZGVwdGhzKSxcImludmVyc2VcIjpjb250YWluZXIucHJvZ3JhbSg4LCBkYXRhLCAwLCBibG9ja1BhcmFtcywgZGVwdGhzKSxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKTtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZSxcInVzZURlcHRoc1wiOnRydWV9KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9oYnMvZmFjZXQtcGlubmVkLmhic1xuLy8gbW9kdWxlIGlkID0gMTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCJ2YXIgSGFuZGxlYmFycyA9IHJlcXVpcmUoXCJoYW5kbGViYXJzXCIpO1xuZnVuY3Rpb24gX19kZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIChvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmopOyB9XG5tb2R1bGUuZXhwb3J0cyA9IChIYW5kbGViYXJzW1wiZGVmYXVsdFwiXSB8fCBIYW5kbGViYXJzKS50ZW1wbGF0ZSh7XCIxXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEsYmxvY2tQYXJhbXMsZGVwdGhzKSB7XG4gICAgdmFyIHN0YWNrMSwgYWxpYXMxPWRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksIGFsaWFzMj1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbiwgYWxpYXMzPWNvbnRhaW5lci5sYW1iZGE7XG5cbiAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFwiaXRlbSBmYWNldC1pdGVtIGd1aSBtLXQtNiBcIlxuICAgICsgYWxpYXMyKF9fZGVmYXVsdChyZXF1aXJlKFwiQzpcXFxcVXNlcnNcXFxccm91c3R1cmdcXFxcU291cmNlXFxcXFJlcG9zXFxcXFNlYXJjaE1hc3RlclxcXFxGYWNldG9vXFxcXHNyY1xcXFxoYnNcXFxcaGVscGVyc1xcXFxDb2xsYXBzZWQudHNcIikpLmNhbGwoYWxpYXMxLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jb2xsYXBzZWQgOiBkZXB0aDApLHtcIm5hbWVcIjpcIkNvbGxhcHNlZFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSlcbiAgICArIFwiXFxcIiBkYXRhLWF0dHItaWQ9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMzKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5pZCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCIgZGF0YS1hdHRyLW5hbWU9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMzKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiXFxcIj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiY29udGVudFxcXCI+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmYWNldC1pdGVtLWhlYWRlciBmbHVpZCBndWkgaXRlbSBmbGV4IGpjLXNiXFxcIj5cXHJcXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiZ3VpIGd1aS1zdWJoZWFkaW5nLTEgcHJpbWFyeSBtLTAgZXhwYW5zaW9uLWljb24gY3Vyc29yLXBvaW50ZXJcXFwiIHRhYmluZGV4PVxcXCIwXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgXCJcbiAgICArIGFsaWFzMihhbGlhczMoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCIgXCJcbiAgICArICgoc3RhY2sxID0gX19kZWZhdWx0KHJlcXVpcmUoXCJDOlxcXFxVc2Vyc1xcXFxyb3VzdHVyZ1xcXFxTb3VyY2VcXFxcUmVwb3NcXFxcU2VhcmNoTWFzdGVyXFxcXEZhY2V0b29cXFxcc3JjXFxcXGhic1xcXFxoZWxwZXJzXFxcXFNlbGVjdGVkRmlsdGVyc0NvdW50LnRzXCIpKS5jYWxsKGFsaWFzMSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuZmFjZXRWYWx1ZXMgOiBkZXB0aDApLHtcIm5hbWVcIjpcIlNlbGVjdGVkRmlsdGVyc0NvdW50XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiXFxyXFxuICAgICAgICAgICAgPC9zcGFuPlxcclxcbiAgICAgICAgICAgIDxzcGFuPlxcclxcbiAgICAgICAgICAgICAgICA8aSBkYXRhLWF0dHItaWQ9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMzKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5pZCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCIgY2xhc3M9XFxcImd1aSBndWktaWNvbiBzZWxlY3RhYmxlIHByaW1hcnkgZ3VpLWljb24tcGluIG0tdC01IHBpbi1pY29uIG0tci0xMCBjdXJzb3ItcG9pbnRlclxcXCIgdGFiaW5kZXg9XFxcIjBcXFwiPjwvaT5cXHJcXG5cIlxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzW1wiaWZcIl0uY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNvbGxhcHNlZCA6IGRlcHRoMCkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMiwgZGF0YSwgMCwgYmxvY2tQYXJhbXMsIGRlcHRocyksXCJpbnZlcnNlXCI6Y29udGFpbmVyLnByb2dyYW0oNCwgZGF0YSwgMCwgYmxvY2tQYXJhbXMsIGRlcHRocyksXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiICAgICAgICAgICAgPC9zcGFuPlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjbGVhclxcXCI+PC9kaXY+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJkZXNjcmlwdGlvbiBndWkgXCJcbiAgICArIGFsaWFzMihfX2RlZmF1bHQocmVxdWlyZShcIkM6XFxcXFVzZXJzXFxcXHJvdXN0dXJnXFxcXFNvdXJjZVxcXFxSZXBvc1xcXFxTZWFyY2hNYXN0ZXJcXFxcRmFjZXRvb1xcXFxzcmNcXFxcaGJzXFxcXGhlbHBlcnNcXFxcSGlkZGVuLnRzXCIpKS5jYWxsKGFsaWFzMSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY29sbGFwc2VkIDogZGVwdGgwKSx0cnVlLHtcIm5hbWVcIjpcIkhpZGRlblwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSlcbiAgICArIFwiIGZhY2V0LWl0ZW0tZGVzY3JpcHRpb24gbS10LTIgbS1sLTVcXFwiPlxcclxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImd1aSBmbHVpZC13IG0tMCBwLTBcXFwiPlxcclxcblwiXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnMuZWFjaC5jYWxsKGFsaWFzMSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuZmFjZXRWYWx1ZXMgOiBkZXB0aDApLHtcIm5hbWVcIjpcImVhY2hcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oNiwgZGF0YSwgMCwgYmxvY2tQYXJhbXMsIGRlcHRocyksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiICAgICAgICAgICAgICAgIFwiXG4gICAgKyAoKHN0YWNrMSA9IF9fZGVmYXVsdChyZXF1aXJlKFwiQzpcXFxcVXNlcnNcXFxccm91c3R1cmdcXFxcU291cmNlXFxcXFJlcG9zXFxcXFNlYXJjaE1hc3RlclxcXFxGYWNldG9vXFxcXHNyY1xcXFxoYnNcXFxcaGVscGVyc1xcXFxTaG93TW9yZUxlc3NMaW5rLnRzXCIpKS5jYWxsKGFsaWFzMSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuZmFjZXRWYWx1ZXMgOiBkZXB0aDApLChkZXB0aHNbMV0gIT0gbnVsbCA/IGRlcHRoc1sxXS5ub09mRmFjZXRUb1Nob3cgOiBkZXB0aHNbMV0pLHtcIm5hbWVcIjpcIlNob3dNb3JlTGVzc0xpbmtcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCJcXHJcXG4gICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICA8L2Rpdj5cXHJcXG48L2Rpdj5cXHJcXG5cIjtcbn0sXCIyXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICByZXR1cm4gXCIgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJndWkgZ3VpLWljb24gc2VsZWN0YWJsZSBndWktaWNvbi1jaGV2cm9uLXVwIHByaW1hcnkgZXhwYW5zaW9uLWljb24gbS10LTUgbS1yLTEwIGN1cnNvci1wb2ludGVyXFxcIiB0YWJpbmRleD1cXFwiMFxcXCI+PC9pPlxcclxcblwiO1xufSxcIjRcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHJldHVybiBcIiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XFxcImd1aSBndWktaWNvbiBzZWxlY3RhYmxlIGd1aS1pY29uLWNoZXZyb24tZG93biBwcmltYXJ5IGV4cGFuc2lvbi1pY29uIG0tdC01IG0tci0xMCBjdXJzb3ItcG9pbnRlclxcXCIgdGFiaW5kZXg9XFxcIjBcXFwiPjwvaT5cXHJcXG5cIjtcbn0sXCI2XCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEsYmxvY2tQYXJhbXMsZGVwdGhzKSB7XG4gICAgdmFyIHN0YWNrMSwgYWxpYXMxPWRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSk7XG5cbiAgcmV0dXJuIFwiICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImd1aSBpdGVtIFwiXG4gICAgKyBjb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbihfX2RlZmF1bHQocmVxdWlyZShcIkM6XFxcXFVzZXJzXFxcXHJvdXN0dXJnXFxcXFNvdXJjZVxcXFxSZXBvc1xcXFxTZWFyY2hNYXN0ZXJcXFxcRmFjZXRvb1xcXFxzcmNcXFxcaGJzXFxcXGhlbHBlcnNcXFxcQ2hlY2tMZW5ndGgudHNcIikpLmNhbGwoYWxpYXMxLChkYXRhICYmIGRhdGEuaW5kZXgpLChkZXB0aHNbMl0gIT0gbnVsbCA/IGRlcHRoc1syXS5ub09mRmFjZXRUb1Nob3cgOiBkZXB0aHNbMl0pLHtcIm5hbWVcIjpcIkNoZWNrTGVuZ3RoXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKVxuICAgICsgXCJcXFwiPlxcclxcblwiXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnNbXCJpZlwiXS5jYWxsKGFsaWFzMSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuc2VsZWN0ZWQgOiBkZXB0aDApLHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDcsIGRhdGEsIDAsIGJsb2NrUGFyYW1zLCBkZXB0aHMpLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5wcm9ncmFtKDksIGRhdGEsIDAsIGJsb2NrUGFyYW1zLCBkZXB0aHMpLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIiAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG5cIjtcbn0sXCI3XCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEsYmxvY2tQYXJhbXMsZGVwdGhzKSB7XG4gICAgdmFyIGFsaWFzMT1jb250YWluZXIubGFtYmRhLCBhbGlhczI9Y29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb24sIGFsaWFzMz1kZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pO1xuXG4gIHJldHVybiBcIiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGRhdGEtYXR0ci12YWx1ZT1cXFwiXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmxhYmVsIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiXFxcIiB0aXRsZT1cXFwiXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmxhYmVsIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiKFwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jb3VudCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIilcXFwiIGNsYXNzPVxcXCJndWkgY3Vyc29yLXBvaW50ZXIgbm8td3JhcCBwcmltYXJ5IHRleHQtc2hvcnRlbiBtLTBcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cXFwiZ3VpIGZhY2V0LXZhbHVlLWNoZWNrYm94IGN1cnNvci1wb2ludGVyIG0tbC0wXFxcIiBpZD1cXFwiXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmxhYmVsIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiLVwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkYXRhICYmIGRhdGEuaW5kZXgpLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIFwiXG4gICAgKyBhbGlhczIoX19kZWZhdWx0KHJlcXVpcmUoXCJDOlxcXFxVc2Vyc1xcXFxyb3VzdHVyZ1xcXFxTb3VyY2VcXFxcUmVwb3NcXFxcU2VhcmNoTWFzdGVyXFxcXEZhY2V0b29cXFxcc3JjXFxcXGhic1xcXFxoZWxwZXJzXFxcXENoZWNrZWQudHNcIikpLmNhbGwoYWxpYXMzLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5zZWxlY3RlZCA6IGRlcHRoMCkse1wibmFtZVwiOlwiQ2hlY2tlZFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSlcbiAgICArIFwiIFwiXG4gICAgKyBhbGlhczIoX19kZWZhdWx0KHJlcXVpcmUoXCJDOlxcXFxVc2Vyc1xcXFxyb3VzdHVyZ1xcXFxTb3VyY2VcXFxcUmVwb3NcXFxcU2VhcmNoTWFzdGVyXFxcXEZhY2V0b29cXFxcc3JjXFxcXGhic1xcXFxoZWxwZXJzXFxcXERpc2FibGVkLnRzXCIpKS5jYWxsKGFsaWFzMywoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuZGlzYWJsZWQgOiBkZXB0aDApLHtcIm5hbWVcIjpcIkRpc2FibGVkXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKVxuICAgICsgXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aHNbMV0gIT0gbnVsbCA/IGRlcHRoc1sxXS5pZCA6IGRlcHRoc1sxXSksIGRlcHRoMCkpXG4gICAgKyBcIjpcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGFiZWwgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCI6XCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoc1sxXSAhPSBudWxsID8gZGVwdGhzWzFdLnR5cGUgOiBkZXB0aHNbMV0pLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIHR5cGU9XFxcImNoZWNrYm94XFxcIiAvPiBcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGFiZWwgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiZ3VpIGd1aS1zdWJoZWFkaW5nLTEgbS0wXFxcIj4oXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNvdW50IDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiKTwvc3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XFxyXFxuXCI7XG59LFwiOVwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhLGJsb2NrUGFyYW1zLGRlcHRocykge1xuICAgIHZhciBhbGlhczE9Y29udGFpbmVyLmxhbWJkYSwgYWxpYXMyPWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uLCBhbGlhczM9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KTtcblxuICByZXR1cm4gXCIgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBkYXRhLWF0dHItdmFsdWU9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5sYWJlbCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCIgdGl0bGU9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5sYWJlbCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIihcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY291bnQgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCIpXFxcIiBjbGFzcz1cXFwiZ3VpIGN1cnNvci1wb2ludGVyIG5vLXdyYXAgdGV4dC1zaG9ydGVuIG0tMFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPVxcXCJndWkgZmFjZXQtdmFsdWUtY2hlY2tib3ggY3Vyc29yLXBvaW50ZXIgbS1sLTBcXFwiIGlkPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGFiZWwgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCItXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRhdGEgJiYgZGF0YS5pbmRleCksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCIgXCJcbiAgICArIGFsaWFzMihfX2RlZmF1bHQocmVxdWlyZShcIkM6XFxcXFVzZXJzXFxcXHJvdXN0dXJnXFxcXFNvdXJjZVxcXFxSZXBvc1xcXFxTZWFyY2hNYXN0ZXJcXFxcRmFjZXRvb1xcXFxzcmNcXFxcaGJzXFxcXGhlbHBlcnNcXFxcQ2hlY2tlZC50c1wiKSkuY2FsbChhbGlhczMsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnNlbGVjdGVkIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJDaGVja2VkXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKVxuICAgICsgXCIgXCJcbiAgICArIGFsaWFzMihfX2RlZmF1bHQocmVxdWlyZShcIkM6XFxcXFVzZXJzXFxcXHJvdXN0dXJnXFxcXFNvdXJjZVxcXFxSZXBvc1xcXFxTZWFyY2hNYXN0ZXJcXFxcRmFjZXRvb1xcXFxzcmNcXFxcaGJzXFxcXGhlbHBlcnNcXFxcRGlzYWJsZWQudHNcIikpLmNhbGwoYWxpYXMzLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5kaXNhYmxlZCA6IGRlcHRoMCkse1wibmFtZVwiOlwiRGlzYWJsZWRcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpXG4gICAgKyBcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT1cXFwiXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoc1sxXSAhPSBudWxsID8gZGVwdGhzWzFdLmlkIDogZGVwdGhzWzFdKSwgZGVwdGgwKSlcbiAgICArIFwiOlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5sYWJlbCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIjpcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGhzWzFdICE9IG51bGwgPyBkZXB0aHNbMV0udHlwZSA6IGRlcHRoc1sxXSksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCIgdHlwZT1cXFwiY2hlY2tib3hcXFwiIC8+IFwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5sYWJlbCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJndWkgZ3VpLXN1YmhlYWRpbmctMSBtLTBcXFwiPihcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY291bnQgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCIpPC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cXHJcXG5cIjtcbn0sXCJjb21waWxlclwiOls3LFwiPj0gNC4wLjBcIl0sXCJtYWluXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEsYmxvY2tQYXJhbXMsZGVwdGhzKSB7XG4gICAgdmFyIHN0YWNrMTtcblxuICByZXR1cm4gXCI8ZGl2IGNsYXNzPVxcXCJndWkgbS1iLTUgbS10LTEwIFxcXCI+XFxyXFxuICAgIDxzcGFuIGNsYXNzPVxcXCJndWkgZ3VpLXN1YmhlYWRpbmctMVxcXCI+XFxyXFxuICAgICAgICBBTEwgRklMVEVSU1xcclxcbiAgICA8L3NwYW4+XFxyXFxuPC9kaXY+XFxyXFxuXCJcbiAgICArICgoc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubm9uRmF2b3JpdGVzIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDEsIGRhdGEsIDAsIGJsb2NrUGFyYW1zLCBkZXB0aHMpLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpO1xufSxcInVzZURhdGFcIjp0cnVlLFwidXNlRGVwdGhzXCI6dHJ1ZX0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2hicy9mYWNldC11bnBpbm5lZC5oYnNcbi8vIG1vZHVsZSBpZCA9IDE3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiY29uc3QgY29sbGFwc2VkID0gKHZhbHVlOiBib29sZWFuKTogc3RyaW5nID0+IHtcclxuICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiBcIiBjb2xsYXBzZWQgXCI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gXCJcIjtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbGxhcHNlZDtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXI/P3JlZi0tMSEuL3NyYy9oYnMvaGVscGVycy9Db2xsYXBzZWQudHMiLCJjb25zdCBoaWRkZW4gPSAodmFsdWU6IGJvb2xlYW4sIGludmVydDogYm9vbGVhbik6IHN0cmluZyA9PiB7XHJcbiAgICBsZXQgaGlkZTtcclxuICAgIGlmIChpbnZlcnQpIHtcclxuICAgICAgICBpZiAoIXZhbHVlKSB7XHJcbiAgICAgICAgICAgIGhpZGUgPSB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGhpZGUgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBoaWRlID0gdHJ1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBoaWRlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGhpZGUgPyBcIiBndWktaGlkZGVuIFwiIDogXCIgXCI7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBoaWRkZW47XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy90c2xpbnQtbG9hZGVyPz9yZWYtLTEhLi9zcmMvaGJzL2hlbHBlcnMvSGlkZGVuLnRzIiwiaW1wb3J0IHtGaWx0ZXJBY3Rpb25UeXBlfSBmcm9tIFwiLi4vbW9kZWxzL0ZpbHRlckFjdGlvblR5cGVcIjtcbmltcG9ydCB7SUZhY2V0T3B0aW9uc30gZnJvbSBcIi4vSUZhY2V0T3B0aW9uc1wiO1xuXG5leHBvcnQgY2xhc3MgRmFjZXRDb25maWdTdG9yZSB7XG4gICAgcHJpdmF0ZSBvcHRpb25zOiBJRmFjZXRPcHRpb25zO1xuICAgIHByaXZhdGUgZGVmYXVsdEZhY2V0T3B0aW9uczogSUZhY2V0T3B0aW9ucyA9IHtcbiAgICAgICAgYW5pbWF0aW9uVGltZTogMjAwLFxuICAgICAgICBjb2xsYXBzZWQ6IGZhbHNlLFxuICAgICAgICBjb250YWluZXJFbGVtZW50OiBudWxsLFxuICAgICAgICBmYWNldENvbmZpZzogW10sXG4gICAgICAgIG5vT2ZGYWNldFRvU2hvdzogNSxcbiAgICAgICAgLy8gZmFjZXRzOiBbXSxcbiAgICAgICAgb25GaWx0ZXJDaGFuZ2U6IChrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZywgYWN0aW9uOiBGaWx0ZXJBY3Rpb25UeXBlKTogdm9pZCA9PiB7XG4gICAgICAgICAgICAvLyBJZ25vcmVcbiAgICAgICAgfSxcbiAgICAgICAgb25QaW5VbnBpbjogKGtleTogc3RyaW5nLCBwaW46IGJvb2xlYW4pOiB2b2lkID0+IHtcbiAgICAgICAgICAgIC8vIElnbm9yZVxuICAgICAgICB9LFxuICAgIH07XG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogSUZhY2V0T3B0aW9ucykge1xuICAgICAgICB0aGlzLmV4dGVuZE9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIGlmIChvcHRpb25zLmNvbnRhaW5lckVsZW1lbnQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBsZWFzZSBQcm92aWRlIGEgdmFsaWQgY29udGFpbmVyIEVsZW1lbnQgb2JqZWN0XCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHB1YmxpYyBnZXQgT3B0aW9ucygpOiBJRmFjZXRPcHRpb25zIHtyZXR1cm4gdGhpcy5vcHRpb25zOyB9XG4gICAgcHJpdmF0ZSBleHRlbmRPcHRpb25zID0gKGlucHV0T3B0aW9uczogSUZhY2V0T3B0aW9ucyk6IElGYWNldE9wdGlvbnMgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zID0galF1ZXJ5LmV4dGVuZCh7fSwgdGhpcy5kZWZhdWx0RmFjZXRPcHRpb25zLCBpbnB1dE9wdGlvbnMpO1xuICAgIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy90c2xpbnQtbG9hZGVyPz9yZWYtLTEhLi9zcmMvdHMvY29uZmlnL0ZhY2V0Q29uZmlnU3RvcmUudHMiLCJpbXBvcnQgeyBGYWNldENvbmZpZ1N0b3JlIH0gZnJvbSBcIi4vLi4vY29uZmlnL0ZhY2V0Q29uZmlnU3RvcmVcIjtcbmltcG9ydCB7IElGYWNldFRlbXBsYXRlU2VydmljZSB9IGZyb20gXCIuLy4uL3NlcnZpY2VzL0lGYWNldFRlbXBsYXRlU2VydmljZVwiO1xuaW1wb3J0IHsgRXhwYW5kQ29sbGFwc2VNYW5hZ2VyIH0gZnJvbSBcIi4vRXhwYW5kQ29sbGFwc2VNYW5hZ2VyXCI7XG5pbXBvcnQgeyBJRXZlbnRIYW5kbGVyIH0gZnJvbSBcIi4vSUV2ZW50SGFuZGxlclwiO1xuaW1wb3J0IHsgU2hvd0hpZGUgfSBmcm9tIFwiLi9TaG93SGlkZVwiO1xuXG5leHBvcnQgY2xhc3MgRXhwYW5kQ29sbGFwc2VGYWNldHNIYW5kbGVyIGltcGxlbWVudHMgSUV2ZW50SGFuZGxlciB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50OiBKUXVlcnksXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBjb25maWdTdG9yZTogRmFjZXRDb25maWdTdG9yZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIHRlbXBsYXRlU2VydmljZTogSUZhY2V0VGVtcGxhdGVTZXJ2aWNlKSB7fVxuXG4gICAgcHVibGljIFJlZ2lzdGVyRG9tSGFuZGxlcigpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5lbGVtZW50Lm9uKFwiY2xpY2tcIiwgXCIuZXhwYW5kLWFsbFwiLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlVmlzaWJpbGl0eU9mQWxsKGV2ZW50LCBTaG93SGlkZS5TaG93KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZWxlbWVudC5vbihcImtleXVwXCIsIFwiLmV4cGFuZC1hbGxcIiwgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZVZpc2liaWxpdHlPZkFsbChldmVudCwgU2hvd0hpZGUuU2hvdyk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVsZW1lbnQub24oXCJjbGlja1wiLCBcIi5jb2xsYXBzZS1hbGxcIiwgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZVZpc2liaWxpdHlPZkFsbChldmVudCwgU2hvd0hpZGUuSGlkZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVsZW1lbnQub24oXCJrZXl1cFwiLCBcIi5jb2xsYXBzZS1hbGxcIiwgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZVZpc2liaWxpdHlPZkFsbChldmVudCwgU2hvd0hpZGUuSGlkZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVsZW1lbnQub24oXCJjbGlja1wiLCBcIi5mYWNldC1pdGVtLWhlYWRlciAuZXhwYW5zaW9uLWljb25cIiwgdGhpcy5oYW5kbGVWaXNpYmlsaXR5T2ZPbmUpO1xuICAgICAgICB0aGlzLmVsZW1lbnQub24oXCJrZXl1cFwiLCBcIi5mYWNldC1pdGVtLWhlYWRlciAuZXhwYW5zaW9uLWljb25cIiwgdGhpcy5oYW5kbGVWaXNpYmlsaXR5T2ZPbmUpO1xuICAgIH1cbiAgICBwdWJsaWMgb25SZXNpemUoKTogdm9pZCB7XG4gICAgICAgIC8vIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xuICAgIH1cbiAgICBwdWJsaWMgb25Eb2N1bWVudENsaWNrKGV2ZW50OiBhbnkpOiB2b2lkIHtcbiAgICAgICAgLy8gdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XG4gICAgfVxuICAgIHByaXZhdGUgaGFuZGxlVmlzaWJpbGl0eU9mQWxsID0gKGV2ZW50LCBoaWRlU2hvdzogU2hvd0hpZGUpID0+IHtcbiAgICAgICAgY29uc3QgY29kZSA9IGV2ZW50LmtleUNvZGUgfHwgZXZlbnQud2hpY2g7XG4gICAgICAgIGlmICggZXZlbnQudHlwZSAhPT0gXCJjbGlja1wiICYmIChldmVudC50eXBlID09PSBcImtleXVwXCIgJiYgY29kZSAhPT0gMTMgJiYgY29kZSAhPT0gMzIpICkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZWxlbWVudC5maW5kKFwiLmZhY2V0LWl0ZW0taGVhZGVyXCIpLmVhY2goKGluZGV4LCBlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICBFeHBhbmRDb2xsYXBzZU1hbmFnZXIuQ29udHJvbFZpc2liaWxpdHlPZkZpbHRlcihqUXVlcnkoZWxlbWVudCksIGhpZGVTaG93KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gaGlkZVNob3cgPT09IFNob3dIaWRlLlNob3cgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMuZmFjZXRDb25maWc7XG4gICAgICAgIGZvciAoY29uc3QgZmFjZXQgb2YgZGF0YSkge1xuICAgICAgICAgICAgZmFjZXQuY29sbGFwc2VkID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICAgIHByaXZhdGUgaGFuZGxlVmlzaWJpbGl0eU9mT25lID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGNvZGUgPSBldmVudC5rZXlDb2RlIHx8IGV2ZW50LndoaWNoO1xuICAgICAgICBpZiAoIGV2ZW50LnR5cGUgIT09IFwiY2xpY2tcIiAmJiAoZXZlbnQudHlwZSA9PT0gXCJrZXl1cFwiICYmIGNvZGUgIT09IDEzICYmIGNvZGUgIT09IDMyKSApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0YXJnZXQgPSBqUXVlcnkoZXZlbnQudGFyZ2V0KTtcbiAgICAgICAgY29uc3QgaGVhZGVyRWxlbWVudCA9IHRhcmdldC5wYXJlbnRzKFwiLmZhY2V0LWl0ZW0taGVhZGVyXCIpO1xuICAgICAgICBjb25zdCBwYXJlbnQgPSBoZWFkZXJFbGVtZW50LnBhcmVudHMoXCIuZmFjZXQtaXRlbVwiKTtcbiAgICAgICAgY29uc3QgYm9vbCA9IHRhcmdldC5oYXNDbGFzcyhcImd1aS1pY29uLWNoZXZyb24tdXBcIik7XG4gICAgICAgIGNvbnN0IGlkID0gcGFyZW50LmF0dHIoXCJkYXRhLWF0dHItaWRcIik7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMuZmFjZXRDb25maWc7XG4gICAgICAgIGZvciAoY29uc3QgZmFjZXQgb2YgZGF0YSkge1xuICAgICAgICAgICAgaWYgKGZhY2V0LmlkID09PSBpZCApIHtcbiAgICAgICAgICAgICAgICBmYWNldC5jb2xsYXBzZWQgPSBib29sO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIEV4cGFuZENvbGxhcHNlTWFuYWdlci5Db250cm9sVmlzaWJpbGl0eU9mRmlsdGVyKGhlYWRlckVsZW1lbnQsIFNob3dIaWRlLlRvZ2dsZSk7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy90c2xpbnQtbG9hZGVyPz9yZWYtLTEhLi9zcmMvdHMvZXZlbnRoYW5kbGVycy9FeHBhbmRDb2xsYXBzZUZhY2V0c0hhbmRsZXIudHMiLCJpbXBvcnQgeyBGYWNldENvbmZpZ1N0b3JlIH0gZnJvbSBcIi4uL2NvbmZpZy9GYWNldENvbmZpZ1N0b3JlXCI7XG5pbXBvcnQgeyBGaWx0ZXJBY3Rpb25UeXBlIH0gZnJvbSBcIi4uL21vZGVscy9GaWx0ZXJBY3Rpb25UeXBlXCI7XG5pbXBvcnQgeyBJRXZlbnRIYW5kbGVyIH0gZnJvbSBcIi4vSUV2ZW50SGFuZGxlclwiO1xuXG5leHBvcnQgY2xhc3MgRmFjZXRBY3Rpb25IYW5kbGVyIGltcGxlbWVudHMgSUV2ZW50SGFuZGxlciB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnQ6IEpRdWVyeSwgcHJpdmF0ZSBjb25maWdTdG9yZTogRmFjZXRDb25maWdTdG9yZSkge31cblxuICAgIHB1YmxpYyBSZWdpc3RlckRvbUhhbmRsZXIoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5vbihcImNoYW5nZVwiLCBcIi5mYWNldC1ib2R5IC5mYWNldC1pdGVtLWRlc2NyaXB0aW9uIC5mYWNldC12YWx1ZS1jaGVja2JveFwiLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBqUXVlcnkoZXZlbnQudGFyZ2V0KTtcbiAgICAgICAgICAgIGNvbnN0IHZhbFN0ciA9IGVsZW1lbnQudmFsKCkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdmFsU3RyLnNwbGl0KFwiOlwiKTtcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrZWQgPSBlbGVtZW50LmlzKFwiOmNoZWNrZWRcIik7XG4gICAgICAgICAgICBjb25zdCBhY3Rpb24gPSBjaGVja2VkID8gRmlsdGVyQWN0aW9uVHlwZS5BZGQgOiBGaWx0ZXJBY3Rpb25UeXBlLk1pbnVzO1xuICAgICAgICAgICAgdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLm9uRmlsdGVyQ2hhbmdlKHZhbHVlWzBdLCB2YWx1ZVsxXSwgYWN0aW9uLCB2YWx1ZVsyXSwgZmFsc2UpO1xuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBwdWJsaWMgb25SZXNpemUoKTogdm9pZCB7XG4gICAgICAgIC8vIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xuICAgIH1cbiAgICBwdWJsaWMgb25Eb2N1bWVudENsaWNrKGV2ZW50OiBhbnkpOiB2b2lkIHtcbiAgICAgICAgLy8gdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XG4gICAgfVxuXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvdHNsaW50LWxvYWRlcj8/cmVmLS0xIS4vc3JjL3RzL2V2ZW50aGFuZGxlcnMvRmFjZXRBY3Rpb25IYW5kbGVyLnRzIiwiaW1wb3J0IHtGYWNldENvbmZpZ1N0b3JlfSBmcm9tIFwiLi8uLi9jb25maWcvRmFjZXRDb25maWdTdG9yZVwiO1xyXG5pbXBvcnQge0V4cGFuZENvbGxhcHNlRmFjZXRzSGFuZGxlcn0gZnJvbSBcIi4vRXhwYW5kQ29sbGFwc2VGYWNldHNIYW5kbGVyXCI7XHJcbmltcG9ydCB7RXhwYW5kQ29sbGFwc2VNYW5hZ2VyfSBmcm9tIFwiLi9FeHBhbmRDb2xsYXBzZU1hbmFnZXJcIjtcclxuaW1wb3J0IHtJRXZlbnRIYW5kbGVyfSBmcm9tIFwiLi9JRXZlbnRIYW5kbGVyXCI7XHJcbmltcG9ydCB7U2hvd0hpZGV9IGZyb20gXCIuL1Nob3dIaWRlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgRmFjZXRTZWFyY2hIYW5kbGVyIGltcGxlbWVudHMgSUV2ZW50SGFuZGxlciB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnQ6IEpRdWVyeSwgcHJpdmF0ZSBjb25maWdTdG9yZTogRmFjZXRDb25maWdTdG9yZSkge31cclxuXHJcbiAgICBwdWJsaWMgUmVnaXN0ZXJEb21IYW5kbGVyKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXNcclxuICAgICAgICAgICAgLmVsZW1lbnRcclxuICAgICAgICAgICAgLm9uKFwia2V5dXBcIiwgXCIuZmlsdGVyLXNlYXJjaC1pbnB1dFwiLCB0aGlzLmhhbmRsZVNlYXJjaCk7XHJcblxyXG4gICAgfVxyXG4gICAgcHVibGljIG9uUmVzaXplKCk6IHZvaWQge1xyXG4gICAgICAgIC8vIElnbm9yZVxyXG4gICAgfVxyXG4gICAgcHVibGljIG9uRG9jdW1lbnRDbGljayhldmVudDogYW55KTogdm9pZCB7XHJcbiAgICAgICAgLy8gSWdub3JlXHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGhhbmRsZVNlYXJjaCA9IChldmVudCk6IHZvaWQgPT4ge1xyXG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBqUXVlcnkoZXZlbnQudGFyZ2V0KTtcclxuICAgICAgICBjb25zdCB2YWwgPSBlbGVtZW50XHJcbiAgICAgICAgICAgIC52YWwoKVxyXG4gICAgICAgICAgICAudG9TdHJpbmcoKVxyXG4gICAgICAgICAgICAudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICB0aGlzXHJcbiAgICAgICAgICAgIC5lbGVtZW50XHJcbiAgICAgICAgICAgIC5maW5kKFwiLmZhY2V0LWxpc3QgLmZhY2V0LWl0ZW1cIilcclxuICAgICAgICAgICAgLmVhY2goKGk6IG51bWJlciwgZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZmFjZXRJdGVtID0galF1ZXJ5KGUpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGZhY2V0TmFtZU1hdGNoID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBsZXQgaW5wdXRWYWx1ZUJsYW5rID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB2YWx1ZSBpcyBlbXB0eVxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbCA9PT0gdW5kZWZpbmVkIHx8IHZhbCA9PT0gbnVsbCB8fCB2YWwudHJpbSgpID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRWYWx1ZUJsYW5rID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIENvbXBhcmUgdmFsdWUgd2l0aCBmYWNldCBuYW1lXHJcbiAgICAgICAgICAgICAgICBpZiAoIWlucHV0VmFsdWVCbGFuayAmJiBmYWNldEl0ZW0uYXR0cihcImRhdGEtYXR0ci1uYW1lXCIpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZih2YWwpICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZhY2V0TmFtZU1hdGNoID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpbnB1dFZhbHVlQmxhbmspIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5lbGVtZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKFwiLnNob3ctbW9yZS1saW5rXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5lYWNoKChpbmRleDogbnVtYmVyLCBzaHdNb3JlRWxlbSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGpRdWVyeShzaHdNb3JlRWxlbSkuaGFzQ2xhc3MoXCJndWktaGlkZGVuXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5KHNod01vcmVFbGVtKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeShzaHdNb3JlRWxlbSkuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5lbGVtZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKFwiLnNob3ctbGVzcy1saW5rXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5lYWNoKChpbmRleDogbnVtYmVyLCBzaG93TGVzc0xpbmspID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqUXVlcnkoc2hvd0xlc3NMaW5rKS5oYXNDbGFzcyhcImd1aS1oaWRkZW5cIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkoc2hvd0xlc3NMaW5rKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeShzaG93TGVzc0xpbmspLnNob3coKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmVsZW1lbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoXCIuc2hvdy1tb3JlLWxpbmtcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5lbGVtZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKFwiLnNob3ctbGVzcy1saW5rXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBDb21wYXJlIHZhbHVlcyBhZ2FpbnN0IGNoaWxkIHZhbHVlc1xyXG4gICAgICAgICAgICAgICAgbGV0IGZhY2V0Q2hpbGRNYXRjaDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgZmFjZXRJdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoXCJsYWJlbFwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5lYWNoKChqOiBudW1iZXIsIGxhYmVsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhYmVsRWxlbSA9IGpRdWVyeShsYWJlbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dFZhbHVlQmxhbmspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsRWxlbVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5wYXJlbnQoXCIuZXh0cmEtZmlsdGVyXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsRWxlbVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5wYXJlbnQoXCIuZXh0cmEtZmlsdGVyXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNob3coKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmFjZXROYW1lTWF0Y2ggfHwgaW5wdXRWYWx1ZUJsYW5rKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbEVsZW0uc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhYmVsVmFsdWUgPSBsYWJlbEVsZW0uYXR0cihcImRhdGEtYXR0ci12YWx1ZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhYmVsVmFsdWUudG9Mb3dlckNhc2UoKS5pbmRleE9mKHZhbCkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbEVsZW0uaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFjZXRDaGlsZE1hdGNoID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsRWxlbS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIC8vIFNob3cgaGlkZSBGYWNldCBJdGVtIGl0c2VsZlxyXG4gICAgICAgICAgICAgICAgY29uc3QgaGVhZGVyRWxtZW50ID0gZmFjZXRJdGVtLmZpbmQoXCIuZmFjZXQtaXRlbS1oZWFkZXJcIik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb2xsYXBzZWQgPSBmYWNldEl0ZW0uaGFzQ2xhc3MoXCJjb2xsYXBzZWRcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAoZmFjZXROYW1lTWF0Y2ggfHwgZmFjZXRDaGlsZE1hdGNoIHx8IGlucHV0VmFsdWVCbGFuaykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZhY2V0SXRlbS5mYWRlSW4odGhpcy5jb25maWdTdG9yZS5PcHRpb25zLmFuaW1hdGlvblRpbWUpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBmYWNldEl0ZW0uZmFkZU91dCh0aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMuYW5pbWF0aW9uVGltZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBFeHBhbmQgQ29sbGFwc2UgRmFjZXRcclxuICAgICAgICAgICAgICAgIGlmIChjb2xsYXBzZWQgfHwgZmFjZXROYW1lTWF0Y2ggfHwgZmFjZXRDaGlsZE1hdGNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgRXhwYW5kQ29sbGFwc2VNYW5hZ2VyLkNvbnRyb2xWaXNpYmlsaXR5T2ZGaWx0ZXIoaGVhZGVyRWxtZW50LCBTaG93SGlkZS5TaG93KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgRXhwYW5kQ29sbGFwc2VNYW5hZ2VyLkNvbnRyb2xWaXNpYmlsaXR5T2ZGaWx0ZXIoaGVhZGVyRWxtZW50LCBTaG93SGlkZS5IaWRlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXI/P3JlZi0tMSEuL3NyYy90cy9ldmVudGhhbmRsZXJzL0ZhY2V0U2VhcmNoSGFuZGxlci50cyIsImltcG9ydCB7IEZpbHRlckNvbmZpZ1N0b3JlIH0gZnJvbSBcIi4uL2NvbmZpZy9GaWx0ZXJDb25maWdTdG9yZVwiO1xyXG5pbXBvcnQgeyBGaWx0ZXJBY3Rpb25UeXBlIH0gZnJvbSBcIi4uL21vZGVscy9GaWx0ZXJBY3Rpb25UeXBlXCI7XHJcbmltcG9ydCB7IElFdmVudEhhbmRsZXIgfSBmcm9tIFwiLi9JRXZlbnRIYW5kbGVyXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgRmlsdGVyQWN0aW9uSGFuZGxlciBpbXBsZW1lbnRzIElFdmVudEhhbmRsZXIge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZmlsdGVyRWxlbWVudDogSlF1ZXJ5LCBwcml2YXRlIGNvbmZpZ1N0b3JlOiBGaWx0ZXJDb25maWdTdG9yZSkge31cclxuXHJcbiAgICBwdWJsaWMgUmVnaXN0ZXJEb21IYW5kbGVyKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZmlsdGVyRWxlbWVudC5vbihcImNsaWNrXCIsIFwiLmZhY2V0LXN1YmhlYWRlciAuZmFjZXQtbGFiZWxzIC5sYWJlbFwiLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgbGV0IGVsZW1lbnQgPSBqUXVlcnkoZXZlbnQudGFyZ2V0KTtcclxuICAgICAgICAgICAgaWYgKCFlbGVtZW50LmlzKFwiLmxhYmVsXCIpKSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnRzKFwiLmxhYmVsXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbFN0ciA9IGVsZW1lbnQuYXR0cihcImRhdGEtZmlsdGVyLWVudHJ5XCIpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdmFsU3RyLnNwbGl0KFwiOlwiKTtcclxuICAgICAgICAgICAgbGV0IGlzUmFuZ2UgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gNCApIHtcclxuICAgICAgICAgICAgICAgIGlzUmFuZ2UgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5vbkZpbHRlckNoYW5nZSh2YWx1ZVswXSwgdmFsdWVbMV0sIEZpbHRlckFjdGlvblR5cGUuTWludXMsIHZhbHVlWzJdLCBpc1JhbmdlKTtcclxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJFbGVtZW50Lm9uKFwiY2xpY2tcIiwgXCIuZmFjZXQtc3ViaGVhZGVyIC5yZW1vdmUtYWxsXCIsIChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMub25BbGxGaWx0ZXJSZW1vdmUoKTtcclxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgb25SZXNpemUoKTogdm9pZCB7XHJcbiAgICAgICAgLy8gdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgb25Eb2N1bWVudENsaWNrKGV2ZW50OiBhbnkpOiB2b2lkIHtcclxuICAgICAgICAvLyB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcclxuICAgIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXI/P3JlZi0tMSEuL3NyYy90cy9ldmVudGhhbmRsZXJzL0ZpbHRlckFjdGlvbkhhbmRsZXIudHMiLCJpbXBvcnQgeyBGYWNldENvbmZpZ1N0b3JlIH0gZnJvbSBcIi4uL2NvbmZpZy9GYWNldENvbmZpZ1N0b3JlXCI7XHJcbmltcG9ydCB7IElFdmVudEhhbmRsZXIgfSBmcm9tIFwiLi9JRXZlbnRIYW5kbGVyXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgSGlkZUZhY2V0U2VjdGlvbkhhbmRsZXIgaW1wbGVtZW50cyBJRXZlbnRIYW5kbGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudDogSlF1ZXJ5LCBwcml2YXRlIGNvbmZpZ1N0b3JlOiBGYWNldENvbmZpZ1N0b3JlKSB7fVxyXG5cclxuICAgIHB1YmxpYyBSZWdpc3RlckRvbUhhbmRsZXIgPSAoKTogdm9pZCA9PiB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50Lm9uKFwiY2xpY2tcIiwgXCIuaGlkZS1mYWNldFwiLCB0aGlzLmhpZGVGYWNldCk7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50Lm9uKFwiY2xpY2tcIiwgXCIuc2hvdy1mYWNldFwiLCB0aGlzLnNob3dGYWNldCk7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50Lm9uKFwia2V5dXBcIiwgXCIuaGlkZS1mYWNldFwiLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY29kZSA9IGV2ZW50LmtleUNvZGUgfHwgZXZlbnQud2hpY2g7XHJcbiAgICAgICAgICAgIGlmICggY29kZSAhPT0gMTMgJiYgY29kZSAhPT0gMzIgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5oaWRlRmFjZXQoZXZlbnQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5vbihcImtleXVwXCIsIFwiLnNob3ctZmFjZXRcIiwgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvZGUgPSBldmVudC5rZXlDb2RlIHx8IGV2ZW50LndoaWNoO1xyXG4gICAgICAgICAgICBpZiAoIGNvZGUgIT09IDEzICYmIGNvZGUgIT09IDMyICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuc2hvd0ZhY2V0KGV2ZW50KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBvblJlc2l6ZSgpOiB2b2lkIHtcclxuICAgICAgICAvLyBJZ25vcmVcclxuICAgIH1cclxuICAgIHB1YmxpYyBvbkRvY3VtZW50Q2xpY2soZXZlbnQ6IGFueSk6IHZvaWQge1xyXG4gICAgICAgIC8vIElnbm9yZVxyXG4gICAgfVxyXG4gICAgcHVibGljIGhpZGVGYWNldCA9IChldmVudCk6IHZvaWQgPT4ge1xyXG4gICAgICAgICQoXCIuZmFjZXQtYm9keVwiKS5oaWRlKCk7XHJcbiAgICAgICAgJChcIi5mYWNldC1jb2xsYXBzZWQtYm9keVwiKS5mYWRlSW4odGhpcy5jb25maWdTdG9yZS5PcHRpb25zLmFuaW1hdGlvblRpbWUpO1xyXG4gICAgICAgIHRoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5jb2xsYXBzZWQgPSB0cnVlO1xyXG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHNob3dGYWNldCA9IChldmVudCk6IHZvaWQgPT4ge1xyXG4gICAgICAgICQoXCIuZmFjZXQtY29sbGFwc2VkLWJvZHlcIikuaGlkZSgpO1xyXG4gICAgICAgICQoXCIuZmFjZXQtYm9keVwiKS5mYWRlSW4odGhpcy5jb25maWdTdG9yZS5PcHRpb25zLmFuaW1hdGlvblRpbWUpO1xyXG4gICAgICAgIHRoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5jb2xsYXBzZWQgPSBmYWxzZTtcclxuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvdHNsaW50LWxvYWRlcj8/cmVmLS0xIS4vc3JjL3RzL2V2ZW50aGFuZGxlcnMvSGlkZUZhY2V0U2VjdGlvbkhhbmRsZXIudHMiLCJpbXBvcnQgeyBGYWNldENvbmZpZ1N0b3JlIH0gZnJvbSBcIi4vLi4vY29uZmlnL0ZhY2V0Q29uZmlnU3RvcmVcIjtcclxuaW1wb3J0IHsgSUZhY2V0VGVtcGxhdGVTZXJ2aWNlIH0gZnJvbSBcIi4vLi4vc2VydmljZXMvSUZhY2V0VGVtcGxhdGVTZXJ2aWNlXCI7XHJcbmltcG9ydCB7IEV4cGFuZENvbGxhcHNlRmFjZXRzSGFuZGxlciB9IGZyb20gXCIuL0V4cGFuZENvbGxhcHNlRmFjZXRzSGFuZGxlclwiO1xyXG5pbXBvcnQgeyBFeHBhbmRDb2xsYXBzZU1hbmFnZXIgfSBmcm9tIFwiLi9FeHBhbmRDb2xsYXBzZU1hbmFnZXJcIjtcclxuaW1wb3J0IHsgSUV2ZW50SGFuZGxlciB9IGZyb20gXCIuL0lFdmVudEhhbmRsZXJcIjtcclxuaW1wb3J0IHsgU2hvd0hpZGUgfSBmcm9tIFwiLi9TaG93SGlkZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFBpblVucGluRXZlbnRIYW5kbGVyIGltcGxlbWVudHMgSUV2ZW50SGFuZGxlciB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnQ6IEpRdWVyeSwgcHJpdmF0ZSBjb25maWdTdG9yZTogRmFjZXRDb25maWdTdG9yZSxcclxuICAgICAgICAgICAgICAgIHByaXZhdGUgdGVtcGxhdGVTZXJ2aWNlOiBJRmFjZXRUZW1wbGF0ZVNlcnZpY2UpIHt9XHJcblxyXG4gICAgcHVibGljIFJlZ2lzdGVyRG9tSGFuZGxlcigpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnQub24oXCJjbGlja1wiLCBcIi5waW4taWNvblwiLCAoZXZlbnQpOiB2b2lkID0+IHtcclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVQaW5VbnBpbihldmVudCwgdHJ1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50Lm9uKFwiY2xpY2tcIiwgXCIudW5waW4taWNvblwiLCAoZXZlbnQpOiB2b2lkID0+IHtcclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVQaW5VbnBpbihldmVudCwgZmFsc2UpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5vbihcImtleXVwXCIsIFwiLnBpbi1pY29uXCIsIChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBjb2RlID0gZXZlbnQua2V5Q29kZSB8fCBldmVudC53aGljaDtcclxuICAgICAgICAgICAgaWYgKCBjb2RlICE9PSAxMyAmJiBjb2RlICE9PSAzMiApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmhhbmRsZVBpblVucGluKGV2ZW50LCB0cnVlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmVsZW1lbnQub24oXCJrZXl1cFwiLCBcIi51bnBpbi1pY29uXCIsIChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBjb2RlID0gZXZlbnQua2V5Q29kZSB8fCBldmVudC53aGljaDtcclxuICAgICAgICAgICAgaWYgKCBjb2RlICE9PSAxMyAmJiBjb2RlICE9PSAzMiApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmhhbmRsZVBpblVucGluKGV2ZW50LCBmYWxzZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgb25SZXNpemUoKTogdm9pZCB7XHJcbiAgICAgICAgLy8gSWdub3JlXHJcbiAgICB9XHJcbiAgICBwdWJsaWMgb25Eb2N1bWVudENsaWNrKGV2ZW50OiBhbnkpOiB2b2lkIHtcclxuICAgICAgICAvLyBJZ25vcmVcclxuICAgIH1cclxuICAgIHByaXZhdGUgaGFuZGxlUGluVW5waW4oZXZlbnQ6IGFueSwgcGluOiBib29sZWFuKSB7XHJcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGpRdWVyeShldmVudC50YXJnZXQpO1xyXG4gICAgICAgIGNvbnN0IGlkID0gZWxlbWVudC5hdHRyKFwiZGF0YS1hdHRyLWlkXCIpO1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMuZmFjZXRDb25maWc7XHJcbiAgICAgICAgZm9yIChjb25zdCBmYWNldCBvZiBkYXRhKSB7XHJcbiAgICAgICAgICAgIGlmICggZmFjZXQuaWQgPT09IGlkICkge1xyXG4gICAgICAgICAgICAgICAgZmFjZXQucGlubmVkID0gcGluO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5lbGVtZW50Lmh0bWwodGhpcy50ZW1wbGF0ZVNlcnZpY2UuYmluZCh0aGlzLnRlbXBsYXRlU2VydmljZS5nZXREYXRhKCkpKTtcclxuICAgICAgICB0aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMub25QaW5VbnBpbihpZCwgcGluKTtcclxuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvdHNsaW50LWxvYWRlcj8/cmVmLS0xIS4vc3JjL3RzL2V2ZW50aGFuZGxlcnMvUGluVW5waW5FdmVudEhhbmRsZXIudHMiLCJpbXBvcnQge0ZhY2V0Q29uZmlnU3RvcmV9IGZyb20gXCIuLy4uL2NvbmZpZy9GYWNldENvbmZpZ1N0b3JlXCI7XHJcbmltcG9ydCB7SUZhY2V0VGVtcGxhdGVTZXJ2aWNlfSBmcm9tIFwiLi8uLi9zZXJ2aWNlcy9JRmFjZXRUZW1wbGF0ZVNlcnZpY2VcIjtcclxuaW1wb3J0IHtFeHBhbmRDb2xsYXBzZUZhY2V0c0hhbmRsZXJ9IGZyb20gXCIuL0V4cGFuZENvbGxhcHNlRmFjZXRzSGFuZGxlclwiO1xyXG5pbXBvcnQge0V4cGFuZENvbGxhcHNlTWFuYWdlcn0gZnJvbSBcIi4vRXhwYW5kQ29sbGFwc2VNYW5hZ2VyXCI7XHJcbmltcG9ydCB7SUV2ZW50SGFuZGxlcn0gZnJvbSBcIi4vSUV2ZW50SGFuZGxlclwiO1xyXG5pbXBvcnQge1Nob3dIaWRlfSBmcm9tIFwiLi9TaG93SGlkZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNob3dNb3JlTGVzc0hhbmRsZXIgaW1wbGVtZW50cyBJRXZlbnRIYW5kbGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudDogSlF1ZXJ5LCBwcml2YXRlIGNvbmZpZ1N0b3JlOiBGYWNldENvbmZpZ1N0b3JlKSB7fVxyXG5cclxuICAgIHB1YmxpYyBSZWdpc3RlckRvbUhhbmRsZXIoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpc1xyXG4gICAgICAgICAgICAuZWxlbWVudFxyXG4gICAgICAgICAgICAub24oXCJjbGlja1wiLCBcIi5zaG93LW1vcmUtbGlua1wiLCAoZXZlbnQpOiB2b2lkID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2hvd01vcmVMZXNzRmlsdGVycyhldmVudCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXNcclxuICAgICAgICAgICAgLmVsZW1lbnRcclxuICAgICAgICAgICAgLm9uKFwiY2xpY2tcIiwgXCIuc2hvdy1sZXNzLWxpbmtcIiwgKGV2ZW50KTogdm9pZCA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dNb3JlTGVzc0ZpbHRlcnMoZXZlbnQsIGZhbHNlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpc1xyXG4gICAgICAgICAgICAuZWxlbWVudFxyXG4gICAgICAgICAgICAub24oXCJrZXl1cFwiLCBcIi5zaG93LW1vcmUtbGlua1wiLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvZGUgPSBldmVudC5rZXlDb2RlIHx8IGV2ZW50LndoaWNoO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvZGUgIT09IDEzICYmIGNvZGUgIT09IDMyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zaG93TW9yZUxlc3NGaWx0ZXJzKGV2ZW50LCB0cnVlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpc1xyXG4gICAgICAgICAgICAuZWxlbWVudFxyXG4gICAgICAgICAgICAub24oXCJrZXl1cFwiLCBcIi5zaG93LWxlc3MtbGlua1wiLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvZGUgPSBldmVudC5rZXlDb2RlIHx8IGV2ZW50LndoaWNoO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvZGUgIT09IDEzICYmIGNvZGUgIT09IDMyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zaG93TW9yZUxlc3NGaWx0ZXJzKGV2ZW50LCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcHVibGljIG9uUmVzaXplKCk6IHZvaWQge1xyXG4gICAgICAgIC8vIElnbm9yZVxyXG4gICAgfVxyXG4gICAgcHVibGljIG9uRG9jdW1lbnRDbGljayhldmVudDogYW55KTogdm9pZCB7XHJcbiAgICAgICAgLy8gSWdub3JlXHJcbiAgICB9XHJcbiAgICBwcml2YXRlIHNob3dNb3JlTGVzc0ZpbHRlcnMoZXZlbnQ6IGFueSwgc2hvd01vcmU6IGJvb2xlYW4pIHtcclxuICAgICAgICBjb25zdCBlbGVtZW50ID0galF1ZXJ5KGV2ZW50LnRhcmdldCk7XHJcbiAgICAgICAgaWYgKHNob3dNb3JlKSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnRcclxuICAgICAgICAgICAgICAgIC5wYXJlbnQoKVxyXG4gICAgICAgICAgICAgICAgLmZpbmQoXCIuZXh0cmEtZmlsdGVyXCIpXHJcbiAgICAgICAgICAgICAgICAuZmFkZUluKHRoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5hbmltYXRpb25UaW1lLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2libGluZ3MoXCJhXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBlbGVtZW50XHJcbiAgICAgICAgICAgICAgICAucGFyZW50KClcclxuICAgICAgICAgICAgICAgIC5maW5kKFwiLmV4dHJhLWZpbHRlclwiKVxyXG4gICAgICAgICAgICAgICAgLmZhZGVPdXQodGhpcy5jb25maWdTdG9yZS5PcHRpb25zLmFuaW1hdGlvblRpbWUsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zaWJsaW5ncyhcImFcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnNob3coKTtcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmhpZGUoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvdHNsaW50LWxvYWRlcj8/cmVmLS0xIS4vc3JjL3RzL2V2ZW50aGFuZGxlcnMvU2hvd01vcmVMZXNzSGFuZGxlci50cyIsImltcG9ydCB7IElGaWx0ZXJPcHRpb25zIH0gZnJvbSBcIi4uL2NvbmZpZy9JRmlsdGVyT3B0aW9uc1wiO1xyXG5pbXBvcnQgeyBIb3RLZXlzRmlsdGVyc0hhbmRsZXIgfSBmcm9tIFwiLi4vZXZlbnRoYW5kbGVycy9Ib3RLZXlzRmlsdGVyc0hhbmRsZXJcIjtcclxuaW1wb3J0IHsgSUZhY2V0IH0gZnJvbSBcIi4uL21vZGVscy9JRmFjZXRcIjtcclxuaW1wb3J0IHsgRmlsdGVyVGVtcGxhdGVTZXJ2aWNlIH0gZnJvbSBcIi4uL3NlcnZpY2VzL0ZpbHRlclRlbXBsYXRlU2VydmljZVwiO1xyXG5pbXBvcnQgeyBJRmlsdGVyVGVtcGxhdGVTZXJ2aWNlIH0gZnJvbSBcIi4uL3NlcnZpY2VzL0lGaWx0ZXJUZW1wbGF0ZVNlcnZpY2VcIjtcclxuaW1wb3J0IHsgRmlsdGVyQ29uZmlnU3RvcmUgfSBmcm9tIFwiLi8uLi9jb25maWcvRmlsdGVyQ29uZmlnU3RvcmVcIjtcclxuaW1wb3J0IHsgRmlsdGVyQWN0aW9uSGFuZGxlciwgSUV2ZW50SGFuZGxlciB9IGZyb20gXCIuLy4uL2V2ZW50aGFuZGxlcnNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBGaWx0ZXIge1xyXG4gICAgcHJpdmF0ZSBjb25maWdTdG9yZTogRmlsdGVyQ29uZmlnU3RvcmU7XHJcbiAgICBwcml2YXRlIHRlbXBsYXRlU2VydmljZTogSUZpbHRlclRlbXBsYXRlU2VydmljZTtcclxuICAgIHByaXZhdGUgZmlsdGVyRWxlbWVudDogSlF1ZXJ5O1xyXG4gICAgcHJpdmF0ZSBoYW5kbGVyQ2hhaW46IElFdmVudEhhbmRsZXJbXSA9IFtdO1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogSUZpbHRlck9wdGlvbnMpIHtcclxuICAgICAgICB0aGlzLmNvbmZpZ1N0b3JlID0gIG5ldyBGaWx0ZXJDb25maWdTdG9yZShvcHRpb25zKTtcclxuICAgICAgICB0aGlzLmZpbHRlckVsZW1lbnQgPSBqUXVlcnkob3B0aW9ucy5jb250YWluZXJFbGVtZW50KTtcclxuICAgICAgICB0aGlzLnRlbXBsYXRlU2VydmljZSA9IG5ldyBGaWx0ZXJUZW1wbGF0ZVNlcnZpY2UodGhpcy5jb25maWdTdG9yZSk7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyQ2hhaW4ucHVzaChuZXcgRmlsdGVyQWN0aW9uSGFuZGxlcih0aGlzLmZpbHRlckVsZW1lbnQsIHRoaXMuY29uZmlnU3RvcmUpKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXJDaGFpbi5wdXNoKG5ldyBIb3RLZXlzRmlsdGVyc0hhbmRsZXIoKSk7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyQ2hhaW4uZm9yRWFjaCgoaGFuZGxlcikgPT4ge1xyXG4gICAgICAgICAgICBoYW5kbGVyLlJlZ2lzdGVyRG9tSGFuZGxlcigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGJpbmQgPSAgKGZpbHRlcnM6IElGYWNldFtdKTogdm9pZCA9PiB7XHJcbiAgICAgICAgY29uc3QgZmFjZXRTdWJIZWFkZXIgPSB0aGlzLnRlbXBsYXRlU2VydmljZS5iaW5kKGZpbHRlcnMpO1xyXG4gICAgICAgIHRoaXMuZmlsdGVyRWxlbWVudC5odG1sKGZhY2V0U3ViSGVhZGVyKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBkZXN0cm95ID0gICgpOiB2b2lkID0+IHtcclxuICAgICAgICBpZiAoIHRoaXMuZmlsdGVyRWxlbWVudCAhPT0gdW5kZWZpbmVkICkge1xyXG4gICAgICAgICAgICB0aGlzLmZpbHRlckVsZW1lbnQub2ZmKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaGFuZGxlckNoYWluLmZvckVhY2goKGhhbmRsZXIpID0+IHtcclxuICAgICAgICAgICAgaWYgKGhhbmRsZXIgIT09IHVuZGVmaW5lZCAmJiBoYW5kbGVyLmRlcmVnaXN0ZXIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlci5kZXJlZ2lzdGVyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvdHNsaW50LWxvYWRlcj8/cmVmLS0xIS4vc3JjL3RzL21haW4vRmlsdGVyLnRzIiwiaW1wb3J0IHsgSUV2ZW50SGFuZGxlciB9IGZyb20gXCIuL0lFdmVudEhhbmRsZXJcIjtcclxuY2xhc3MgSG90S2V5c0ZpbHRlcnNIYW5kbGVyIGltcGxlbWVudHMgSUV2ZW50SGFuZGxlciB7XHJcblxyXG4gICAgcHVibGljIFJlZ2lzdGVyRG9tSGFuZGxlciA9ICgpOiB2b2lkID0+IHtcclxuICAgICAgICBqUXVlcnkoZG9jdW1lbnQpLm9uKFwia2V5ZG93blwiLCB0aGlzLmZvY3VzT25TZWFyY2gpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIG9uUmVzaXplID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIG9uRG9jdW1lbnRDbGljayA9IChldmVudDogYW55KTogdm9pZCA9PiB7XHJcbiAgICAgICAgLy8gRG8gbm90aGluZ1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkZVJlZ2lzdGVyID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgICAgIGpRdWVyeShkb2N1bWVudCkub2ZmKFwia2V5ZG93blwiLCB0aGlzLmZvY3VzT25TZWFyY2gpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZm9jdXNPblNlYXJjaCA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIGlmIChldmVudC5hbHRLZXkgICYmICBldmVudC5rZXkgPT09IFwiclwiKSB7XHJcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIGpRdWVyeShcIi5mYWNldC1zdWJoZWFkZXIgLnJlbW92ZS1hbGxcIikuZm9jdXMoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7SG90S2V5c0ZpbHRlcnNIYW5kbGVyfTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXI/P3JlZi0tMSEuL3NyYy90cy9ldmVudGhhbmRsZXJzL0hvdEtleXNGaWx0ZXJzSGFuZGxlci50cyIsImltcG9ydCAqIGFzIEhhbmRsZWJhcnMgZnJvbSBcImhhbmRsZWJhcnNcIjtcclxuaW1wb3J0IHsgSUZhY2V0IH0gZnJvbSBcIi4uL21vZGVscy9JRmFjZXRcIjtcclxuaW1wb3J0ICogYXMgRmFjZXRTdWJIZWFkZXIgZnJvbSBcIi4vLi4vLi4vaGJzL2ZhY2V0LWFwcGxpZWQtZmlsdGVycy5oYnNcIjtcclxuaW1wb3J0IHsgRmlsdGVyQ29uZmlnU3RvcmUgfSBmcm9tIFwiLi8uLi9jb25maWcvRmlsdGVyQ29uZmlnU3RvcmVcIjtcclxuaW1wb3J0IHsgSUZpbHRlclRlbXBsYXRlU2VydmljZSB9IGZyb20gXCIuL0lGaWx0ZXJUZW1wbGF0ZVNlcnZpY2VcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBGaWx0ZXJUZW1wbGF0ZVNlcnZpY2UgaW1wbGVtZW50cyBJRmlsdGVyVGVtcGxhdGVTZXJ2aWNlIHtcclxuICAgIHByaXZhdGUgdGVtcGF0ZUZ1bmN0aW9uRm9yRmFjZXRNYWluOiBhbnk7XHJcbiAgICBwcml2YXRlIHRlbXBhdGVGdW5jdGlvbkZvckZhY2V0SGVhZGVyOiBhbnk7XHJcbiAgICBwcml2YXRlIHRlbXBhdGVGdW5jdGlvbkZvckZhY2V0U3ViSGVhZGVyOiBhbnk7XHJcbiAgICBwcml2YXRlIHRlbXBhdGVGdW5jdGlvbkZvckZhY2V0Qm9keTogYW55O1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjb25maWdTdG9yZTogRmlsdGVyQ29uZmlnU3RvcmUpIHtcclxuICAgICAgICB0aGlzLnRlbXBhdGVGdW5jdGlvbkZvckZhY2V0U3ViSGVhZGVyID0gRmFjZXRTdWJIZWFkZXI7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgYmluZChmaWx0ZXJzOiBJRmFjZXRbXSk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgbWVyZ2VkRmlsdGVycyA9IHRoaXMubWVyZ2VXaXRoRmFjZXRDb25maWcoZmlsdGVycyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudGVtcGF0ZUZ1bmN0aW9uRm9yRmFjZXRTdWJIZWFkZXIoe2ZpbHRlcnM6IG1lcmdlZEZpbHRlcnN9KTtcclxuICAgIH1cclxuICAgIHByaXZhdGUgbWVyZ2VXaXRoRmFjZXRDb25maWcgPSAoZmlsdGVyczogSUZhY2V0W10pID0+IHtcclxuICAgICAgICBjb25zdCBtZXJnZWRBcnJheTogYW55W10gPSBbXTtcclxuICAgICAgICBmb3IgKGNvbnN0IGZhY2V0IG9mIGZpbHRlcnMpIHtcclxuICAgICAgICAgIGZvciAoY29uc3QgZmFjZXRDb25maWcgb2YgdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLmZpbHRlckNvbmZpZykge1xyXG4gICAgICAgICAgICBpZiAoZmFjZXRDb25maWcuaWQgPT09IGZhY2V0LmlkKSB7XHJcbiAgICAgICAgICAgICAgbWVyZ2VkQXJyYXkucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBjb2xsYXBzZWQ6IGZhY2V0Q29uZmlnLmNvbGxhcHNlZCxcclxuICAgICAgICAgICAgICAgIGZhY2V0UmFuZ2U6IGZhY2V0LmZhY2V0UmFuZ2UsXHJcbiAgICAgICAgICAgICAgICBmYWNldFZhbHVlczogZmFjZXQuZmFjZXRWYWx1ZXMsXHJcbiAgICAgICAgICAgICAgICBpZDogZmFjZXRDb25maWcuaWQsXHJcbiAgICAgICAgICAgICAgICBuYW1lOiBmYWNldENvbmZpZy5uYW1lLFxyXG4gICAgICAgICAgICAgICAgb3JkZXI6IGZhY2V0Q29uZmlnLm9yZGVyLFxyXG4gICAgICAgICAgICAgICAgcGlubmVkOiBmYWNldENvbmZpZy5waW5uZWQsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiBmYWNldENvbmZpZy50eXBlLFxyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtZXJnZWRBcnJheTtcclxuICAgICAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy90c2xpbnQtbG9hZGVyPz9yZWYtLTEhLi9zcmMvdHMvc2VydmljZXMvRmlsdGVyVGVtcGxhdGVTZXJ2aWNlLnRzIiwidmFyIEhhbmRsZWJhcnMgPSByZXF1aXJlKFwiaGFuZGxlYmFyc1wiKTtcbmZ1bmN0aW9uIF9fZGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiAob2JqLl9fZXNNb2R1bGUgPyBvYmpbXCJkZWZhdWx0XCJdIDogb2JqKTsgfVxubW9kdWxlLmV4cG9ydHMgPSAoSGFuZGxlYmFyc1tcImRlZmF1bHRcIl0gfHwgSGFuZGxlYmFycykudGVtcGxhdGUoe1wiMVwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhLGJsb2NrUGFyYW1zLGRlcHRocykge1xuICAgIHZhciBzdGFjazE7XG5cbiAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFwiY29udGVudCBmYWNldC1zdWJoZWFkZXIgZ3VpIGZsdWlkLXcgYmFzaWMgY3VydmVkIHAtNVxcXCI+XFxuICAgIDxzcGFuIGNsYXNzPVxcXCJndWkgZ3VpLXN1YmhlYWRpbmctMiBjYXBzXFxcIj5BcHBsaWVkIEZpbHRlcnM8L3NwYW4+XFxuICAgIDxidXR0b24gY2xhc3M9XFxcImd1aSBtLWwtNSByZW1vdmUtYWxsXFxcIiA+XFxuICAgICAgICA8aSBjbGFzcz1cXFwiZ3VpLWljb24gZ3VpLWljb24tY2FuY2VsXFxcIj48L2k+XFxuICAgICAgICA8c3Bhbj5DbGVhciBBbGw8L3NwYW4+XFxuICAgIDwvYnV0dG9uPlxcbiAgICA8c3BhbiBjbGFzcz1cXFwiZ3VpIG0tbC0xMFxcXCI+XFxuXCJcbiAgICArICgoc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuZmlsdGVycyA6IGRlcHRoMCkse1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgyLCBkYXRhLCAwLCBibG9ja1BhcmFtcywgZGVwdGhzKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCIgICAgPC9zcGFuPlxcbjwvZGl2PlxcblwiO1xufSxcIjJcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSxibG9ja1BhcmFtcyxkZXB0aHMpIHtcbiAgICB2YXIgc3RhY2sxLCBhbGlhczE9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KTtcblxuICByZXR1cm4gXCIgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJndWkgbS1yLTVcXFwiPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJndWkgbGFyZ2UgbGFiZWxzIGZhY2V0LWxhYmVsc1xcXCI+XFxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJndWkgZ3VpLXN1YmhlYWRpbmctMVxcXCI+XCJcbiAgICArIGNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uKGNvbnRhaW5lci5sYW1iZGEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCI8L3NwYW4+XFxuXCJcbiAgICArICgoc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoYWxpYXMxLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5mYWNldFZhbHVlcyA6IGRlcHRoMCkse1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgzLCBkYXRhLCAwLCBibG9ja1BhcmFtcywgZGVwdGhzKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzLmVhY2guY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmZhY2V0UmFuZ2UgOiBkZXB0aDApLHtcIm5hbWVcIjpcImVhY2hcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oNSwgZGF0YSwgMCwgYmxvY2tQYXJhbXMsIGRlcHRocyksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgPC9zcGFuPlxcblwiO1xufSxcIjNcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSxibG9ja1BhcmFtcyxkZXB0aHMpIHtcbiAgICB2YXIgYWxpYXMxPWNvbnRhaW5lci5sYW1iZGEsIGFsaWFzMj1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbjtcblxuICByZXR1cm4gXCIgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiZ3VpIG0tMCBtLXQtMiBtLXItMiBwLTQgbGFiZWwgY3Vyc29yLXBvaW50ZXIgc3RyaWtldGhyb3VnaC1ob3ZlclxcXCIgZGF0YS1maWx0ZXItZW50cnk9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aHNbMV0gIT0gbnVsbCA/IGRlcHRoc1sxXS5pZCA6IGRlcHRoc1sxXSksIGRlcHRoMCkpXG4gICAgKyBcIjpcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGFiZWwgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCI6XCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoc1sxXSAhPSBudWxsID8gZGVwdGhzWzFdLnR5cGUgOiBkZXB0aHNbMV0pLCBkZXB0aDApKVxuICAgICsgXCJcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmxhYmVsIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiXFxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cXFwiZ3VpLWljb24gZ3VpLWljb24tY2FuY2VsXFxcIj48L2k+XFxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxcblwiO1xufSxcIjVcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSxibG9ja1BhcmFtcyxkZXB0aHMpIHtcbiAgICB2YXIgYWxpYXMxPWNvbnRhaW5lci5sYW1iZGEsIGFsaWFzMj1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbjtcblxuICByZXR1cm4gXCIgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiZ3VpIG0tMCBtLXQtMiBtLXItMiBwLTQgbGFiZWwgY3Vyc29yLXBvaW50ZXIgc3RyaWtldGhyb3VnaC1ob3ZlclxcXCIgZGF0YS1maWx0ZXItZW50cnk9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aHNbMV0gIT0gbnVsbCA/IGRlcHRoc1sxXS5pZCA6IGRlcHRoc1sxXSksIGRlcHRoMCkpXG4gICAgKyBcIjpcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGFiZWwgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCI6XCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoc1sxXSAhPSBudWxsID8gZGVwdGhzWzFdLnR5cGUgOiBkZXB0aHNbMV0pLCBkZXB0aDApKVxuICAgICsgXCI6dHJ1ZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICBcIlxuICAgICsgYWxpYXMyKF9fZGVmYXVsdChyZXF1aXJlKFwiQzpcXFxcVXNlcnNcXFxccm91c3R1cmdcXFxcU291cmNlXFxcXFJlcG9zXFxcXFNlYXJjaE1hc3RlclxcXFxGYWNldG9vXFxcXHNyY1xcXFxoYnNcXFxcaGVscGVyc1xcXFxSYW5nZS50c1wiKSkuY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5taW4gOiBkZXB0aDApLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5tYXggOiBkZXB0aDApLChkZXB0aHNbMV0gIT0gbnVsbCA/IGRlcHRoc1sxXS50eXBlIDogZGVwdGhzWzFdKSx7XCJuYW1lXCI6XCJSYW5nZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSlcbiAgICArIFwiXFxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cXFwiZ3VpLWljb24gZ3VpLWljb24tY2FuY2VsXFxcIj48L2k+XFxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxcblwiO1xufSxcImNvbXBpbGVyXCI6WzcsXCI+PSA0LjAuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSxibG9ja1BhcmFtcyxkZXB0aHMpIHtcbiAgICB2YXIgc3RhY2sxO1xuXG4gIHJldHVybiAoKHN0YWNrMSA9IGhlbHBlcnNbXCJpZlwiXS5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuZmlsdGVycyA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEubGVuZ3RoIDogc3RhY2sxKSx7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgxLCBkYXRhLCAwLCBibG9ja1BhcmFtcywgZGVwdGhzKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKTtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZSxcInVzZURlcHRoc1wiOnRydWV9KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9oYnMvZmFjZXQtYXBwbGllZC1maWx0ZXJzLmhic1xuLy8gbW9kdWxlIGlkID0gMzFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCJpbXBvcnQgKiBhcyBtb21lbnQgZnJvbSBcIm1vbWVudFwiO1xyXG5jb25zdCByYW5nZSA9IChtaW4sIG1heCwgdHlwZSkgPT4ge1xyXG4gICAgbGV0IHN0ciA9IFwiXCI7XHJcbiAgICBsZXQgbWluU3RyID0gbWluO1xyXG4gICAgbGV0IG1heFN0ciA9IG1heDtcclxuICAgIGlmICh0eXBlID09PSBcIkVkbS5EYXRlVGltZU9mZnNldFwiKSB7XHJcbiAgICAgICAgaWYgKG1pbiAhPT0gdW5kZWZpbmVkICYmIG1pbiAhPT0gbnVsbCAmJiBtaW4gIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgbWluU3RyID0gbW9tZW50KG1pbikuZm9ybWF0KFwibGxcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChtYXggIT09IHVuZGVmaW5lZCAmJiBtYXggIT09IG51bGwgJiYgbWF4ICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIG1heFN0ciA9IG1vbWVudChtYXgpLmZvcm1hdChcImxsXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChtaW5TdHIgIT09IHVuZGVmaW5lZCAmJiBtaW5TdHIgIT09IG51bGwgJiYgbWluU3RyICE9PSBcIlwiKSB7XHJcbiAgICAgICAgc3RyICs9IFwiIGZyb206IFwiICsgbWluU3RyO1xyXG4gICAgfVxyXG4gICAgaWYgKG1heFN0ciAhPT0gdW5kZWZpbmVkICYmIG1heFN0ciAhPT0gbnVsbCAmJiBtYXhTdHIgIT09IFwiXCIpIHtcclxuICAgICAgICBzdHIgKz0gXCIgdG86IFwiICsgbWF4U3RyO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHN0cjtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHJhbmdlO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvdHNsaW50LWxvYWRlcj8/cmVmLS0xIS4vc3JjL2hicy9oZWxwZXJzL1JhbmdlLnRzIiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzMzX187XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJtb21lbnRcIlxuLy8gbW9kdWxlIGlkID0gMzNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCJpbXBvcnQgeyBGaWx0ZXJBY3Rpb25UeXBlIH0gZnJvbSBcIi4uL21vZGVscy9GaWx0ZXJBY3Rpb25UeXBlXCI7XHJcbmltcG9ydCB7IElGaWx0ZXJPcHRpb25zIH0gZnJvbSBcIi4vSUZpbHRlck9wdGlvbnNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBGaWx0ZXJDb25maWdTdG9yZSB7XHJcbiAgICBwcml2YXRlIG9wdGlvbnM6IElGaWx0ZXJPcHRpb25zO1xyXG4gICAgcHJpdmF0ZSBkZWZhdWx0ZmlsdGVyT3B0aW9uczogSUZpbHRlck9wdGlvbnMgPSB7XHJcbiAgICAgICAgYW5pbWF0aW9uVGltZTogMjAwLFxyXG4gICAgICAgIGNvbnRhaW5lckVsZW1lbnQ6IG51bGwsXHJcbiAgICAgICAgZmlsdGVyQ29uZmlnOiBbXSxcclxuICAgICAgICBvbkFsbEZpbHRlclJlbW92ZTogKCkgPT4ge1xyXG4gICAgICAgIC8vIElnbm9yZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25GaWx0ZXJDaGFuZ2U6IChrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZywgYWN0aW9uOiBGaWx0ZXJBY3Rpb25UeXBlKTogdm9pZCA9PiB7XHJcbiAgICAgICAgLy8gSWdub3JlXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zOiBJRmlsdGVyT3B0aW9ucykge1xyXG4gICAgICAgIHRoaXMuZXh0ZW5kT3B0aW9ucyhvcHRpb25zKTtcclxuICAgICAgICBpZiAob3B0aW9ucy5jb250YWluZXJFbGVtZW50ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBsZWFzZSBQcm92aWRlIGEgdmFsaWQgY29udGFpbmVyIEVsZW1lbnQgb2JqZWN0IGZvciBmaWx0ZXJzXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHB1YmxpYyBnZXQgT3B0aW9ucygpOiBJRmlsdGVyT3B0aW9ucyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucztcclxuICAgIH1cclxuICAgIHByaXZhdGUgZXh0ZW5kT3B0aW9ucyA9IChpbnB1dE9wdGlvbnM6IElGaWx0ZXJPcHRpb25zKTogSUZpbHRlck9wdGlvbnMgPT4ge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5vcHRpb25zID0galF1ZXJ5LmV4dGVuZCh7fSwgdGhpcy5kZWZhdWx0ZmlsdGVyT3B0aW9ucywgaW5wdXRPcHRpb25zKSk7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXI/P3JlZi0tMSEuL3NyYy90cy9jb25maWcvRmlsdGVyQ29uZmlnU3RvcmUudHMiXSwic291cmNlUm9vdCI6IiJ9