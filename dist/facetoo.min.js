!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n(require("handlebars/runtime")):"function"==typeof define&&define.amd?define(["handlebars.runtime"],n):"object"==typeof exports?exports.Facetoo=n(require("handlebars/runtime")):e.Facetoo=n(e.Handlebars)}("undefined"!=typeof self?self:this,function(e){return function(e){function n(i){if(t[i])return t[i].exports;var a=t[i]={i:i,l:!1,exports:{}};return e[i].call(a.exports,a,a.exports,n),a.l=!0,a.exports}var t={};return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},n.p="",n(n.s=7)}([function(n,t){n.exports=e},function(e,n,t){var i=t(0);e.exports=(i.default||i).template({compiler:[7,">= 4.0.0"],main:function(e,n,t,i,a){return'<div class="show-facet gui fluid-h cursor-pointer">\r\n    <i class="gui gui-icon gui-icon-chevron-right"></i>\r\n    <br>\r\n    <i class="gui gui-icon gui-icon-filter primary"></i>\r\n</div>'},useData:!0})},function(e,n,t){function i(e){return e&&(e.__esModule?e.default:e)}var a=t(0);e.exports=(a.default||a).template({1:function(e,n,a,l,o,r,c){var s,u=e.lambda,d=e.escapeExpression,f=null!=n?n:e.nullContext||{};return'        <div class="item facet-item" data-attr-name="'+d(u(null!=n?n.name:n,n))+'">\n            <div class="content">\n                <div class="facet-item-header fluid cursor-pointer gui selectable item">\n                    <span class="gui gui-subheading-2 primary">\n                        '+d(u(null!=n?n.name:n,n))+" "+(null!=(s=i(t(11)).call(f,null!=n?n.facetValues:n,{name:"SelectedFiltersCount",hash:{},data:o}))?s:"")+'\n                    </span>\n                    <i class="gui gui-icon gui-icon-chevron-down right m-r-10"></i>\n                </div>\n                <div class="clear"></div>\n                <div class="description gui gui-hidden facet-item-description m-t-5">\n                    <div class="gui fluid-w fluid-h m-0 p-0">\n                        '+(null!=(s=a.each.call(f,null!=n?n.facetValues:n,{name:"each",hash:{},fn:e.program(2,o,0,r,c),inverse:e.noop,data:o}))?s:"")+"                    </div>\n                </div>\n            </div>\n        </div>\n"},2:function(e,n,t,i,a,l,o){var r;return' \n                        <div class="item">\n'+(null!=(r=t.if.call(null!=n?n:e.nullContext||{},null!=n?n.selected:n,{name:"if",hash:{},fn:e.program(3,a,0,l,o),inverse:e.program(5,a,0,l,o),data:a}))?r:"")+"                        </div>\n"},3:function(e,n,a,l,o,r,c){var s=e.lambda,u=e.escapeExpression,d=null!=n?n:e.nullContext||{};return'                            <label title="'+u(s(null!=n?n.label:n,n))+'" class="gui cursor-pointer no-wrap primary">\n                                <input class="gui facet-value-checkbox cursor-pointer m-l-0" id="'+u(s(null!=n?n.label:n,n))+"-"+u(s(o&&o.index,n))+'" '+u(i(t(3)).call(d,null!=n?n.selected:n,{name:"Checked",hash:{},data:o}))+" "+u(i(t(4)).call(d,null!=n?n.disabled:n,{name:"Disabled",hash:{},data:o}))+' value="'+u(s(null!=c[1]?c[1].id:c[1],n))+":"+u(s(null!=n?n.label:n,n))+":"+u(s(null!=c[1]?c[1].type:c[1],n))+'" type="checkbox" />\n                                '+u(s(null!=n?n.label:n,n))+'\n                                <span class="gui-body-2">('+u(s(null!=n?n.count:n,n))+")</span>\n                            </label>\n"},5:function(e,n,a,l,o,r,c){var s=e.lambda,u=e.escapeExpression,d=null!=n?n:e.nullContext||{};return'                            <label title="'+u(s(null!=n?n.label:n,n))+'" class="gui cursor-pointer no-wrap">\n                                <input class="gui facet-value-checkbox cursor-pointer m-l-0" id="'+u(s(null!=n?n.label:n,n))+"-"+u(s(o&&o.index,n))+'" '+u(i(t(3)).call(d,null!=n?n.selected:n,{name:"Checked",hash:{},data:o}))+" "+u(i(t(4)).call(d,null!=n?n.disabled:n,{name:"Disabled",hash:{},data:o}))+' value="'+u(s(null!=c[1]?c[1].id:c[1],n))+":"+u(s(null!=n?n.label:n,n))+":"+u(s(null!=c[1]?c[1].type:c[1],n))+'" type="checkbox" />\n                                '+u(s(null!=n?n.label:n,n))+'\n                                <span class="gui-body-2">('+u(s(null!=n?n.count:n,n))+")</span>\n                            </label>\n"},compiler:[7,">= 4.0.0"],main:function(e,n,t,i,a,l,o){var r;return'<div class="gui fluid-h of-hidden">\n    <div class="gui m-5">\n        <div class="gui left">\n            <span class="gui caps bold gui-subheading-2">\n                    Filter By\n            </span>\n        </div>\n        <div class="gui right">\n            <a class="gui cursor-pointer hide-facet">\n                <i class="gui-icon gui-icon-chevron-left"></i>\n            </a>\n        </div>\n    </div>\n    <div class="gui clear"></div>\n    <div class="gui m-t-5"></div>\n    <div class="gui left">\n        <a class="gui cursor-pointer expand-all">\n            <i class="gui-icon gui-icon-add"></i>\n            Expand All\n        </a>\n        <a class="gui cursor-pointer m-l-10 collapse-all">\n            <i class="gui-icon  gui-icon-minus"></i>\n            Collapse All\n        </a>\n    </div>\n    <div class="gui clear"></div>\n    <div class="gui m-t-5"></div>\n    <div class="gui input fluid-w p-t-5 p-r-5 p-b-5 p-l-1">\n        <input class="gui input p-5 fluid-w gui-subheading-2 filter-search-input" placeholder="Search Filters" />\n    </div>\n    <div class="gui fluid-h facet-list of-auto">\n'+(null!=(r=t.each.call(null!=n?n:e.nullContext||{},null!=n?n.facets:n,{name:"each",hash:{},fn:e.program(1,a,0,l,o),inverse:e.noop,data:a}))?r:"")+"    </div>\n</div>"},useData:!0,useDepths:!0})},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(e){return e?"checked":""};n.default=i},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(e){return e?"disabled":""};n.default=i},function(e,n,t){"use strict";function i(e){for(var t in e)n.hasOwnProperty(t)||(n[t]=e[t])}Object.defineProperty(n,"__esModule",{value:!0}),i(t(13)),i(t(14)),i(t(15)),i(t(16)),i(t(17))},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});!function(e){e.Add="Add",e.Minus="Minus"}(n.FilterActionType||(n.FilterActionType={}))},function(e,n,t){"use strict";function i(e){for(var t in e)n.hasOwnProperty(t)||(n[t]=e[t])}Object.defineProperty(n,"__esModule",{value:!0}),i(t(8)),i(t(18))},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=t(9),a=t(12),l=t(5),o=function(){function e(e){var n=this;this.handlerChain=[],this.bind=function(e){var t=n.templateService.bind(e);n.facetElement.html(t)},this.configStore=new a.FacetConfigStore(e),this.facetElement=jQuery(e.containerElement),this.templateService=new i.FacetTemplateService(this.configStore),this.handlerChain.push(new l.ExpandCollapseFacetsHandler(this.facetElement)),this.handlerChain.push(new l.FacetActionHandler(this.facetElement,this.configStore)),this.handlerChain.push(new l.FacetSearchHandler(this.facetElement)),this.handlerChain.push(new l.HideFacetSectionHandler(this.facetElement,this.configStore)),this.handlerChain.forEach(function(e){e.RegisterDomHandler()})}return e}();n.Facet=o},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=t(10),a=function(){function e(e){this.configStore=e,this.tempateFunctionForFacetMain=i}return e.prototype.bind=function(e){var n=this.configStore.Options.collapsed;return this.tempateFunctionForFacetMain({collapsed:n,facets:e})},e}();n.FacetTemplateService=a},function(e,n,t){var i=t(0);e.exports=(i.default||i).template({1:function(e,n,i,a,l){var o;return'    <div class="facet-collapsed-body gui fluid-h w-auto">'+(null!=(o=e.invokePartial(t(1),n,{name:"facet-collapsed",data:l,helpers:i,partials:a,decorators:e.decorators}))?o:"")+'</div>\n    <div class="facet-body gui fluid-h of-hidden gui-hidden">'+(null!=(o=e.invokePartial(t(2),n,{name:"facet-body",data:l,helpers:i,partials:a,decorators:e.decorators}))?o:"")+"</div>\n"},3:function(e,n,i,a,l){var o;return'    <div class="facet-collapsed-body gui fluid-h w-auto gui-hidden">'+(null!=(o=e.invokePartial(t(1),n,{name:"facet-collapsed",data:l,helpers:i,partials:a,decorators:e.decorators}))?o:"")+'</div>\n    <div class="facet-body gui fluid-h of-hidden">'+(null!=(o=e.invokePartial(t(2),n,{name:"facet-body",data:l,helpers:i,partials:a,decorators:e.decorators}))?o:"")+"</div>\n"},compiler:[7,">= 4.0.0"],main:function(e,n,t,i,a){var l;return'<div class="gui fluid-h ">\n'+(null!=(l=t.if.call(null!=n?n:e.nullContext||{},null!=n?n.collapsed:n,{name:"if",hash:{},fn:e.program(1,a,0),inverse:e.program(3,a,0),data:a}))?l:"")+"</div>"},usePartial:!0,useData:!0})},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(e){var n=0;if(void 0!==e&&null!==e&&e.length>0)for(var t=0,i=e;t<i.length;t++){var a=i[t];a.selected&&n++}return 0===n?"":'<span class="gui-body-2">('+n+")</span>"};n.default=i},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e){var n=this;if(this.defaultFacetOptions={collapsed:!1,containerElement:null,onFilterChange:function(e,n,t){}},this.extendOptions=function(e){return n.options=jQuery.extend({},n.defaultFacetOptions,e)},this.extendOptions(e),null===e.containerElement)throw new Error("Please Provide a valid container Element object")}return Object.defineProperty(e.prototype,"Options",{get:function(){return this.options},enumerable:!0,configurable:!0}),e}();n.FacetConfigStore=i},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i;!function(e){e[e.Show=0]="Show",e[e.Hide=1]="Hide",e[e.Toggle=2]="Toggle"}(i||(i={}));var a=function(){function e(e){this.element=e,this.ControlVisibilityOfFilter=function(e,n){var t=e.children("i"),a=t.hasClass("gui-icon-chevron-up");i.Toggle!==n&&(a&&n===i.Show||!a&&n===i.Hide)||(a?(e.parents(".facet-item").find(".facet-item-description").slideUp(200),t.removeClass("gui-icon-chevron-up"),t.addClass("gui-icon-chevron-down")):(e.parents(".facet-item").find(".facet-item-description").slideDown(200),t.removeClass("gui-icon-chevron-down"),t.addClass("gui-icon-chevron-up")))}}return e.prototype.RegisterDomHandler=function(){var e=this;this.element.on("click",".expand-all",function(n){e.element.find(".facet-item-header").each(function(n,t){e.ControlVisibilityOfFilter(jQuery(t),i.Show)}),n.stopPropagation()}),this.element.on("click",".collapse-all",function(n){e.element.find(".facet-item-header").each(function(n,t){e.ControlVisibilityOfFilter(jQuery(t),i.Hide)}),n.stopPropagation()}),this.element.on("click",".facet-item-header",function(n){var t=jQuery(n.target),a=t.is(".facet-item-header")?t:t.parent(".facet-item-header");e.element.find(".facet-header .button").removeAttr("disabled"),e.ControlVisibilityOfFilter(a,i.Toggle),n.stopPropagation()})},e.prototype.onResize=function(){},e.prototype.onDocumentClick=function(e){},e}();n.ExpandCollapseFacetsHandler=a},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=t(6),a=function(){function e(e,n){this.element=e,this.configStore=n}return e.prototype.RegisterDomHandler=function(){var e=this;this.element.on("change",".facet-body .facet-item-description .facet-value-checkbox",function(n){var t=jQuery(n.target),a=t.val().toString(),l=a.split(":"),o=t.is(":checked"),r=o?i.FilterActionType.Add:i.FilterActionType.Minus;e.configStore.Options.onFilterChange(l[0],l[1],r,l[2]),n.stopPropagation()})},e.prototype.onResize=function(){},e.prototype.onDocumentClick=function(e){},e}();n.FacetActionHandler=a},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e){this.element=e}return e.prototype.RegisterDomHandler=function(){var e=this;this.element.on("keyup",".filter-search-input",function(n){var t=jQuery(n.target),i=t.val().toString().toLowerCase();e.element.find(".facet-list .facet-item").each(function(e,n){-1===jQuery(n).attr("data-attr-name").toLowerCase().indexOf(i)?jQuery(n).fadeOut(200):jQuery(n).fadeIn(200)}),n.stopPropagation()})},e.prototype.onResize=function(){},e.prototype.onDocumentClick=function(e){},e}();n.FacetSearchHandler=i},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=t(6),a=function(){function e(e,n){this.filterElement=e,this.configStore=n}return e.prototype.RegisterDomHandler=function(){var e=this;this.filterElement.on("click",".facet-subheader .facet-labels .label",function(n){var t=jQuery(n.target);t.is(".label")||(t=t.parents(".label"));var a=t.attr("data-filter-entry").toString(),l=a.split(":");e.configStore.Options.onFilterChange(l[0],l[1],i.FilterActionType.Minus,l[2]),n.stopPropagation()}),this.filterElement.on("click",".facet-subheader .remove-all",function(n){e.configStore.Options.onAllFilterRemove(),n.stopPropagation()})},e.prototype.onResize=function(){},e.prototype.onDocumentClick=function(e){},e}();n.FilterActionHandler=a},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,n){var t=this;this.element=e,this.configStore=n,this.RegisterDomHandler=function(){t.element.on("click",".hide-facet",function(e){$(".facet-body").hide(),$(".facet-collapsed-body").fadeIn(200),t.configStore.Options.collapsed=!0,e.stopPropagation()}),t.element.on("click",".show-facet",function(e){$(".facet-collapsed-body").hide(),$(".facet-body").fadeIn(200),t.configStore.Options.collapsed=!1,e.stopPropagation()})}}return e.prototype.onResize=function(){},e.prototype.onDocumentClick=function(e){},e}();n.HideFacetSectionHandler=i},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=t(19),a=t(21),l=t(5),o=function(){function e(e){var n=this;this.handlerChain=[],this.bind=function(e){var t=n.templateService.bind(e);n.filterElement.html(t)},this.configStore=new a.FilterConfigStore(e),this.filterElement=jQuery(e.containerElement),this.templateService=new i.FilterTemplateService,this.handlerChain.push(new l.FilterActionHandler(this.filterElement,this.configStore)),this.handlerChain.forEach(function(e){e.RegisterDomHandler()})}return e}();n.Filter=o},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=t(20),a=function(){function e(){this.tempateFunctionForFacetSubHeader=i}return e.prototype.bind=function(e){return this.tempateFunctionForFacetSubHeader({filters:e})},e}();n.FilterTemplateService=a},function(e,n,t){var i=t(0);e.exports=(i.default||i).template({1:function(e,n,t,i,a,l,o){var r;return'<div class="content facet-subheader gui fluid-w basic curved p-5">\n    <span class="gui bold gui-subheading-2 caps">Applied Filters</span>\n    <a class="gui m-l-5 remove-all" >\n        <i class="gui-icon gui-icon-cancel"></i>\n        <span>Clear All</span>\n    </a>\n    <span class="gui m-l-10">\n'+(null!=(r=t.each.call(null!=n?n:e.nullContext||{},null!=n?n.filters:n,{name:"each",hash:{},fn:e.program(2,a,0,l,o),inverse:e.noop,data:a}))?r:"")+"    </span>\n</div>\n"},2:function(e,n,t,i,a,l,o){var r,c,s=null!=n?n:e.nullContext||{};return'        <span class="gui m-r-5">\n            <span class="gui large labels facet-labels">\n                <span class="gui gui-subheading-2">'+e.escapeExpression((c=null!=(c=t.name||(null!=n?n.name:n))?c:t.helperMissing,"function"==typeof c?c.call(s,{name:"name",hash:{},data:a}):c))+"</span>\n"+(null!=(r=t.each.call(s,null!=n?n.facetValues:n,{name:"each",hash:{},fn:e.program(3,a,0,l,o),inverse:e.noop,data:a}))?r:"")+"            </span>\n        </span>\n"},3:function(e,n,t,i,a,l,o){var r,c=e.lambda,s=e.escapeExpression;return'                <span class="gui m-0 m-r-2 p-4 label cursor-pointer strikethrough-hover" data-filter-entry="'+s(c(null!=o[1]?o[1].id:o[1],n))+":"+s(c(null!=n?n.label:n,n))+":"+s(c(null!=o[1]?o[1].type:o[1],n))+'">\n                    '+s((r=null!=(r=t.label||(null!=n?n.label:n))?r:t.helperMissing,"function"==typeof r?r.call(null!=n?n:e.nullContext||{},{name:"label",hash:{},data:a}):r))+'\n                    <i class="gui-icon gui-icon-cancel"></i>\n                </span>\n'},compiler:[7,">= 4.0.0"],main:function(e,n,t,i,a,l,o){var r;return null!=(r=t.if.call(null!=n?n:e.nullContext||{},null!=(r=null!=n?n.filters:n)?r.length:r,{name:"if",hash:{},fn:e.program(1,a,0,l,o),inverse:e.noop,data:a}))?r:""},useData:!0,useDepths:!0})},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e){var n=this;if(this.defaultfilterOptions={containerElement:null,onAllFilterRemove:function(){},onFilterChange:function(e,n,t){}},this.extendOptions=function(e){return n.options=jQuery.extend({},n.defaultfilterOptions,e)},this.extendOptions(e),null===e.containerElement)throw new Error("Please Provide a valid container Element object for filters")}return Object.defineProperty(e.prototype,"Options",{get:function(){return this.options},enumerable:!0,configurable:!0}),e}();n.FilterConfigStore=i}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy9mYWNldG9vLm1pbi5qcyIsIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgMzNlZDA2YmE3OWUyZTI4ZjgxOGEiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIHtcInJvb3RcIjpcIkhhbmRsZWJhcnNcIixcImFtZFwiOlwiaGFuZGxlYmFycy5ydW50aW1lXCIsXCJjb21tb25qczJcIjpcImhhbmRsZWJhcnMvcnVudGltZVwiLFwiY29tbW9uanNcIjpcImhhbmRsZWJhcnMvcnVudGltZVwifSIsIndlYnBhY2s6Ly8vLi9zcmMvaGJzL2ZhY2V0LWNvbGxhcHNlZC5oYnMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2hicy9mYWNldC1ib2R5LmhicyIsIndlYnBhY2s6Ly8vLi9zcmMvaGJzL2hlbHBlcnMvQ2hlY2tlZC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaGJzL2hlbHBlcnMvRGlzYWJsZWQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2V2ZW50aGFuZGxlcnMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL21vZGVscy9GaWx0ZXJBY3Rpb25UeXBlLnRzIiwid2VicGFjazovLy8uL3NyYy90cy9tYWluL0VudHJ5LnRzIiwid2VicGFjazovLy8uL3NyYy90cy9tYWluL0ZhY2V0LnRzIiwid2VicGFjazovLy8uL3NyYy90cy9zZXJ2aWNlcy9GYWNldFRlbXBsYXRlU2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaGJzL2ZhY2V0LW1haW4uaGJzIiwid2VicGFjazovLy8uL3NyYy9oYnMvaGVscGVycy9TZWxlY3RlZEZpbHRlcnNDb3VudC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvY29uZmlnL0ZhY2V0Q29uZmlnU3RvcmUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2V2ZW50aGFuZGxlcnMvRXhwYW5kQ29sbGFwc2VGYWNldHNIYW5kbGVyLnRzIiwid2VicGFjazovLy8uL3NyYy90cy9ldmVudGhhbmRsZXJzL0ZhY2V0QWN0aW9uSGFuZGxlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvZXZlbnRoYW5kbGVycy9GYWNldFNlYXJjaEhhbmRsZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2V2ZW50aGFuZGxlcnMvRmlsdGVyQWN0aW9uSGFuZGxlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvZXZlbnRoYW5kbGVycy9IaWRlRmFjZXRTZWN0aW9uSGFuZGxlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvbWFpbi9GaWx0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL3NlcnZpY2VzL0ZpbHRlclRlbXBsYXRlU2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaGJzL2ZhY2V0LWFwcGxpZWQtZmlsdGVycy5oYnMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2NvbmZpZy9GaWx0ZXJDb25maWdTdG9yZS50cyJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJyZXF1aXJlIiwiZGVmaW5lIiwiYW1kIiwic2VsZiIsInRoaXMiLCJfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzBfXyIsIm1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpbnN0YWxsZWRNb2R1bGVzIiwiaSIsImwiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJuIiwiX19lc01vZHVsZSIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIkhhbmRsZWJhcnMiLCJ0ZW1wbGF0ZSIsImNvbXBpbGVyIiwibWFpbiIsImNvbnRhaW5lciIsImRlcHRoMCIsImhlbHBlcnMiLCJwYXJ0aWFscyIsImRhdGEiLCJ1c2VEYXRhIiwiX19kZWZhdWx0Iiwib2JqIiwiMSIsImJsb2NrUGFyYW1zIiwiZGVwdGhzIiwic3RhY2sxIiwiYWxpYXMxIiwibGFtYmRhIiwiYWxpYXMyIiwiZXNjYXBlRXhwcmVzc2lvbiIsImFsaWFzMyIsIm51bGxDb250ZXh0IiwiZmFjZXRWYWx1ZXMiLCJoYXNoIiwiZWFjaCIsImZuIiwicHJvZ3JhbSIsImludmVyc2UiLCJub29wIiwiMiIsInNlbGVjdGVkIiwiMyIsImxhYmVsIiwiaW5kZXgiLCJkaXNhYmxlZCIsImlkIiwidHlwZSIsImNvdW50IiwiNSIsImZhY2V0cyIsInVzZURlcHRocyIsInZhbHVlIiwiY2hlY2tlZCIsImJvb2wiLCJkZWZhdWx0IiwiX19leHBvcnQiLCJGaWx0ZXJBY3Rpb25UeXBlIiwiRmFjZXRUZW1wbGF0ZVNlcnZpY2VfMSIsIkZhY2V0Q29uZmlnU3RvcmVfMSIsImV2ZW50aGFuZGxlcnNfMSIsIkZhY2V0Iiwib3B0aW9ucyIsIl90aGlzIiwiaGFuZGxlckNoYWluIiwiYmluZCIsImZ1bGxGYWNldCIsInRlbXBsYXRlU2VydmljZSIsImZhY2V0RWxlbWVudCIsImh0bWwiLCJjb25maWdTdG9yZSIsIkZhY2V0Q29uZmlnU3RvcmUiLCJqUXVlcnkiLCJjb250YWluZXJFbGVtZW50IiwiRmFjZXRUZW1wbGF0ZVNlcnZpY2UiLCJwdXNoIiwiRXhwYW5kQ29sbGFwc2VGYWNldHNIYW5kbGVyIiwiRmFjZXRBY3Rpb25IYW5kbGVyIiwiRmFjZXRTZWFyY2hIYW5kbGVyIiwiSGlkZUZhY2V0U2VjdGlvbkhhbmRsZXIiLCJmb3JFYWNoIiwiaGFuZGxlciIsIlJlZ2lzdGVyRG9tSGFuZGxlciIsIkZhY2V0TWFpbiIsInRlbXBhdGVGdW5jdGlvbkZvckZhY2V0TWFpbiIsImNvbGxhcHNlZCIsIk9wdGlvbnMiLCJpbnZva2VQYXJ0aWFsIiwiZGVjb3JhdG9ycyIsInVzZVBhcnRpYWwiLCJzZWxlY3RlZEZpbHRlcnNDb3VudCIsInVuZGVmaW5lZCIsImxlbmd0aCIsIl9pIiwiZmFjZXRWYWx1ZXNfMSIsImZhY2V0VmFsdWUiLCJkZWZhdWx0RmFjZXRPcHRpb25zIiwib25GaWx0ZXJDaGFuZ2UiLCJrZXkiLCJhY3Rpb24iLCJleHRlbmRPcHRpb25zIiwiaW5wdXRPcHRpb25zIiwiZXh0ZW5kIiwiRXJyb3IiLCJTaG93SGlkZSIsImVsZW1lbnQiLCJDb250cm9sVmlzaWJpbGl0eU9mRmlsdGVyIiwic2hvd0hpZGUiLCJpY29uRWxlbWVudCIsImNoaWxkcmVuIiwiY3VycmVudGx5VmlzaWJsZSIsImhhc0NsYXNzIiwiVG9nZ2xlIiwiU2hvdyIsIkhpZGUiLCJwYXJlbnRzIiwiZmluZCIsInNsaWRlVXAiLCJyZW1vdmVDbGFzcyIsImFkZENsYXNzIiwic2xpZGVEb3duIiwib24iLCJldmVudCIsInN0b3BQcm9wYWdhdGlvbiIsInRhcmdldCIsImhlYWRlckVsZW1lbnQiLCJpcyIsInBhcmVudCIsInJlbW92ZUF0dHIiLCJvblJlc2l6ZSIsIm9uRG9jdW1lbnRDbGljayIsIkZpbHRlckFjdGlvblR5cGVfMSIsInZhbFN0ciIsInZhbCIsInRvU3RyaW5nIiwic3BsaXQiLCJBZGQiLCJNaW51cyIsInRvTG93ZXJDYXNlIiwiZSIsImF0dHIiLCJpbmRleE9mIiwiZmFkZU91dCIsImZhZGVJbiIsIkZpbHRlckFjdGlvbkhhbmRsZXIiLCJmaWx0ZXJFbGVtZW50Iiwib25BbGxGaWx0ZXJSZW1vdmUiLCIkIiwiaGlkZSIsIkZpbHRlclRlbXBsYXRlU2VydmljZV8xIiwiRmlsdGVyQ29uZmlnU3RvcmVfMSIsIkZpbHRlciIsImZpbHRlcnMiLCJmYWNldFN1YkhlYWRlciIsIkZpbHRlckNvbmZpZ1N0b3JlIiwiRmlsdGVyVGVtcGxhdGVTZXJ2aWNlIiwiRmFjZXRTdWJIZWFkZXIiLCJ0ZW1wYXRlRnVuY3Rpb25Gb3JGYWNldFN1YkhlYWRlciIsImhlbHBlciIsImhlbHBlck1pc3NpbmciLCJkZWZhdWx0ZmlsdGVyT3B0aW9ucyJdLCJtYXBwaW5ncyI6IkNBQUEsU0FBQUEsRUFBQUMsR0FDQSxnQkFBQUMsVUFBQSxnQkFBQUMsUUFD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QUFRdEMsR0FBS0QsUUFBVVUsT0FBTzhCLFVBQVd2QyxFQUFLaUcscUJBQXNCM0QsSUFUcEV0SCxLQUFLcUgsY0FBY3RDLEdBQ2MsT0FBN0JBLEVBQVFXLGlCQUNSLEtBQU0sSUFBSThCLE9BQU0sK0RBUzVCLE1BTkl6RyxRQUFBQyxlQUFXMkosRUFBQW5KLFVBQUEsV3ZCZ3pCUEwsSXVCaHpCSixXQUNJLE1BQU9uQixNQUFLK0UsU3ZCa3pCWjdELFlBQVksRUFDWkQsY0FBYyxJdUI5eUJ0QjBKLElBdkJhakwsR0FBQWlMIiwiZmlsZSI6ImZhY2V0b28ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiaGFuZGxlYmFycy9ydW50aW1lXCIpKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtcImhhbmRsZWJhcnMucnVudGltZVwiXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJGYWNldG9vXCJdID0gZmFjdG9yeShyZXF1aXJlKFwiaGFuZGxlYmFycy9ydW50aW1lXCIpKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJGYWNldG9vXCJdID0gZmFjdG9yeShyb290W1wiSGFuZGxlYmFyc1wiXSk7XG59KSh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDogdGhpcywgZnVuY3Rpb24oX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8wX18pIHtcbnJldHVybiBcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiaGFuZGxlYmFycy9ydW50aW1lXCIpKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtcImhhbmRsZWJhcnMucnVudGltZVwiXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJGYWNldG9vXCJdID0gZmFjdG9yeShyZXF1aXJlKFwiaGFuZGxlYmFycy9ydW50aW1lXCIpKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJGYWNldG9vXCJdID0gZmFjdG9yeShyb290W1wiSGFuZGxlYmFyc1wiXSk7XG59KSh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDogdGhpcywgZnVuY3Rpb24oX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8wX18pIHtcbnJldHVybiAvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4vKioqKioqLyBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4vKioqKioqLyBcdFx0XHRcdGdldDogZ2V0dGVyXG4vKioqKioqLyBcdFx0XHR9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNyk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIGV4dGVybmFsIHtcInJvb3RcIjpcIkhhbmRsZWJhcnNcIixcImFtZFwiOlwiaGFuZGxlYmFycy5ydW50aW1lXCIsXCJjb21tb25qczJcIjpcImhhbmRsZWJhcnMvcnVudGltZVwiLFwiY29tbW9uanNcIjpcImhhbmRsZWJhcnMvcnVudGltZVwifSAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBkeW5hbWljIGV4cG9ydHMgcHJvdmlkZWQgKi9cbi8qISBhbGwgZXhwb3J0cyB1c2VkICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8wX187XG5cbi8qKiovIH0pLFxuLyogMSAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9oYnMvZmFjZXQtY29sbGFwc2VkLmhicyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBkeW5hbWljIGV4cG9ydHMgcHJvdmlkZWQgKi9cbi8qISBhbGwgZXhwb3J0cyB1c2VkICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBIYW5kbGViYXJzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgaGFuZGxlYmFycyAqLyAwKTtcbmZ1bmN0aW9uIF9fZGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiAob2JqLl9fZXNNb2R1bGUgPyBvYmpbXCJkZWZhdWx0XCJdIDogb2JqKTsgfVxubW9kdWxlLmV4cG9ydHMgPSAoSGFuZGxlYmFyc1tcImRlZmF1bHRcIl0gfHwgSGFuZGxlYmFycykudGVtcGxhdGUoe1wiY29tcGlsZXJcIjpbNyxcIj49IDQuMC4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFwic2hvdy1mYWNldCBndWkgZmx1aWQtaCBjdXJzb3ItcG9pbnRlclxcXCI+XFxyXFxuICAgIDxpIGNsYXNzPVxcXCJndWkgZ3VpLWljb24gZ3VpLWljb24tY2hldnJvbi1yaWdodFxcXCI+PC9pPlxcclxcbiAgICA8YnI+XFxyXFxuICAgIDxpIGNsYXNzPVxcXCJndWkgZ3VpLWljb24gZ3VpLWljb24tZmlsdGVyIHByaW1hcnlcXFwiPjwvaT5cXHJcXG48L2Rpdj5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pO1xuXG4vKioqLyB9KSxcbi8qIDIgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2hicy9mYWNldC1ib2R5LmhicyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZHluYW1pYyBleHBvcnRzIHByb3ZpZGVkICovXG4vKiEgYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgSGFuZGxlYmFycyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIGhhbmRsZWJhcnMgKi8gMCk7XG5mdW5jdGlvbiBfX2RlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgKG9iai5fX2VzTW9kdWxlID8gb2JqW1wiZGVmYXVsdFwiXSA6IG9iaik7IH1cbm1vZHVsZS5leHBvcnRzID0gKEhhbmRsZWJhcnNbXCJkZWZhdWx0XCJdIHx8IEhhbmRsZWJhcnMpLnRlbXBsYXRlKHtcIjFcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSxibG9ja1BhcmFtcyxkZXB0aHMpIHtcbiAgICB2YXIgc3RhY2sxLCBhbGlhczE9Y29udGFpbmVyLmxhbWJkYSwgYWxpYXMyPWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uLCBhbGlhczM9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KTtcblxuICByZXR1cm4gXCIgICAgICAgIDxkaXYgY2xhc3M9XFxcIml0ZW0gZmFjZXQtaXRlbVxcXCIgZGF0YS1hdHRyLW5hbWU9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiXFxcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250ZW50XFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZmFjZXQtaXRlbS1oZWFkZXIgZmx1aWQgY3Vyc29yLXBvaW50ZXIgZ3VpIHNlbGVjdGFibGUgaXRlbVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiZ3VpIGd1aS1zdWJoZWFkaW5nLTIgcHJpbWFyeVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCIgXCJcbiAgICArICgoc3RhY2sxID0gX19kZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vc3JjL2hicy9oZWxwZXJzL1NlbGVjdGVkRmlsdGVyc0NvdW50LnRzICovIDExKSkuY2FsbChhbGlhczMsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmZhY2V0VmFsdWVzIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJTZWxlY3RlZEZpbHRlcnNDb3VudFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIlxcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XFxcImd1aSBndWktaWNvbiBndWktaWNvbi1jaGV2cm9uLWRvd24gcmlnaHQgbS1yLTEwXFxcIj48L2k+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjbGVhclxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImRlc2NyaXB0aW9uIGd1aSBndWktaGlkZGVuIGZhY2V0LWl0ZW0tZGVzY3JpcHRpb24gbS10LTVcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZ3VpIGZsdWlkLXcgZmx1aWQtaCBtLTAgcC0wXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzLmVhY2guY2FsbChhbGlhczMsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmZhY2V0VmFsdWVzIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDIsIGRhdGEsIDAsIGJsb2NrUGFyYW1zLCBkZXB0aHMpLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuXCI7XG59LFwiMlwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhLGJsb2NrUGFyYW1zLGRlcHRocykge1xuICAgIHZhciBzdGFjazE7XG5cbiAgcmV0dXJuIFwiIFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcIml0ZW1cXFwiPlxcblwiXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnNbXCJpZlwiXS5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnNlbGVjdGVkIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgzLCBkYXRhLCAwLCBibG9ja1BhcmFtcywgZGVwdGhzKSxcImludmVyc2VcIjpjb250YWluZXIucHJvZ3JhbSg1LCBkYXRhLCAwLCBibG9ja1BhcmFtcywgZGVwdGhzKSxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCIgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG5cIjtcbn0sXCIzXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEsYmxvY2tQYXJhbXMsZGVwdGhzKSB7XG4gICAgdmFyIGFsaWFzMT1jb250YWluZXIubGFtYmRhLCBhbGlhczI9Y29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb24sIGFsaWFzMz1kZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pO1xuXG4gIHJldHVybiBcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgdGl0bGU9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5sYWJlbCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCIgY2xhc3M9XFxcImd1aSBjdXJzb3ItcG9pbnRlciBuby13cmFwIHByaW1hcnlcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPVxcXCJndWkgZmFjZXQtdmFsdWUtY2hlY2tib3ggY3Vyc29yLXBvaW50ZXIgbS1sLTBcXFwiIGlkPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGFiZWwgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCItXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRhdGEgJiYgZGF0YS5pbmRleCksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCIgXCJcbiAgICArIGFsaWFzMihfX2RlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9zcmMvaGJzL2hlbHBlcnMvQ2hlY2tlZC50cyAqLyAzKSkuY2FsbChhbGlhczMsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnNlbGVjdGVkIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJDaGVja2VkXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKVxuICAgICsgXCIgXCJcbiAgICArIGFsaWFzMihfX2RlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9zcmMvaGJzL2hlbHBlcnMvRGlzYWJsZWQudHMgKi8gNCkpLmNhbGwoYWxpYXMzLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5kaXNhYmxlZCA6IGRlcHRoMCkse1wibmFtZVwiOlwiRGlzYWJsZWRcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpXG4gICAgKyBcIiB2YWx1ZT1cXFwiXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoc1sxXSAhPSBudWxsID8gZGVwdGhzWzFdLmlkIDogZGVwdGhzWzFdKSwgZGVwdGgwKSlcbiAgICArIFwiOlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5sYWJlbCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIjpcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGhzWzFdICE9IG51bGwgPyBkZXB0aHNbMV0udHlwZSA6IGRlcHRoc1sxXSksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCIgdHlwZT1cXFwiY2hlY2tib3hcXFwiIC8+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGFiZWwgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJndWktYm9keS0yXFxcIj4oXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNvdW50IDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiKTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cXG5cIjtcbn0sXCI1XCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEsYmxvY2tQYXJhbXMsZGVwdGhzKSB7XG4gICAgdmFyIGFsaWFzMT1jb250YWluZXIubGFtYmRhLCBhbGlhczI9Y29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb24sIGFsaWFzMz1kZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pO1xuXG4gIHJldHVybiBcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgdGl0bGU9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5sYWJlbCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCIgY2xhc3M9XFxcImd1aSBjdXJzb3ItcG9pbnRlciBuby13cmFwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cXFwiZ3VpIGZhY2V0LXZhbHVlLWNoZWNrYm94IGN1cnNvci1wb2ludGVyIG0tbC0wXFxcIiBpZD1cXFwiXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmxhYmVsIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiLVwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkYXRhICYmIGRhdGEuaW5kZXgpLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIFwiXG4gICAgKyBhbGlhczIoX19kZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vc3JjL2hicy9oZWxwZXJzL0NoZWNrZWQudHMgKi8gMykpLmNhbGwoYWxpYXMzLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5zZWxlY3RlZCA6IGRlcHRoMCkse1wibmFtZVwiOlwiQ2hlY2tlZFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSlcbiAgICArIFwiIFwiXG4gICAgKyBhbGlhczIoX19kZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vc3JjL2hicy9oZWxwZXJzL0Rpc2FibGVkLnRzICovIDQpKS5jYWxsKGFsaWFzMywoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuZGlzYWJsZWQgOiBkZXB0aDApLHtcIm5hbWVcIjpcIkRpc2FibGVkXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKVxuICAgICsgXCIgdmFsdWU9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aHNbMV0gIT0gbnVsbCA/IGRlcHRoc1sxXS5pZCA6IGRlcHRoc1sxXSksIGRlcHRoMCkpXG4gICAgKyBcIjpcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGFiZWwgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCI6XCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoc1sxXSAhPSBudWxsID8gZGVwdGhzWzFdLnR5cGUgOiBkZXB0aHNbMV0pLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIHR5cGU9XFxcImNoZWNrYm94XFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmxhYmVsIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiZ3VpLWJvZHktMlxcXCI+KFwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jb3VudCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIik8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XFxuXCI7XG59LFwiY29tcGlsZXJcIjpbNyxcIj49IDQuMC4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhLGJsb2NrUGFyYW1zLGRlcHRocykge1xuICAgIHZhciBzdGFjazE7XG5cbiAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFwiZ3VpIGZsdWlkLWggb2YtaGlkZGVuXFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiZ3VpIG0tNVxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJndWkgbGVmdFxcXCI+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImd1aSBjYXBzIGJvbGQgZ3VpLXN1YmhlYWRpbmctMlxcXCI+XFxuICAgICAgICAgICAgICAgICAgICBGaWx0ZXIgQnlcXG4gICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImd1aSByaWdodFxcXCI+XFxuICAgICAgICAgICAgPGEgY2xhc3M9XFxcImd1aSBjdXJzb3ItcG9pbnRlciBoaWRlLWZhY2V0XFxcIj5cXG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XFxcImd1aS1pY29uIGd1aS1pY29uLWNoZXZyb24tbGVmdFxcXCI+PC9pPlxcbiAgICAgICAgICAgIDwvYT5cXG4gICAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiZ3VpIGNsZWFyXFxcIj48L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiZ3VpIG0tdC01XFxcIj48L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiZ3VpIGxlZnRcXFwiPlxcbiAgICAgICAgPGEgY2xhc3M9XFxcImd1aSBjdXJzb3ItcG9pbnRlciBleHBhbmQtYWxsXFxcIj5cXG4gICAgICAgICAgICA8aSBjbGFzcz1cXFwiZ3VpLWljb24gZ3VpLWljb24tYWRkXFxcIj48L2k+XFxuICAgICAgICAgICAgRXhwYW5kIEFsbFxcbiAgICAgICAgPC9hPlxcbiAgICAgICAgPGEgY2xhc3M9XFxcImd1aSBjdXJzb3ItcG9pbnRlciBtLWwtMTAgY29sbGFwc2UtYWxsXFxcIj5cXG4gICAgICAgICAgICA8aSBjbGFzcz1cXFwiZ3VpLWljb24gIGd1aS1pY29uLW1pbnVzXFxcIj48L2k+XFxuICAgICAgICAgICAgQ29sbGFwc2UgQWxsXFxuICAgICAgICA8L2E+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJndWkgY2xlYXJcXFwiPjwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJndWkgbS10LTVcXFwiPjwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJndWkgaW5wdXQgZmx1aWQtdyBwLXQtNSBwLXItNSBwLWItNSBwLWwtMVxcXCI+XFxuICAgICAgICA8aW5wdXQgY2xhc3M9XFxcImd1aSBpbnB1dCBwLTUgZmx1aWQtdyBndWktc3ViaGVhZGluZy0yIGZpbHRlci1zZWFyY2gtaW5wdXRcXFwiIHBsYWNlaG9sZGVyPVxcXCJTZWFyY2ggRmlsdGVyc1xcXCIgLz5cXG4gICAgPC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XFxcImd1aSBmbHVpZC1oIGZhY2V0LWxpc3Qgb2YtYXV0b1xcXCI+XFxuXCJcbiAgICArICgoc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuZmFjZXRzIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDEsIGRhdGEsIDAsIGJsb2NrUGFyYW1zLCBkZXB0aHMpLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIiAgICA8L2Rpdj5cXG48L2Rpdj5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZSxcInVzZURlcHRoc1wiOnRydWV9KTtcblxuLyoqKi8gfSksXG4vKiAzICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvaGJzL2hlbHBlcnMvQ2hlY2tlZC50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgY2hlY2tlZCA9IGZ1bmN0aW9uIChib29sKSB7XHJcbiAgICByZXR1cm4gYm9vbCA/IFwiY2hlY2tlZFwiIDogXCJcIjtcclxufTtcclxuZXhwb3J0cy5kZWZhdWx0ID0gY2hlY2tlZDtcclxuXG5cbi8qKiovIH0pLFxuLyogNCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9oYnMvaGVscGVycy9EaXNhYmxlZC50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBkeW5hbWljIGV4cG9ydHMgcHJvdmlkZWQgKi9cbi8qISBhbGwgZXhwb3J0cyB1c2VkICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIGRpc2FibGVkID0gZnVuY3Rpb24gKGJvb2wpIHtcclxuICAgIHJldHVybiBib29sID8gXCJkaXNhYmxlZFwiIDogXCJcIjtcclxufTtcclxuZXhwb3J0cy5kZWZhdWx0ID0gZGlzYWJsZWQ7XHJcblxuXG4vKioqLyB9KSxcbi8qIDUgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy90cy9ldmVudGhhbmRsZXJzL2luZGV4LnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZHluYW1pYyBleHBvcnRzIHByb3ZpZGVkICovXG4vKiEgYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0V4cGFuZENvbGxhcHNlRmFjZXRzSGFuZGxlciAqLyAxMykpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0ZhY2V0QWN0aW9uSGFuZGxlciAqLyAxNCkpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0ZhY2V0U2VhcmNoSGFuZGxlciAqLyAxNSkpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0ZpbHRlckFjdGlvbkhhbmRsZXIgKi8gMTYpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9IaWRlRmFjZXRTZWN0aW9uSGFuZGxlciAqLyAxNykpO1xyXG5cblxuLyoqKi8gfSksXG4vKiA2ICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3RzL21vZGVscy9GaWx0ZXJBY3Rpb25UeXBlLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgRmlsdGVyQWN0aW9uVHlwZTtcclxuKGZ1bmN0aW9uIChGaWx0ZXJBY3Rpb25UeXBlKSB7XHJcbiAgICBGaWx0ZXJBY3Rpb25UeXBlW1wiQWRkXCJdID0gXCJBZGRcIjtcclxuICAgIEZpbHRlckFjdGlvblR5cGVbXCJNaW51c1wiXSA9IFwiTWludXNcIjtcclxufSkoRmlsdGVyQWN0aW9uVHlwZSA9IGV4cG9ydHMuRmlsdGVyQWN0aW9uVHlwZSB8fCAoZXhwb3J0cy5GaWx0ZXJBY3Rpb25UeXBlID0ge30pKTtcclxuXG5cbi8qKiovIH0pLFxuLyogNyAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3RzL21haW4vRW50cnkudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBkeW5hbWljIGV4cG9ydHMgcHJvdmlkZWQgKi9cbi8qISBhbGwgZXhwb3J0cyB1c2VkICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vRmFjZXQgKi8gOCkpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0ZpbHRlciAqLyAxOCkpO1xyXG5cblxuLyoqKi8gfSksXG4vKiA4ICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvdHMvbWFpbi9GYWNldC50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgRmFjZXRUZW1wbGF0ZVNlcnZpY2VfMSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL3NlcnZpY2VzL0ZhY2V0VGVtcGxhdGVTZXJ2aWNlICovIDkpO1xyXG52YXIgRmFjZXRDb25maWdTdG9yZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi8uLi9jb25maWcvRmFjZXRDb25maWdTdG9yZSAqLyAxMik7XHJcbnZhciBldmVudGhhbmRsZXJzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLy4uL2V2ZW50aGFuZGxlcnMgKi8gNSk7XHJcbnZhciBGYWNldCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEZhY2V0KG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlckNoYWluID0gW107XHJcbiAgICAgICAgdGhpcy5iaW5kID0gZnVuY3Rpb24gKGZhY2V0cykge1xyXG4gICAgICAgICAgICB2YXIgZnVsbEZhY2V0ID0gX3RoaXMudGVtcGxhdGVTZXJ2aWNlLmJpbmQoZmFjZXRzKTtcclxuICAgICAgICAgICAgX3RoaXMuZmFjZXRFbGVtZW50Lmh0bWwoZnVsbEZhY2V0KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuY29uZmlnU3RvcmUgPSBuZXcgRmFjZXRDb25maWdTdG9yZV8xLkZhY2V0Q29uZmlnU3RvcmUob3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5mYWNldEVsZW1lbnQgPSBqUXVlcnkob3B0aW9ucy5jb250YWluZXJFbGVtZW50KTtcclxuICAgICAgICB0aGlzLnRlbXBsYXRlU2VydmljZSA9IG5ldyBGYWNldFRlbXBsYXRlU2VydmljZV8xLkZhY2V0VGVtcGxhdGVTZXJ2aWNlKHRoaXMuY29uZmlnU3RvcmUpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlckNoYWluLnB1c2gobmV3IGV2ZW50aGFuZGxlcnNfMS5FeHBhbmRDb2xsYXBzZUZhY2V0c0hhbmRsZXIodGhpcy5mYWNldEVsZW1lbnQpKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXJDaGFpbi5wdXNoKG5ldyBldmVudGhhbmRsZXJzXzEuRmFjZXRBY3Rpb25IYW5kbGVyKHRoaXMuZmFjZXRFbGVtZW50LCB0aGlzLmNvbmZpZ1N0b3JlKSk7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyQ2hhaW4ucHVzaChuZXcgZXZlbnRoYW5kbGVyc18xLkZhY2V0U2VhcmNoSGFuZGxlcih0aGlzLmZhY2V0RWxlbWVudCkpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlckNoYWluLnB1c2gobmV3IGV2ZW50aGFuZGxlcnNfMS5IaWRlRmFjZXRTZWN0aW9uSGFuZGxlcih0aGlzLmZhY2V0RWxlbWVudCwgdGhpcy5jb25maWdTdG9yZSkpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlckNoYWluLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZXIpIHtcclxuICAgICAgICAgICAgaGFuZGxlci5SZWdpc3RlckRvbUhhbmRsZXIoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBGYWNldDtcclxufSgpKTtcclxuZXhwb3J0cy5GYWNldCA9IEZhY2V0O1xyXG5cblxuLyoqKi8gfSksXG4vKiA5ICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3RzL3NlcnZpY2VzL0ZhY2V0VGVtcGxhdGVTZXJ2aWNlLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgRmFjZXRNYWluID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi8uLi8uLi9oYnMvZmFjZXQtbWFpbi5oYnMgKi8gMTApO1xyXG52YXIgRmFjZXRUZW1wbGF0ZVNlcnZpY2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBGYWNldFRlbXBsYXRlU2VydmljZShjb25maWdTdG9yZSkge1xyXG4gICAgICAgIHRoaXMuY29uZmlnU3RvcmUgPSBjb25maWdTdG9yZTtcclxuICAgICAgICB0aGlzLnRlbXBhdGVGdW5jdGlvbkZvckZhY2V0TWFpbiA9IEZhY2V0TWFpbjtcclxuICAgIH1cclxuICAgIEZhY2V0VGVtcGxhdGVTZXJ2aWNlLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKGZhY2V0cykge1xyXG4gICAgICAgIHZhciBjb2xsYXBzZWQgPSB0aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMuY29sbGFwc2VkO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRlbXBhdGVGdW5jdGlvbkZvckZhY2V0TWFpbih7IGNvbGxhcHNlZDogY29sbGFwc2VkLCBmYWNldHM6IGZhY2V0cyB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRmFjZXRUZW1wbGF0ZVNlcnZpY2U7XHJcbn0oKSk7XHJcbmV4cG9ydHMuRmFjZXRUZW1wbGF0ZVNlcnZpY2UgPSBGYWNldFRlbXBsYXRlU2VydmljZTtcclxuXG5cbi8qKiovIH0pLFxuLyogMTAgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2hicy9mYWNldC1tYWluLmhicyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZHluYW1pYyBleHBvcnRzIHByb3ZpZGVkICovXG4vKiEgYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgSGFuZGxlYmFycyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIGhhbmRsZWJhcnMgKi8gMCk7XG5mdW5jdGlvbiBfX2RlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgKG9iai5fX2VzTW9kdWxlID8gb2JqW1wiZGVmYXVsdFwiXSA6IG9iaik7IH1cbm1vZHVsZS5leHBvcnRzID0gKEhhbmRsZWJhcnNbXCJkZWZhdWx0XCJdIHx8IEhhbmRsZWJhcnMpLnRlbXBsYXRlKHtcIjFcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBzdGFjazE7XG5cbiAgcmV0dXJuIFwiICAgIDxkaXYgY2xhc3M9XFxcImZhY2V0LWNvbGxhcHNlZC1ib2R5IGd1aSBmbHVpZC1oIHctYXV0b1xcXCI+XCJcbiAgICArICgoc3RhY2sxID0gY29udGFpbmVyLmludm9rZVBhcnRpYWwoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9zcmMvaGJzL2ZhY2V0LWNvbGxhcHNlZC5oYnMgKi8gMSksZGVwdGgwLHtcIm5hbWVcIjpcImZhY2V0LWNvbGxhcHNlZFwiLFwiZGF0YVwiOmRhdGEsXCJoZWxwZXJzXCI6aGVscGVycyxcInBhcnRpYWxzXCI6cGFydGlhbHMsXCJkZWNvcmF0b3JzXCI6Y29udGFpbmVyLmRlY29yYXRvcnN9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIjwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJmYWNldC1ib2R5IGd1aSBmbHVpZC1oIG9mLWhpZGRlbiBndWktaGlkZGVuXFxcIj5cIlxuICAgICsgKChzdGFjazEgPSBjb250YWluZXIuaW52b2tlUGFydGlhbChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3NyYy9oYnMvZmFjZXQtYm9keS5oYnMgKi8gMiksZGVwdGgwLHtcIm5hbWVcIjpcImZhY2V0LWJvZHlcIixcImRhdGFcIjpkYXRhLFwiaGVscGVyc1wiOmhlbHBlcnMsXCJwYXJ0aWFsc1wiOnBhcnRpYWxzLFwiZGVjb3JhdG9yc1wiOmNvbnRhaW5lci5kZWNvcmF0b3JzfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCI8L2Rpdj5cXG5cIjtcbn0sXCIzXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxO1xuXG4gIHJldHVybiBcIiAgICA8ZGl2IGNsYXNzPVxcXCJmYWNldC1jb2xsYXBzZWQtYm9keSBndWkgZmx1aWQtaCB3LWF1dG8gZ3VpLWhpZGRlblxcXCI+XCJcbiAgICArICgoc3RhY2sxID0gY29udGFpbmVyLmludm9rZVBhcnRpYWwoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9zcmMvaGJzL2ZhY2V0LWNvbGxhcHNlZC5oYnMgKi8gMSksZGVwdGgwLHtcIm5hbWVcIjpcImZhY2V0LWNvbGxhcHNlZFwiLFwiZGF0YVwiOmRhdGEsXCJoZWxwZXJzXCI6aGVscGVycyxcInBhcnRpYWxzXCI6cGFydGlhbHMsXCJkZWNvcmF0b3JzXCI6Y29udGFpbmVyLmRlY29yYXRvcnN9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIjwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJmYWNldC1ib2R5IGd1aSBmbHVpZC1oIG9mLWhpZGRlblxcXCI+XCJcbiAgICArICgoc3RhY2sxID0gY29udGFpbmVyLmludm9rZVBhcnRpYWwoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9zcmMvaGJzL2ZhY2V0LWJvZHkuaGJzICovIDIpLGRlcHRoMCx7XCJuYW1lXCI6XCJmYWNldC1ib2R5XCIsXCJkYXRhXCI6ZGF0YSxcImhlbHBlcnNcIjpoZWxwZXJzLFwicGFydGlhbHNcIjpwYXJ0aWFscyxcImRlY29yYXRvcnNcIjpjb250YWluZXIuZGVjb3JhdG9yc30pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiPC9kaXY+XFxuXCI7XG59LFwiY29tcGlsZXJcIjpbNyxcIj49IDQuMC4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMTtcblxuICByZXR1cm4gXCI8ZGl2IGNsYXNzPVxcXCJndWkgZmx1aWQtaCBcXFwiPlxcblwiXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnNbXCJpZlwiXS5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNvbGxhcHNlZCA6IGRlcHRoMCkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMSwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLnByb2dyYW0oMywgZGF0YSwgMCksXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiPC9kaXY+XCI7XG59LFwidXNlUGFydGlhbFwiOnRydWUsXCJ1c2VEYXRhXCI6dHJ1ZX0pO1xuXG4vKioqLyB9KSxcbi8qIDExICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2hicy9oZWxwZXJzL1NlbGVjdGVkRmlsdGVyc0NvdW50LnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgc2VsZWN0ZWRGaWx0ZXJzQ291bnQgPSBmdW5jdGlvbiAoZmFjZXRWYWx1ZXMpIHtcclxuICAgIHZhciBpbmRleCA9IDA7XHJcbiAgICBpZiAoZmFjZXRWYWx1ZXMgIT09IHVuZGVmaW5lZFxyXG4gICAgICAgICYmIGZhY2V0VmFsdWVzICE9PSBudWxsXHJcbiAgICAgICAgJiYgZmFjZXRWYWx1ZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgZmFjZXRWYWx1ZXNfMSA9IGZhY2V0VmFsdWVzOyBfaSA8IGZhY2V0VmFsdWVzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBmYWNldFZhbHVlID0gZmFjZXRWYWx1ZXNfMVtfaV07XHJcbiAgICAgICAgICAgIGlmIChmYWNldFZhbHVlLnNlbGVjdGVkKSB7XHJcbiAgICAgICAgICAgICAgICBpbmRleCsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGluZGV4ID09PSAwID8gXCJcIiA6IFwiPHNwYW4gY2xhc3M9XFxcImd1aS1ib2R5LTJcXFwiPihcIiArIGluZGV4ICsgXCIpPC9zcGFuPlwiO1xyXG59O1xyXG5leHBvcnRzLmRlZmF1bHQgPSBzZWxlY3RlZEZpbHRlcnNDb3VudDtcclxuXG5cbi8qKiovIH0pLFxuLyogMTIgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvdHMvY29uZmlnL0ZhY2V0Q29uZmlnU3RvcmUudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZHluYW1pYyBleHBvcnRzIHByb3ZpZGVkICovXG4vKiEgYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBGYWNldENvbmZpZ1N0b3JlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRmFjZXRDb25maWdTdG9yZShvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLmRlZmF1bHRGYWNldE9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIGNvbGxhcHNlZDogZmFsc2UsXHJcbiAgICAgICAgICAgIGNvbnRhaW5lckVsZW1lbnQ6IG51bGwsXHJcbiAgICAgICAgICAgIC8vIGZhY2V0czogW10sXHJcbiAgICAgICAgICAgIG9uRmlsdGVyQ2hhbmdlOiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSwgYWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJZ25vcmVcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZXh0ZW5kT3B0aW9ucyA9IGZ1bmN0aW9uIChpbnB1dE9wdGlvbnMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLm9wdGlvbnMgPSBqUXVlcnkuZXh0ZW5kKHt9LCBfdGhpcy5kZWZhdWx0RmFjZXRPcHRpb25zLCBpbnB1dE9wdGlvbnMpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5leHRlbmRPcHRpb25zKG9wdGlvbnMpO1xyXG4gICAgICAgIGlmIChvcHRpb25zLmNvbnRhaW5lckVsZW1lbnQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUGxlYXNlIFByb3ZpZGUgYSB2YWxpZCBjb250YWluZXIgRWxlbWVudCBvYmplY3RcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZhY2V0Q29uZmlnU3RvcmUucHJvdG90eXBlLCBcIk9wdGlvbnNcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5vcHRpb25zOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBGYWNldENvbmZpZ1N0b3JlO1xyXG59KCkpO1xyXG5leHBvcnRzLkZhY2V0Q29uZmlnU3RvcmUgPSBGYWNldENvbmZpZ1N0b3JlO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxMyAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy90cy9ldmVudGhhbmRsZXJzL0V4cGFuZENvbGxhcHNlRmFjZXRzSGFuZGxlci50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBkeW5hbWljIGV4cG9ydHMgcHJvdmlkZWQgKi9cbi8qISBhbGwgZXhwb3J0cyB1c2VkICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIFNob3dIaWRlO1xyXG4oZnVuY3Rpb24gKFNob3dIaWRlKSB7XHJcbiAgICBTaG93SGlkZVtTaG93SGlkZVtcIlNob3dcIl0gPSAwXSA9IFwiU2hvd1wiO1xyXG4gICAgU2hvd0hpZGVbU2hvd0hpZGVbXCJIaWRlXCJdID0gMV0gPSBcIkhpZGVcIjtcclxuICAgIFNob3dIaWRlW1Nob3dIaWRlW1wiVG9nZ2xlXCJdID0gMl0gPSBcIlRvZ2dsZVwiO1xyXG59KShTaG93SGlkZSB8fCAoU2hvd0hpZGUgPSB7fSkpO1xyXG52YXIgRXhwYW5kQ29sbGFwc2VGYWNldHNIYW5kbGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRXhwYW5kQ29sbGFwc2VGYWNldHNIYW5kbGVyKGVsZW1lbnQpIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgICAgIHRoaXMuQ29udHJvbFZpc2liaWxpdHlPZkZpbHRlciA9IGZ1bmN0aW9uIChlbGVtZW50LCBzaG93SGlkZSkge1xyXG4gICAgICAgICAgICB2YXIgaWNvbkVsZW1lbnQgPSBlbGVtZW50LmNoaWxkcmVuKFwiaVwiKTtcclxuICAgICAgICAgICAgdmFyIGN1cnJlbnRseVZpc2libGUgPSBpY29uRWxlbWVudC5oYXNDbGFzcyhcImd1aS1pY29uLWNoZXZyb24tdXBcIik7XHJcbiAgICAgICAgICAgIGlmIChTaG93SGlkZS5Ub2dnbGUgIT09IHNob3dIaWRlICYmICgoY3VycmVudGx5VmlzaWJsZSAmJiBzaG93SGlkZSA9PT0gU2hvd0hpZGUuU2hvdykgfHxcclxuICAgICAgICAgICAgICAgICghY3VycmVudGx5VmlzaWJsZSAmJiBzaG93SGlkZSA9PT0gU2hvd0hpZGUuSGlkZSkpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFjdXJyZW50bHlWaXNpYmxlKSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LnBhcmVudHMoXCIuZmFjZXQtaXRlbVwiKS5maW5kKFwiLmZhY2V0LWl0ZW0tZGVzY3JpcHRpb25cIikuc2xpZGVEb3duKDIwMCk7XHJcbiAgICAgICAgICAgICAgICBpY29uRWxlbWVudC5yZW1vdmVDbGFzcyhcImd1aS1pY29uLWNoZXZyb24tZG93blwiKTtcclxuICAgICAgICAgICAgICAgIGljb25FbGVtZW50LmFkZENsYXNzKFwiZ3VpLWljb24tY2hldnJvbi11cFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQucGFyZW50cyhcIi5mYWNldC1pdGVtXCIpLmZpbmQoXCIuZmFjZXQtaXRlbS1kZXNjcmlwdGlvblwiKS5zbGlkZVVwKDIwMCk7XHJcbiAgICAgICAgICAgICAgICBpY29uRWxlbWVudC5yZW1vdmVDbGFzcyhcImd1aS1pY29uLWNoZXZyb24tdXBcIik7XHJcbiAgICAgICAgICAgICAgICBpY29uRWxlbWVudC5hZGRDbGFzcyhcImd1aS1pY29uLWNoZXZyb24tZG93blwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBFeHBhbmRDb2xsYXBzZUZhY2V0c0hhbmRsZXIucHJvdG90eXBlLlJlZ2lzdGVyRG9tSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5vbihcImNsaWNrXCIsIFwiLmV4cGFuZC1hbGxcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIF90aGlzLmVsZW1lbnQuZmluZChcIi5mYWNldC1pdGVtLWhlYWRlclwiKS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuQ29udHJvbFZpc2liaWxpdHlPZkZpbHRlcihqUXVlcnkoZWxlbWVudCksIFNob3dIaWRlLlNob3cpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50Lm9uKFwiY2xpY2tcIiwgXCIuY29sbGFwc2UtYWxsXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICBfdGhpcy5lbGVtZW50LmZpbmQoXCIuZmFjZXQtaXRlbS1oZWFkZXJcIikuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLkNvbnRyb2xWaXNpYmlsaXR5T2ZGaWx0ZXIoalF1ZXJ5KGVsZW1lbnQpLCBTaG93SGlkZS5IaWRlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5vbihcImNsaWNrXCIsIFwiLmZhY2V0LWl0ZW0taGVhZGVyXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0galF1ZXJ5KGV2ZW50LnRhcmdldCk7XHJcbiAgICAgICAgICAgIHZhciBoZWFkZXJFbGVtZW50ID0gdGFyZ2V0LmlzKFwiLmZhY2V0LWl0ZW0taGVhZGVyXCIpID8gdGFyZ2V0IDogdGFyZ2V0LnBhcmVudChcIi5mYWNldC1pdGVtLWhlYWRlclwiKTtcclxuICAgICAgICAgICAgX3RoaXMuZWxlbWVudC5maW5kKFwiLmZhY2V0LWhlYWRlciAuYnV0dG9uXCIpLnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKTtcclxuICAgICAgICAgICAgX3RoaXMuQ29udHJvbFZpc2liaWxpdHlPZkZpbHRlcihoZWFkZXJFbGVtZW50LCBTaG93SGlkZS5Ub2dnbGUpO1xyXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBFeHBhbmRDb2xsYXBzZUZhY2V0c0hhbmRsZXIucHJvdG90eXBlLm9uUmVzaXplID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4gICAgfTtcclxuICAgIEV4cGFuZENvbGxhcHNlRmFjZXRzSGFuZGxlci5wcm90b3R5cGUub25Eb2N1bWVudENsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgLy8gdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEV4cGFuZENvbGxhcHNlRmFjZXRzSGFuZGxlcjtcclxufSgpKTtcclxuZXhwb3J0cy5FeHBhbmRDb2xsYXBzZUZhY2V0c0hhbmRsZXIgPSBFeHBhbmRDb2xsYXBzZUZhY2V0c0hhbmRsZXI7XHJcblxuXG4vKioqLyB9KSxcbi8qIDE0ICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3RzL2V2ZW50aGFuZGxlcnMvRmFjZXRBY3Rpb25IYW5kbGVyLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgRmlsdGVyQWN0aW9uVHlwZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vbW9kZWxzL0ZpbHRlckFjdGlvblR5cGUgKi8gNik7XHJcbnZhciBGYWNldEFjdGlvbkhhbmRsZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBGYWNldEFjdGlvbkhhbmRsZXIoZWxlbWVudCwgY29uZmlnU3RvcmUpIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgICAgIHRoaXMuY29uZmlnU3RvcmUgPSBjb25maWdTdG9yZTtcclxuICAgIH1cclxuICAgIEZhY2V0QWN0aW9uSGFuZGxlci5wcm90b3R5cGUuUmVnaXN0ZXJEb21IYW5kbGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50Lm9uKFwiY2hhbmdlXCIsIFwiLmZhY2V0LWJvZHkgLmZhY2V0LWl0ZW0tZGVzY3JpcHRpb24gLmZhY2V0LXZhbHVlLWNoZWNrYm94XCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IGpRdWVyeShldmVudC50YXJnZXQpO1xyXG4gICAgICAgICAgICB2YXIgdmFsU3RyID0gZWxlbWVudC52YWwoKS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB2YWxTdHIuc3BsaXQoXCI6XCIpO1xyXG4gICAgICAgICAgICB2YXIgY2hlY2tlZCA9IGVsZW1lbnQuaXMoXCI6Y2hlY2tlZFwiKTtcclxuICAgICAgICAgICAgdmFyIGFjdGlvbiA9IGNoZWNrZWQgPyBGaWx0ZXJBY3Rpb25UeXBlXzEuRmlsdGVyQWN0aW9uVHlwZS5BZGQgOiBGaWx0ZXJBY3Rpb25UeXBlXzEuRmlsdGVyQWN0aW9uVHlwZS5NaW51cztcclxuICAgICAgICAgICAgX3RoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5vbkZpbHRlckNoYW5nZSh2YWx1ZVswXSwgdmFsdWVbMV0sIGFjdGlvbiwgdmFsdWVbMl0pO1xyXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBGYWNldEFjdGlvbkhhbmRsZXIucHJvdG90eXBlLm9uUmVzaXplID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4gICAgfTtcclxuICAgIEZhY2V0QWN0aW9uSGFuZGxlci5wcm90b3R5cGUub25Eb2N1bWVudENsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgLy8gdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEZhY2V0QWN0aW9uSGFuZGxlcjtcclxufSgpKTtcclxuZXhwb3J0cy5GYWNldEFjdGlvbkhhbmRsZXIgPSBGYWNldEFjdGlvbkhhbmRsZXI7XHJcblxuXG4vKioqLyB9KSxcbi8qIDE1ICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3RzL2V2ZW50aGFuZGxlcnMvRmFjZXRTZWFyY2hIYW5kbGVyLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgRmFjZXRTZWFyY2hIYW5kbGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRmFjZXRTZWFyY2hIYW5kbGVyKGVsZW1lbnQpIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgfVxyXG4gICAgRmFjZXRTZWFyY2hIYW5kbGVyLnByb3RvdHlwZS5SZWdpc3RlckRvbUhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLmVsZW1lbnQub24oXCJrZXl1cFwiLCBcIi5maWx0ZXItc2VhcmNoLWlucHV0XCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IGpRdWVyeShldmVudC50YXJnZXQpO1xyXG4gICAgICAgICAgICB2YXIgdmFsID0gZWxlbWVudC52YWwoKS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgIF90aGlzLmVsZW1lbnQuZmluZChcIi5mYWNldC1saXN0IC5mYWNldC1pdGVtXCIpLmVhY2goZnVuY3Rpb24gKGksIGUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChqUXVlcnkoZSkuYXR0cihcImRhdGEtYXR0ci1uYW1lXCIpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZih2YWwpID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGpRdWVyeShlKS5mYWRlT3V0KDIwMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBqUXVlcnkoZSkuZmFkZUluKDIwMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBGYWNldFNlYXJjaEhhbmRsZXIucHJvdG90eXBlLm9uUmVzaXplID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIElnbm9yZVxyXG4gICAgfTtcclxuICAgIEZhY2V0U2VhcmNoSGFuZGxlci5wcm90b3R5cGUub25Eb2N1bWVudENsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgLy8gSWdub3JlXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEZhY2V0U2VhcmNoSGFuZGxlcjtcclxufSgpKTtcclxuZXhwb3J0cy5GYWNldFNlYXJjaEhhbmRsZXIgPSBGYWNldFNlYXJjaEhhbmRsZXI7XHJcblxuXG4vKioqLyB9KSxcbi8qIDE2ICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy90cy9ldmVudGhhbmRsZXJzL0ZpbHRlckFjdGlvbkhhbmRsZXIudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgRmlsdGVyQWN0aW9uVHlwZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vbW9kZWxzL0ZpbHRlckFjdGlvblR5cGUgKi8gNik7XHJcbnZhciBGaWx0ZXJBY3Rpb25IYW5kbGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRmlsdGVyQWN0aW9uSGFuZGxlcihmaWx0ZXJFbGVtZW50LCBjb25maWdTdG9yZSkge1xyXG4gICAgICAgIHRoaXMuZmlsdGVyRWxlbWVudCA9IGZpbHRlckVsZW1lbnQ7XHJcbiAgICAgICAgdGhpcy5jb25maWdTdG9yZSA9IGNvbmZpZ1N0b3JlO1xyXG4gICAgfVxyXG4gICAgRmlsdGVyQWN0aW9uSGFuZGxlci5wcm90b3R5cGUuUmVnaXN0ZXJEb21IYW5kbGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJFbGVtZW50Lm9uKFwiY2xpY2tcIiwgXCIuZmFjZXQtc3ViaGVhZGVyIC5mYWNldC1sYWJlbHMgLmxhYmVsXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IGpRdWVyeShldmVudC50YXJnZXQpO1xyXG4gICAgICAgICAgICBpZiAoIWVsZW1lbnQuaXMoXCIubGFiZWxcIikpIHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudHMoXCIubGFiZWxcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHZhbFN0ciA9IGVsZW1lbnQuYXR0cihcImRhdGEtZmlsdGVyLWVudHJ5XCIpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHZhbFN0ci5zcGxpdChcIjpcIik7XHJcbiAgICAgICAgICAgIF90aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMub25GaWx0ZXJDaGFuZ2UodmFsdWVbMF0sIHZhbHVlWzFdLCBGaWx0ZXJBY3Rpb25UeXBlXzEuRmlsdGVyQWN0aW9uVHlwZS5NaW51cywgdmFsdWVbMl0pO1xyXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmZpbHRlckVsZW1lbnQub24oXCJjbGlja1wiLCBcIi5mYWNldC1zdWJoZWFkZXIgLnJlbW92ZS1hbGxcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIF90aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMub25BbGxGaWx0ZXJSZW1vdmUoKTtcclxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgRmlsdGVyQWN0aW9uSGFuZGxlci5wcm90b3R5cGUub25SZXNpemUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XHJcbiAgICB9O1xyXG4gICAgRmlsdGVyQWN0aW9uSGFuZGxlci5wcm90b3R5cGUub25Eb2N1bWVudENsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgLy8gdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEZpbHRlckFjdGlvbkhhbmRsZXI7XHJcbn0oKSk7XHJcbmV4cG9ydHMuRmlsdGVyQWN0aW9uSGFuZGxlciA9IEZpbHRlckFjdGlvbkhhbmRsZXI7XHJcblxuXG4vKioqLyB9KSxcbi8qIDE3ICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvdHMvZXZlbnRoYW5kbGVycy9IaWRlRmFjZXRTZWN0aW9uSGFuZGxlci50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgSGlkZUZhY2V0U2VjdGlvbkhhbmRsZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBIaWRlRmFjZXRTZWN0aW9uSGFuZGxlcihlbGVtZW50LCBjb25maWdTdG9yZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcclxuICAgICAgICB0aGlzLmNvbmZpZ1N0b3JlID0gY29uZmlnU3RvcmU7XHJcbiAgICAgICAgdGhpcy5SZWdpc3RlckRvbUhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF90aGlzLmVsZW1lbnQub24oXCJjbGlja1wiLCBcIi5oaWRlLWZhY2V0XCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgJChcIi5mYWNldC1ib2R5XCIpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICQoXCIuZmFjZXQtY29sbGFwc2VkLWJvZHlcIikuZmFkZUluKDIwMCk7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLmNvbGxhcHNlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIF90aGlzLmVsZW1lbnQub24oXCJjbGlja1wiLCBcIi5zaG93LWZhY2V0XCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgJChcIi5mYWNldC1jb2xsYXBzZWQtYm9keVwiKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAkKFwiLmZhY2V0LWJvZHlcIikuZmFkZUluKDIwMCk7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLmNvbGxhcHNlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBIaWRlRmFjZXRTZWN0aW9uSGFuZGxlci5wcm90b3R5cGUub25SZXNpemUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gSWdub3JlXHJcbiAgICB9O1xyXG4gICAgSGlkZUZhY2V0U2VjdGlvbkhhbmRsZXIucHJvdG90eXBlLm9uRG9jdW1lbnRDbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIC8vIElnbm9yZVxyXG4gICAgfTtcclxuICAgIHJldHVybiBIaWRlRmFjZXRTZWN0aW9uSGFuZGxlcjtcclxufSgpKTtcclxuZXhwb3J0cy5IaWRlRmFjZXRTZWN0aW9uSGFuZGxlciA9IEhpZGVGYWNldFNlY3Rpb25IYW5kbGVyO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxOCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy90cy9tYWluL0ZpbHRlci50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBkeW5hbWljIGV4cG9ydHMgcHJvdmlkZWQgKi9cbi8qISBhbGwgZXhwb3J0cyB1c2VkICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIEZpbHRlclRlbXBsYXRlU2VydmljZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vc2VydmljZXMvRmlsdGVyVGVtcGxhdGVTZXJ2aWNlICovIDE5KTtcclxudmFyIEZpbHRlckNvbmZpZ1N0b3JlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLy4uL2NvbmZpZy9GaWx0ZXJDb25maWdTdG9yZSAqLyAyMSk7XHJcbnZhciBldmVudGhhbmRsZXJzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLy4uL2V2ZW50aGFuZGxlcnMgKi8gNSk7XHJcbnZhciBGaWx0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBGaWx0ZXIob3B0aW9ucykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyQ2hhaW4gPSBbXTtcclxuICAgICAgICB0aGlzLmJpbmQgPSBmdW5jdGlvbiAoZmlsdGVycykge1xyXG4gICAgICAgICAgICB2YXIgZmFjZXRTdWJIZWFkZXIgPSBfdGhpcy50ZW1wbGF0ZVNlcnZpY2UuYmluZChmaWx0ZXJzKTtcclxuICAgICAgICAgICAgX3RoaXMuZmlsdGVyRWxlbWVudC5odG1sKGZhY2V0U3ViSGVhZGVyKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuY29uZmlnU3RvcmUgPSBuZXcgRmlsdGVyQ29uZmlnU3RvcmVfMS5GaWx0ZXJDb25maWdTdG9yZShvcHRpb25zKTtcclxuICAgICAgICB0aGlzLmZpbHRlckVsZW1lbnQgPSBqUXVlcnkob3B0aW9ucy5jb250YWluZXJFbGVtZW50KTtcclxuICAgICAgICB0aGlzLnRlbXBsYXRlU2VydmljZSA9IG5ldyBGaWx0ZXJUZW1wbGF0ZVNlcnZpY2VfMS5GaWx0ZXJUZW1wbGF0ZVNlcnZpY2UoKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXJDaGFpbi5wdXNoKG5ldyBldmVudGhhbmRsZXJzXzEuRmlsdGVyQWN0aW9uSGFuZGxlcih0aGlzLmZpbHRlckVsZW1lbnQsIHRoaXMuY29uZmlnU3RvcmUpKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXJDaGFpbi5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XHJcbiAgICAgICAgICAgIGhhbmRsZXIuUmVnaXN0ZXJEb21IYW5kbGVyKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRmlsdGVyO1xyXG59KCkpO1xyXG5leHBvcnRzLkZpbHRlciA9IEZpbHRlcjtcclxuXG5cbi8qKiovIH0pLFxuLyogMTkgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3RzL3NlcnZpY2VzL0ZpbHRlclRlbXBsYXRlU2VydmljZS50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZHluYW1pYyBleHBvcnRzIHByb3ZpZGVkICovXG4vKiEgYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBGYWNldFN1YkhlYWRlciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vLi4vLi4vaGJzL2ZhY2V0LWFwcGxpZWQtZmlsdGVycy5oYnMgKi8gMjApO1xyXG52YXIgRmlsdGVyVGVtcGxhdGVTZXJ2aWNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRmlsdGVyVGVtcGxhdGVTZXJ2aWNlKCkge1xyXG4gICAgICAgIHRoaXMudGVtcGF0ZUZ1bmN0aW9uRm9yRmFjZXRTdWJIZWFkZXIgPSBGYWNldFN1YkhlYWRlcjtcclxuICAgIH1cclxuICAgIEZpbHRlclRlbXBsYXRlU2VydmljZS5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIChmaWx0ZXJzKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudGVtcGF0ZUZ1bmN0aW9uRm9yRmFjZXRTdWJIZWFkZXIoeyBmaWx0ZXJzOiBmaWx0ZXJzIH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBGaWx0ZXJUZW1wbGF0ZVNlcnZpY2U7XHJcbn0oKSk7XHJcbmV4cG9ydHMuRmlsdGVyVGVtcGxhdGVTZXJ2aWNlID0gRmlsdGVyVGVtcGxhdGVTZXJ2aWNlO1xyXG5cblxuLyoqKi8gfSksXG4vKiAyMCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9oYnMvZmFjZXQtYXBwbGllZC1maWx0ZXJzLmhicyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBkeW5hbWljIGV4cG9ydHMgcHJvdmlkZWQgKi9cbi8qISBhbGwgZXhwb3J0cyB1c2VkICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBIYW5kbGViYXJzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgaGFuZGxlYmFycyAqLyAwKTtcbmZ1bmN0aW9uIF9fZGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiAob2JqLl9fZXNNb2R1bGUgPyBvYmpbXCJkZWZhdWx0XCJdIDogb2JqKTsgfVxubW9kdWxlLmV4cG9ydHMgPSAoSGFuZGxlYmFyc1tcImRlZmF1bHRcIl0gfHwgSGFuZGxlYmFycykudGVtcGxhdGUoe1wiMVwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhLGJsb2NrUGFyYW1zLGRlcHRocykge1xuICAgIHZhciBzdGFjazE7XG5cbiAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFwiY29udGVudCBmYWNldC1zdWJoZWFkZXIgZ3VpIGZsdWlkLXcgYmFzaWMgY3VydmVkIHAtNVxcXCI+XFxuICAgIDxzcGFuIGNsYXNzPVxcXCJndWkgYm9sZCBndWktc3ViaGVhZGluZy0yIGNhcHNcXFwiPkFwcGxpZWQgRmlsdGVyczwvc3Bhbj5cXG4gICAgPGEgY2xhc3M9XFxcImd1aSBtLWwtNSByZW1vdmUtYWxsXFxcIiA+XFxuICAgICAgICA8aSBjbGFzcz1cXFwiZ3VpLWljb24gZ3VpLWljb24tY2FuY2VsXFxcIj48L2k+XFxuICAgICAgICA8c3Bhbj5DbGVhciBBbGw8L3NwYW4+XFxuICAgIDwvYT5cXG4gICAgPHNwYW4gY2xhc3M9XFxcImd1aSBtLWwtMTBcXFwiPlxcblwiXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnMuZWFjaC5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmZpbHRlcnMgOiBkZXB0aDApLHtcIm5hbWVcIjpcImVhY2hcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMiwgZGF0YSwgMCwgYmxvY2tQYXJhbXMsIGRlcHRocyksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiICAgIDwvc3Bhbj5cXG48L2Rpdj5cXG5cIjtcbn0sXCIyXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEsYmxvY2tQYXJhbXMsZGVwdGhzKSB7XG4gICAgdmFyIHN0YWNrMSwgaGVscGVyLCBhbGlhczE9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KTtcblxuICByZXR1cm4gXCIgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJndWkgbS1yLTVcXFwiPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJndWkgbGFyZ2UgbGFiZWxzIGZhY2V0LWxhYmVsc1xcXCI+XFxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJndWkgZ3VpLXN1YmhlYWRpbmctMlxcXCI+XCJcbiAgICArIGNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubmFtZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJzLmhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBcImZ1bmN0aW9uXCIgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwibmFtZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCI8L3NwYW4+XFxuXCJcbiAgICArICgoc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoYWxpYXMxLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5mYWNldFZhbHVlcyA6IGRlcHRoMCkse1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgzLCBkYXRhLCAwLCBibG9ja1BhcmFtcywgZGVwdGhzKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCIgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICA8L3NwYW4+XFxuXCI7XG59LFwiM1wiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhLGJsb2NrUGFyYW1zLGRlcHRocykge1xuICAgIHZhciBoZWxwZXIsIGFsaWFzMT1jb250YWluZXIubGFtYmRhLCBhbGlhczI9Y29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb247XG5cbiAgcmV0dXJuIFwiICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJndWkgbS0wIG0tci0yIHAtNCBsYWJlbCBjdXJzb3ItcG9pbnRlciBzdHJpa2V0aHJvdWdoLWhvdmVyXFxcIiBkYXRhLWZpbHRlci1lbnRyeT1cXFwiXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoc1sxXSAhPSBudWxsID8gZGVwdGhzWzFdLmlkIDogZGVwdGhzWzFdKSwgZGVwdGgwKSlcbiAgICArIFwiOlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5sYWJlbCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIjpcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGhzWzFdICE9IG51bGwgPyBkZXB0aHNbMV0udHlwZSA6IGRlcHRoc1sxXSksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCI+XFxuICAgICAgICAgICAgICAgICAgICBcIlxuICAgICsgYWxpYXMyKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubGFiZWwgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmxhYmVsIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlcnMuaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IFwiZnVuY3Rpb25cIiA/IGhlbHBlci5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSkse1wibmFtZVwiOlwibGFiZWxcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiXFxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cXFwiZ3VpLWljb24gZ3VpLWljb24tY2FuY2VsXFxcIj48L2k+XFxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG5cIjtcbn0sXCJjb21waWxlclwiOls3LFwiPj0gNC4wLjBcIl0sXCJtYWluXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEsYmxvY2tQYXJhbXMsZGVwdGhzKSB7XG4gICAgdmFyIHN0YWNrMTtcblxuICByZXR1cm4gKChzdGFjazEgPSBoZWxwZXJzW1wiaWZcIl0uY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmZpbHRlcnMgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLmxlbmd0aCA6IHN0YWNrMSkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMSwgZGF0YSwgMCwgYmxvY2tQYXJhbXMsIGRlcHRocyksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIik7XG59LFwidXNlRGF0YVwiOnRydWUsXCJ1c2VEZXB0aHNcIjp0cnVlfSk7XG5cbi8qKiovIH0pLFxuLyogMjEgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3RzL2NvbmZpZy9GaWx0ZXJDb25maWdTdG9yZS50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZHluYW1pYyBleHBvcnRzIHByb3ZpZGVkICovXG4vKiEgYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBGaWx0ZXJDb25maWdTdG9yZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEZpbHRlckNvbmZpZ1N0b3JlKG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuZGVmYXVsdGZpbHRlck9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lckVsZW1lbnQ6IG51bGwsXHJcbiAgICAgICAgICAgIG9uQWxsRmlsdGVyUmVtb3ZlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJZ25vcmVcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25GaWx0ZXJDaGFuZ2U6IGZ1bmN0aW9uIChrZXksIHZhbHVlLCBhY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgIC8vIElnbm9yZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5leHRlbmRPcHRpb25zID0gZnVuY3Rpb24gKGlucHV0T3B0aW9ucykge1xyXG4gICAgICAgICAgICByZXR1cm4gKF90aGlzLm9wdGlvbnMgPSBqUXVlcnkuZXh0ZW5kKHt9LCBfdGhpcy5kZWZhdWx0ZmlsdGVyT3B0aW9ucywgaW5wdXRPcHRpb25zKSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmV4dGVuZE9wdGlvbnMob3B0aW9ucyk7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMuY29udGFpbmVyRWxlbWVudCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQbGVhc2UgUHJvdmlkZSBhIHZhbGlkIGNvbnRhaW5lciBFbGVtZW50IG9iamVjdCBmb3IgZmlsdGVyc1wiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmlsdGVyQ29uZmlnU3RvcmUucHJvdG90eXBlLCBcIk9wdGlvbnNcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIEZpbHRlckNvbmZpZ1N0b3JlO1xyXG59KCkpO1xyXG5leHBvcnRzLkZpbHRlckNvbmZpZ1N0b3JlID0gRmlsdGVyQ29uZmlnU3RvcmU7XHJcblxuXG4vKioqLyB9KVxuLyoqKioqKi8gXSk7XG59KTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gZmFjZXRvby5taW4uanMiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA3KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL2Jvb3RzdHJhcCAzM2VkMDZiYTc5ZTJlMjhmODE4YSIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8wX187XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwge1wicm9vdFwiOlwiSGFuZGxlYmFyc1wiLFwiYW1kXCI6XCJoYW5kbGViYXJzLnJ1bnRpbWVcIixcImNvbW1vbmpzMlwiOlwiaGFuZGxlYmFycy9ydW50aW1lXCIsXCJjb21tb25qc1wiOlwiaGFuZGxlYmFycy9ydW50aW1lXCJ9XG4vLyBtb2R1bGUgaWQgPSAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwidmFyIEhhbmRsZWJhcnMgPSByZXF1aXJlKFwiaGFuZGxlYmFyc1wiKTtcbmZ1bmN0aW9uIF9fZGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiAob2JqLl9fZXNNb2R1bGUgPyBvYmpbXCJkZWZhdWx0XCJdIDogb2JqKTsgfVxubW9kdWxlLmV4cG9ydHMgPSAoSGFuZGxlYmFyc1tcImRlZmF1bHRcIl0gfHwgSGFuZGxlYmFycykudGVtcGxhdGUoe1wiY29tcGlsZXJcIjpbNyxcIj49IDQuMC4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFwic2hvdy1mYWNldCBndWkgZmx1aWQtaCBjdXJzb3ItcG9pbnRlclxcXCI+XFxyXFxuICAgIDxpIGNsYXNzPVxcXCJndWkgZ3VpLWljb24gZ3VpLWljb24tY2hldnJvbi1yaWdodFxcXCI+PC9pPlxcclxcbiAgICA8YnI+XFxyXFxuICAgIDxpIGNsYXNzPVxcXCJndWkgZ3VpLWljb24gZ3VpLWljb24tZmlsdGVyIHByaW1hcnlcXFwiPjwvaT5cXHJcXG48L2Rpdj5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2hicy9mYWNldC1jb2xsYXBzZWQuaGJzXG4vLyBtb2R1bGUgaWQgPSAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwidmFyIEhhbmRsZWJhcnMgPSByZXF1aXJlKFwiaGFuZGxlYmFyc1wiKTtcbmZ1bmN0aW9uIF9fZGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiAob2JqLl9fZXNNb2R1bGUgPyBvYmpbXCJkZWZhdWx0XCJdIDogb2JqKTsgfVxubW9kdWxlLmV4cG9ydHMgPSAoSGFuZGxlYmFyc1tcImRlZmF1bHRcIl0gfHwgSGFuZGxlYmFycykudGVtcGxhdGUoe1wiMVwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhLGJsb2NrUGFyYW1zLGRlcHRocykge1xuICAgIHZhciBzdGFjazEsIGFsaWFzMT1jb250YWluZXIubGFtYmRhLCBhbGlhczI9Y29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb24sIGFsaWFzMz1kZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pO1xuXG4gIHJldHVybiBcIiAgICAgICAgPGRpdiBjbGFzcz1cXFwiaXRlbSBmYWNldC1pdGVtXFxcIiBkYXRhLWF0dHItbmFtZT1cXFwiXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCJcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRlbnRcXFwiPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmYWNldC1pdGVtLWhlYWRlciBmbHVpZCBjdXJzb3ItcG9pbnRlciBndWkgc2VsZWN0YWJsZSBpdGVtXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJndWkgZ3VpLXN1YmhlYWRpbmctMiBwcmltYXJ5XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIiBcIlxuICAgICsgKChzdGFjazEgPSBfX2RlZmF1bHQocmVxdWlyZShcIkM6XFxcXFVzZXJzXFxcXHJvdXN0dXJnXFxcXFNvdXJjZVxcXFxSZXBvc1xcXFxTZWFyY2hNYXN0ZXJcXFxcRmFjZXRvb1xcXFxzcmNcXFxcaGJzXFxcXGhlbHBlcnNcXFxcU2VsZWN0ZWRGaWx0ZXJzQ291bnQudHNcIikpLmNhbGwoYWxpYXMzLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5mYWNldFZhbHVlcyA6IGRlcHRoMCkse1wibmFtZVwiOlwiU2VsZWN0ZWRGaWx0ZXJzQ291bnRcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCJcXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJndWkgZ3VpLWljb24gZ3VpLWljb24tY2hldnJvbi1kb3duIHJpZ2h0IG0tci0xMFxcXCI+PC9pPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY2xlYXJcXFwiPjwvZGl2PlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJkZXNjcmlwdGlvbiBndWkgZ3VpLWhpZGRlbiBmYWNldC1pdGVtLWRlc2NyaXB0aW9uIG0tdC01XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImd1aSBmbHVpZC13IGZsdWlkLWggbS0wIHAtMFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJcbiAgICArICgoc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoYWxpYXMzLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5mYWNldFZhbHVlcyA6IGRlcHRoMCkse1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgyLCBkYXRhLCAwLCBibG9ja1BhcmFtcywgZGVwdGhzKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCIgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcblwiO1xufSxcIjJcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSxibG9ja1BhcmFtcyxkZXB0aHMpIHtcbiAgICB2YXIgc3RhY2sxO1xuXG4gIHJldHVybiBcIiBcXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJpdGVtXFxcIj5cXG5cIlxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzW1wiaWZcIl0uY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5zZWxlY3RlZCA6IGRlcHRoMCkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMywgZGF0YSwgMCwgYmxvY2tQYXJhbXMsIGRlcHRocyksXCJpbnZlcnNlXCI6Y29udGFpbmVyLnByb2dyYW0oNSwgZGF0YSwgMCwgYmxvY2tQYXJhbXMsIGRlcHRocyksXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuXCI7XG59LFwiM1wiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhLGJsb2NrUGFyYW1zLGRlcHRocykge1xuICAgIHZhciBhbGlhczE9Y29udGFpbmVyLmxhbWJkYSwgYWxpYXMyPWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uLCBhbGlhczM9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KTtcblxuICByZXR1cm4gXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIHRpdGxlPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGFiZWwgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIGNsYXNzPVxcXCJndWkgY3Vyc29yLXBvaW50ZXIgbm8td3JhcCBwcmltYXJ5XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cXFwiZ3VpIGZhY2V0LXZhbHVlLWNoZWNrYm94IGN1cnNvci1wb2ludGVyIG0tbC0wXFxcIiBpZD1cXFwiXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmxhYmVsIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiLVwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkYXRhICYmIGRhdGEuaW5kZXgpLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIFwiXG4gICAgKyBhbGlhczIoX19kZWZhdWx0KHJlcXVpcmUoXCJDOlxcXFxVc2Vyc1xcXFxyb3VzdHVyZ1xcXFxTb3VyY2VcXFxcUmVwb3NcXFxcU2VhcmNoTWFzdGVyXFxcXEZhY2V0b29cXFxcc3JjXFxcXGhic1xcXFxoZWxwZXJzXFxcXENoZWNrZWQudHNcIikpLmNhbGwoYWxpYXMzLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5zZWxlY3RlZCA6IGRlcHRoMCkse1wibmFtZVwiOlwiQ2hlY2tlZFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSlcbiAgICArIFwiIFwiXG4gICAgKyBhbGlhczIoX19kZWZhdWx0KHJlcXVpcmUoXCJDOlxcXFxVc2Vyc1xcXFxyb3VzdHVyZ1xcXFxTb3VyY2VcXFxcUmVwb3NcXFxcU2VhcmNoTWFzdGVyXFxcXEZhY2V0b29cXFxcc3JjXFxcXGhic1xcXFxoZWxwZXJzXFxcXERpc2FibGVkLnRzXCIpKS5jYWxsKGFsaWFzMywoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuZGlzYWJsZWQgOiBkZXB0aDApLHtcIm5hbWVcIjpcIkRpc2FibGVkXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKVxuICAgICsgXCIgdmFsdWU9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aHNbMV0gIT0gbnVsbCA/IGRlcHRoc1sxXS5pZCA6IGRlcHRoc1sxXSksIGRlcHRoMCkpXG4gICAgKyBcIjpcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGFiZWwgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCI6XCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoc1sxXSAhPSBudWxsID8gZGVwdGhzWzFdLnR5cGUgOiBkZXB0aHNbMV0pLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIHR5cGU9XFxcImNoZWNrYm94XFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmxhYmVsIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiZ3VpLWJvZHktMlxcXCI+KFwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jb3VudCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIik8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XFxuXCI7XG59LFwiNVwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhLGJsb2NrUGFyYW1zLGRlcHRocykge1xuICAgIHZhciBhbGlhczE9Y29udGFpbmVyLmxhbWJkYSwgYWxpYXMyPWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uLCBhbGlhczM9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KTtcblxuICByZXR1cm4gXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIHRpdGxlPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGFiZWwgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIGNsYXNzPVxcXCJndWkgY3Vyc29yLXBvaW50ZXIgbm8td3JhcFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XFxcImd1aSBmYWNldC12YWx1ZS1jaGVja2JveCBjdXJzb3ItcG9pbnRlciBtLWwtMFxcXCIgaWQ9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5sYWJlbCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIi1cIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGF0YSAmJiBkYXRhLmluZGV4KSwgZGVwdGgwKSlcbiAgICArIFwiXFxcIiBcIlxuICAgICsgYWxpYXMyKF9fZGVmYXVsdChyZXF1aXJlKFwiQzpcXFxcVXNlcnNcXFxccm91c3R1cmdcXFxcU291cmNlXFxcXFJlcG9zXFxcXFNlYXJjaE1hc3RlclxcXFxGYWNldG9vXFxcXHNyY1xcXFxoYnNcXFxcaGVscGVyc1xcXFxDaGVja2VkLnRzXCIpKS5jYWxsKGFsaWFzMywoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuc2VsZWN0ZWQgOiBkZXB0aDApLHtcIm5hbWVcIjpcIkNoZWNrZWRcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpXG4gICAgKyBcIiBcIlxuICAgICsgYWxpYXMyKF9fZGVmYXVsdChyZXF1aXJlKFwiQzpcXFxcVXNlcnNcXFxccm91c3R1cmdcXFxcU291cmNlXFxcXFJlcG9zXFxcXFNlYXJjaE1hc3RlclxcXFxGYWNldG9vXFxcXHNyY1xcXFxoYnNcXFxcaGVscGVyc1xcXFxEaXNhYmxlZC50c1wiKSkuY2FsbChhbGlhczMsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmRpc2FibGVkIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJEaXNhYmxlZFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSlcbiAgICArIFwiIHZhbHVlPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGhzWzFdICE9IG51bGwgPyBkZXB0aHNbMV0uaWQgOiBkZXB0aHNbMV0pLCBkZXB0aDApKVxuICAgICsgXCI6XCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmxhYmVsIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiOlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aHNbMV0gIT0gbnVsbCA/IGRlcHRoc1sxXS50eXBlIDogZGVwdGhzWzFdKSwgZGVwdGgwKSlcbiAgICArIFwiXFxcIiB0eXBlPVxcXCJjaGVja2JveFxcXCIgLz5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5sYWJlbCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImd1aS1ib2R5LTJcXFwiPihcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY291bnQgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCIpPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxcblwiO1xufSxcImNvbXBpbGVyXCI6WzcsXCI+PSA0LjAuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSxibG9ja1BhcmFtcyxkZXB0aHMpIHtcbiAgICB2YXIgc3RhY2sxO1xuXG4gIHJldHVybiBcIjxkaXYgY2xhc3M9XFxcImd1aSBmbHVpZC1oIG9mLWhpZGRlblxcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcImd1aSBtLTVcXFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiZ3VpIGxlZnRcXFwiPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJndWkgY2FwcyBib2xkIGd1aS1zdWJoZWFkaW5nLTJcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgRmlsdGVyIEJ5XFxuICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJndWkgcmlnaHRcXFwiPlxcbiAgICAgICAgICAgIDxhIGNsYXNzPVxcXCJndWkgY3Vyc29yLXBvaW50ZXIgaGlkZS1mYWNldFxcXCI+XFxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJndWktaWNvbiBndWktaWNvbi1jaGV2cm9uLWxlZnRcXFwiPjwvaT5cXG4gICAgICAgICAgICA8L2E+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XFxcImd1aSBjbGVhclxcXCI+PC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XFxcImd1aSBtLXQtNVxcXCI+PC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XFxcImd1aSBsZWZ0XFxcIj5cXG4gICAgICAgIDxhIGNsYXNzPVxcXCJndWkgY3Vyc29yLXBvaW50ZXIgZXhwYW5kLWFsbFxcXCI+XFxuICAgICAgICAgICAgPGkgY2xhc3M9XFxcImd1aS1pY29uIGd1aS1pY29uLWFkZFxcXCI+PC9pPlxcbiAgICAgICAgICAgIEV4cGFuZCBBbGxcXG4gICAgICAgIDwvYT5cXG4gICAgICAgIDxhIGNsYXNzPVxcXCJndWkgY3Vyc29yLXBvaW50ZXIgbS1sLTEwIGNvbGxhcHNlLWFsbFxcXCI+XFxuICAgICAgICAgICAgPGkgY2xhc3M9XFxcImd1aS1pY29uICBndWktaWNvbi1taW51c1xcXCI+PC9pPlxcbiAgICAgICAgICAgIENvbGxhcHNlIEFsbFxcbiAgICAgICAgPC9hPlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiZ3VpIGNsZWFyXFxcIj48L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiZ3VpIG0tdC01XFxcIj48L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiZ3VpIGlucHV0IGZsdWlkLXcgcC10LTUgcC1yLTUgcC1iLTUgcC1sLTFcXFwiPlxcbiAgICAgICAgPGlucHV0IGNsYXNzPVxcXCJndWkgaW5wdXQgcC01IGZsdWlkLXcgZ3VpLXN1YmhlYWRpbmctMiBmaWx0ZXItc2VhcmNoLWlucHV0XFxcIiBwbGFjZWhvbGRlcj1cXFwiU2VhcmNoIEZpbHRlcnNcXFwiIC8+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJndWkgZmx1aWQtaCBmYWNldC1saXN0IG9mLWF1dG9cXFwiPlxcblwiXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnMuZWFjaC5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmZhY2V0cyA6IGRlcHRoMCkse1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgxLCBkYXRhLCAwLCBibG9ja1BhcmFtcywgZGVwdGhzKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCIgICAgPC9kaXY+XFxuPC9kaXY+XCI7XG59LFwidXNlRGF0YVwiOnRydWUsXCJ1c2VEZXB0aHNcIjp0cnVlfSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvaGJzL2ZhY2V0LWJvZHkuaGJzXG4vLyBtb2R1bGUgaWQgPSAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiY29uc3QgY2hlY2tlZCA9IChib29sOiBib29sZWFuKTogc3RyaW5nID0+IHtcclxuICAgIHJldHVybiBib29sID8gXCJjaGVja2VkXCIgOiBcIlwiO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2hlY2tlZDtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXI/P3JlZi0tMSEuL3NyYy9oYnMvaGVscGVycy9DaGVja2VkLnRzIiwiY29uc3QgZGlzYWJsZWQgPSAoYm9vbDogYm9vbGVhbik6IHN0cmluZyA9PiB7XHJcbiAgICByZXR1cm4gYm9vbCA/IFwiZGlzYWJsZWRcIiA6IFwiXCI7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBkaXNhYmxlZDtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXI/P3JlZi0tMSEuL3NyYy9oYnMvaGVscGVycy9EaXNhYmxlZC50cyIsImV4cG9ydCAqIGZyb20gXCIuL0V4cGFuZENvbGxhcHNlRmFjZXRzSGFuZGxlclwiO1xyXG5leHBvcnQgKiBmcm9tICBcIi4vRmFjZXRBY3Rpb25IYW5kbGVyXCI7XHJcbmV4cG9ydCAqIGZyb20gIFwiLi9GYWNldFNlYXJjaEhhbmRsZXJcIjtcclxuZXhwb3J0ICogZnJvbSAgXCIuL0ZpbHRlckFjdGlvbkhhbmRsZXJcIjtcclxuZXhwb3J0ICogZnJvbSAgXCIuL0hpZGVGYWNldFNlY3Rpb25IYW5kbGVyXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL0lFdmVudEhhbmRsZXJcIjtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXI/P3JlZi0tMSEuL3NyYy90cy9ldmVudGhhbmRsZXJzL2luZGV4LnRzIiwiZXhwb3J0IGVudW0gRmlsdGVyQWN0aW9uVHlwZSB7XG4gICAgQWRkID0gXCJBZGRcIixcbiAgICBNaW51cyA9IFwiTWludXNcIixcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy90c2xpbnQtbG9hZGVyPz9yZWYtLTEhLi9zcmMvdHMvbW9kZWxzL0ZpbHRlckFjdGlvblR5cGUudHMiLCJleHBvcnQgKiBmcm9tIFwiLi9GYWNldFwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9GaWx0ZXJcIjtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXI/P3JlZi0tMSEuL3NyYy90cy9tYWluL0VudHJ5LnRzIiwiaW1wb3J0IHsgSUZhY2V0IH0gZnJvbSBcIi4uL21vZGVscy9JRmFjZXRcIjtcbmltcG9ydCB7IElGYWNldFZhbHVlIH0gZnJvbSBcIi4uL21vZGVscy9JRmFjZXRWYWx1ZVwiO1xuaW1wb3J0IHsgRmFjZXRUZW1wbGF0ZVNlcnZpY2UgfSBmcm9tIFwiLi4vc2VydmljZXMvRmFjZXRUZW1wbGF0ZVNlcnZpY2VcIjtcbmltcG9ydCB7IElGYWNldFRlbXBsYXRlU2VydmljZSB9IGZyb20gXCIuLi9zZXJ2aWNlcy9JRmFjZXRUZW1wbGF0ZVNlcnZpY2VcIjtcbmltcG9ydCB7IEZhY2V0Q29uZmlnU3RvcmUgfSBmcm9tIFwiLi8uLi9jb25maWcvRmFjZXRDb25maWdTdG9yZVwiO1xuaW1wb3J0IHsgSUZhY2V0T3B0aW9ucyB9IGZyb20gXCIuLy4uL2NvbmZpZy9JRmFjZXRPcHRpb25zXCI7XG5pbXBvcnQgeyBFeHBhbmRDb2xsYXBzZUZhY2V0c0hhbmRsZXIgLCBGYWNldEFjdGlvbkhhbmRsZXIsIEZhY2V0U2VhcmNoSGFuZGxlcixcbiAgICAgICAgIEhpZGVGYWNldFNlY3Rpb25IYW5kbGVyLCBJRXZlbnRIYW5kbGVyIH0gZnJvbSBcIi4vLi4vZXZlbnRoYW5kbGVyc1wiO1xuXG5leHBvcnQgY2xhc3MgRmFjZXQge1xuICAgIHByaXZhdGUgY29uZmlnU3RvcmU6IEZhY2V0Q29uZmlnU3RvcmU7XG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZVNlcnZpY2U6IElGYWNldFRlbXBsYXRlU2VydmljZTtcbiAgICBwcml2YXRlIGZhY2V0RWxlbWVudDogSlF1ZXJ5O1xuICAgIHByaXZhdGUgaGFuZGxlckNoYWluOiBJRXZlbnRIYW5kbGVyW10gPSBbXTtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zOiBJRmFjZXRPcHRpb25zKSB7XG4gICAgICAgIHRoaXMuY29uZmlnU3RvcmUgPSAgbmV3IEZhY2V0Q29uZmlnU3RvcmUob3B0aW9ucyk7XG4gICAgICAgIHRoaXMuZmFjZXRFbGVtZW50ID0galF1ZXJ5KG9wdGlvbnMuY29udGFpbmVyRWxlbWVudCk7XG4gICAgICAgIHRoaXMudGVtcGxhdGVTZXJ2aWNlID0gbmV3IEZhY2V0VGVtcGxhdGVTZXJ2aWNlKHRoaXMuY29uZmlnU3RvcmUpO1xuICAgICAgICB0aGlzLmhhbmRsZXJDaGFpbi5wdXNoKG5ldyBFeHBhbmRDb2xsYXBzZUZhY2V0c0hhbmRsZXIodGhpcy5mYWNldEVsZW1lbnQpKTtcbiAgICAgICAgdGhpcy5oYW5kbGVyQ2hhaW4ucHVzaChuZXcgRmFjZXRBY3Rpb25IYW5kbGVyKHRoaXMuZmFjZXRFbGVtZW50LCB0aGlzLmNvbmZpZ1N0b3JlKSk7XG4gICAgICAgIHRoaXMuaGFuZGxlckNoYWluLnB1c2gobmV3IEZhY2V0U2VhcmNoSGFuZGxlcih0aGlzLmZhY2V0RWxlbWVudCkpO1xuICAgICAgICB0aGlzLmhhbmRsZXJDaGFpbi5wdXNoKG5ldyBIaWRlRmFjZXRTZWN0aW9uSGFuZGxlcih0aGlzLmZhY2V0RWxlbWVudCwgdGhpcy5jb25maWdTdG9yZSkpO1xuICAgICAgICB0aGlzLmhhbmRsZXJDaGFpbi5mb3JFYWNoKChoYW5kbGVyKSA9PiB7XG4gICAgICAgICAgICBoYW5kbGVyLlJlZ2lzdGVyRG9tSGFuZGxlcigpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcHVibGljIGJpbmQgPSAgKGZhY2V0czogSUZhY2V0W10pOiB2b2lkID0+IHtcbiAgICAgICAgY29uc3QgZnVsbEZhY2V0ID0gdGhpcy50ZW1wbGF0ZVNlcnZpY2UuYmluZChmYWNldHMpO1xuICAgICAgICB0aGlzLmZhY2V0RWxlbWVudC5odG1sKGZ1bGxGYWNldCk7XG4gICAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXI/P3JlZi0tMSEuL3NyYy90cy9tYWluL0ZhY2V0LnRzIiwiaW1wb3J0ICogYXMgSGFuZGxlYmFycyBmcm9tIFwiaGFuZGxlYmFyc1wiO1xuaW1wb3J0IHsgSUZhY2V0IH0gZnJvbSBcIi4uL21vZGVscy9JRmFjZXRcIjtcbmltcG9ydCAqIGFzIEZhY2V0TWFpbiBmcm9tIFwiLi8uLi8uLi9oYnMvZmFjZXQtbWFpbi5oYnNcIjtcbmltcG9ydCB7IEZhY2V0Q29uZmlnU3RvcmUgfSBmcm9tIFwiLi8uLi9jb25maWcvRmFjZXRDb25maWdTdG9yZVwiO1xuaW1wb3J0IHsgSUZhY2V0VGVtcGxhdGVTZXJ2aWNlIH0gZnJvbSBcIi4vSUZhY2V0VGVtcGxhdGVTZXJ2aWNlXCI7XG5cbmV4cG9ydCBjbGFzcyBGYWNldFRlbXBsYXRlU2VydmljZSBpbXBsZW1lbnRzIElGYWNldFRlbXBsYXRlU2VydmljZSB7XG4gIHByaXZhdGUgZGF0YTogSUZhY2V0W107XG4gIHByaXZhdGUgdGVtcGF0ZUZ1bmN0aW9uRm9yRmFjZXRNYWluOiBhbnk7XG4gIHByaXZhdGUgdGVtcGF0ZUZ1bmN0aW9uRm9yRmFjZXRIZWFkZXI6IGFueTtcbiAgcHJpdmF0ZSB0ZW1wYXRlRnVuY3Rpb25Gb3JGYWNldFN1YkhlYWRlcjogYW55O1xuICBwcml2YXRlIHRlbXBhdGVGdW5jdGlvbkZvckZhY2V0Qm9keTogYW55O1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbmZpZ1N0b3JlOiBGYWNldENvbmZpZ1N0b3JlKSB7XG4gICAgdGhpcy50ZW1wYXRlRnVuY3Rpb25Gb3JGYWNldE1haW4gPSBGYWNldE1haW47XG4gIH1cbiAgcHVibGljIGJpbmQoZmFjZXRzOiBJRmFjZXRbXSk6IHN0cmluZyB7XG4gICAgY29uc3QgY29sbGFwc2VkOiBib29sZWFuID0gdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLmNvbGxhcHNlZDtcbiAgICByZXR1cm4gdGhpcy50ZW1wYXRlRnVuY3Rpb25Gb3JGYWNldE1haW4oeyBjb2xsYXBzZWQsIGZhY2V0cyB9KTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXI/P3JlZi0tMSEuL3NyYy90cy9zZXJ2aWNlcy9GYWNldFRlbXBsYXRlU2VydmljZS50cyIsInZhciBIYW5kbGViYXJzID0gcmVxdWlyZShcImhhbmRsZWJhcnNcIik7XG5mdW5jdGlvbiBfX2RlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgKG9iai5fX2VzTW9kdWxlID8gb2JqW1wiZGVmYXVsdFwiXSA6IG9iaik7IH1cbm1vZHVsZS5leHBvcnRzID0gKEhhbmRsZWJhcnNbXCJkZWZhdWx0XCJdIHx8IEhhbmRsZWJhcnMpLnRlbXBsYXRlKHtcIjFcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBzdGFjazE7XG5cbiAgcmV0dXJuIFwiICAgIDxkaXYgY2xhc3M9XFxcImZhY2V0LWNvbGxhcHNlZC1ib2R5IGd1aSBmbHVpZC1oIHctYXV0b1xcXCI+XCJcbiAgICArICgoc3RhY2sxID0gY29udGFpbmVyLmludm9rZVBhcnRpYWwocmVxdWlyZShcIkM6XFxcXFVzZXJzXFxcXHJvdXN0dXJnXFxcXFNvdXJjZVxcXFxSZXBvc1xcXFxTZWFyY2hNYXN0ZXJcXFxcRmFjZXRvb1xcXFxzcmNcXFxcaGJzXFxcXGZhY2V0LWNvbGxhcHNlZC5oYnNcIiksZGVwdGgwLHtcIm5hbWVcIjpcImZhY2V0LWNvbGxhcHNlZFwiLFwiZGF0YVwiOmRhdGEsXCJoZWxwZXJzXCI6aGVscGVycyxcInBhcnRpYWxzXCI6cGFydGlhbHMsXCJkZWNvcmF0b3JzXCI6Y29udGFpbmVyLmRlY29yYXRvcnN9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIjwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJmYWNldC1ib2R5IGd1aSBmbHVpZC1oIG9mLWhpZGRlbiBndWktaGlkZGVuXFxcIj5cIlxuICAgICsgKChzdGFjazEgPSBjb250YWluZXIuaW52b2tlUGFydGlhbChyZXF1aXJlKFwiQzpcXFxcVXNlcnNcXFxccm91c3R1cmdcXFxcU291cmNlXFxcXFJlcG9zXFxcXFNlYXJjaE1hc3RlclxcXFxGYWNldG9vXFxcXHNyY1xcXFxoYnNcXFxcZmFjZXQtYm9keS5oYnNcIiksZGVwdGgwLHtcIm5hbWVcIjpcImZhY2V0LWJvZHlcIixcImRhdGFcIjpkYXRhLFwiaGVscGVyc1wiOmhlbHBlcnMsXCJwYXJ0aWFsc1wiOnBhcnRpYWxzLFwiZGVjb3JhdG9yc1wiOmNvbnRhaW5lci5kZWNvcmF0b3JzfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCI8L2Rpdj5cXG5cIjtcbn0sXCIzXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxO1xuXG4gIHJldHVybiBcIiAgICA8ZGl2IGNsYXNzPVxcXCJmYWNldC1jb2xsYXBzZWQtYm9keSBndWkgZmx1aWQtaCB3LWF1dG8gZ3VpLWhpZGRlblxcXCI+XCJcbiAgICArICgoc3RhY2sxID0gY29udGFpbmVyLmludm9rZVBhcnRpYWwocmVxdWlyZShcIkM6XFxcXFVzZXJzXFxcXHJvdXN0dXJnXFxcXFNvdXJjZVxcXFxSZXBvc1xcXFxTZWFyY2hNYXN0ZXJcXFxcRmFjZXRvb1xcXFxzcmNcXFxcaGJzXFxcXGZhY2V0LWNvbGxhcHNlZC5oYnNcIiksZGVwdGgwLHtcIm5hbWVcIjpcImZhY2V0LWNvbGxhcHNlZFwiLFwiZGF0YVwiOmRhdGEsXCJoZWxwZXJzXCI6aGVscGVycyxcInBhcnRpYWxzXCI6cGFydGlhbHMsXCJkZWNvcmF0b3JzXCI6Y29udGFpbmVyLmRlY29yYXRvcnN9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIjwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJmYWNldC1ib2R5IGd1aSBmbHVpZC1oIG9mLWhpZGRlblxcXCI+XCJcbiAgICArICgoc3RhY2sxID0gY29udGFpbmVyLmludm9rZVBhcnRpYWwocmVxdWlyZShcIkM6XFxcXFVzZXJzXFxcXHJvdXN0dXJnXFxcXFNvdXJjZVxcXFxSZXBvc1xcXFxTZWFyY2hNYXN0ZXJcXFxcRmFjZXRvb1xcXFxzcmNcXFxcaGJzXFxcXGZhY2V0LWJvZHkuaGJzXCIpLGRlcHRoMCx7XCJuYW1lXCI6XCJmYWNldC1ib2R5XCIsXCJkYXRhXCI6ZGF0YSxcImhlbHBlcnNcIjpoZWxwZXJzLFwicGFydGlhbHNcIjpwYXJ0aWFscyxcImRlY29yYXRvcnNcIjpjb250YWluZXIuZGVjb3JhdG9yc30pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiPC9kaXY+XFxuXCI7XG59LFwiY29tcGlsZXJcIjpbNyxcIj49IDQuMC4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMTtcblxuICByZXR1cm4gXCI8ZGl2IGNsYXNzPVxcXCJndWkgZmx1aWQtaCBcXFwiPlxcblwiXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnNbXCJpZlwiXS5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNvbGxhcHNlZCA6IGRlcHRoMCkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMSwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLnByb2dyYW0oMywgZGF0YSwgMCksXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiPC9kaXY+XCI7XG59LFwidXNlUGFydGlhbFwiOnRydWUsXCJ1c2VEYXRhXCI6dHJ1ZX0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2hicy9mYWNldC1tYWluLmhic1xuLy8gbW9kdWxlIGlkID0gMTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCJpbXBvcnQgeyBJRmFjZXRWYWx1ZSB9IGZyb20gXCIuLi8uLi8uLi9pbmRleFwiO1xyXG5cclxuY29uc3Qgc2VsZWN0ZWRGaWx0ZXJzQ291bnQgPSAoZmFjZXRWYWx1ZXM6IElGYWNldFZhbHVlW10pOiBzdHJpbmcgPT4ge1xyXG4gICAgbGV0IGluZGV4ID0gMDtcclxuICAgIGlmIChmYWNldFZhbHVlcyAhPT0gdW5kZWZpbmVkXHJcbiAgICAgICAgJiYgZmFjZXRWYWx1ZXMgIT09IG51bGxcclxuICAgICAgICAmJiBmYWNldFZhbHVlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgZmFjZXRWYWx1ZSBvZiBmYWNldFZhbHVlcykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGZhY2V0VmFsdWUuc2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaW5kZXggPT09IDAgPyBcIlwiIDogXCI8c3BhbiBjbGFzcz1cXFwiZ3VpLWJvZHktMlxcXCI+KFwiICsgaW5kZXggKyBcIik8L3NwYW4+XCI7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBzZWxlY3RlZEZpbHRlcnNDb3VudDtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXI/P3JlZi0tMSEuL3NyYy9oYnMvaGVscGVycy9TZWxlY3RlZEZpbHRlcnNDb3VudC50cyIsImltcG9ydCB7RmlsdGVyQWN0aW9uVHlwZX0gZnJvbSBcIi4uL21vZGVscy9GaWx0ZXJBY3Rpb25UeXBlXCI7XG5pbXBvcnQge0lGYWNldE9wdGlvbnN9IGZyb20gXCIuL0lGYWNldE9wdGlvbnNcIjtcblxuZXhwb3J0IGNsYXNzIEZhY2V0Q29uZmlnU3RvcmUge1xuICAgIHByaXZhdGUgb3B0aW9uczogSUZhY2V0T3B0aW9ucztcbiAgICBwcml2YXRlIGRlZmF1bHRGYWNldE9wdGlvbnM6IElGYWNldE9wdGlvbnMgPSB7XG4gICAgICAgIGNvbGxhcHNlZDogZmFsc2UsXG4gICAgICAgIGNvbnRhaW5lckVsZW1lbnQ6IG51bGwsXG4gICAgICAgIC8vIGZhY2V0czogW10sXG4gICAgICAgIG9uRmlsdGVyQ2hhbmdlOiAoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIGFjdGlvbjogRmlsdGVyQWN0aW9uVHlwZSk6IHZvaWQgPT4ge1xuICAgICAgICAgICAgLy8gSWdub3JlXG4gICAgICAgIH0sXG4gICAgfTtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zOiBJRmFjZXRPcHRpb25zKSB7XG4gICAgICAgIHRoaXMuZXh0ZW5kT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgaWYgKG9wdGlvbnMuY29udGFpbmVyRWxlbWVudCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUGxlYXNlIFByb3ZpZGUgYSB2YWxpZCBjb250YWluZXIgRWxlbWVudCBvYmplY3RcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHVibGljIGdldCBPcHRpb25zKCk6IElGYWNldE9wdGlvbnMge3JldHVybiB0aGlzLm9wdGlvbnM7IH1cbiAgICBwcml2YXRlIGV4dGVuZE9wdGlvbnMgPSAoaW5wdXRPcHRpb25zOiBJRmFjZXRPcHRpb25zKTogSUZhY2V0T3B0aW9ucyA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMgPSBqUXVlcnkuZXh0ZW5kKHt9LCB0aGlzLmRlZmF1bHRGYWNldE9wdGlvbnMsIGlucHV0T3B0aW9ucyk7XG4gICAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXI/P3JlZi0tMSEuL3NyYy90cy9jb25maWcvRmFjZXRDb25maWdTdG9yZS50cyIsImltcG9ydCB7IElFdmVudEhhbmRsZXIgfSBmcm9tIFwiLi9JRXZlbnRIYW5kbGVyXCI7XG5cbmVudW0gU2hvd0hpZGUge1xuICAgIFNob3csXG4gICAgSGlkZSxcbiAgICBUb2dnbGUsXG59XG5cbmV4cG9ydCBjbGFzcyBFeHBhbmRDb2xsYXBzZUZhY2V0c0hhbmRsZXIgaW1wbGVtZW50cyBJRXZlbnRIYW5kbGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnQ6IEpRdWVyeSkge31cblxuICAgIHB1YmxpYyBSZWdpc3RlckRvbUhhbmRsZXIoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5vbihcImNsaWNrXCIsIFwiLmV4cGFuZC1hbGxcIiwgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuZmluZChcIi5mYWNldC1pdGVtLWhlYWRlclwiKS5lYWNoKChpbmRleCwgZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuQ29udHJvbFZpc2liaWxpdHlPZkZpbHRlcihqUXVlcnkoZWxlbWVudCksIFNob3dIaWRlLlNob3cpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZWxlbWVudC5vbihcImNsaWNrXCIsIFwiLmNvbGxhcHNlLWFsbFwiLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5maW5kKFwiLmZhY2V0LWl0ZW0taGVhZGVyXCIpLmVhY2goKGluZGV4LCBlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5Db250cm9sVmlzaWJpbGl0eU9mRmlsdGVyKGpRdWVyeShlbGVtZW50KSwgU2hvd0hpZGUuSGlkZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5lbGVtZW50Lm9uKFwiY2xpY2tcIiwgXCIuZmFjZXQtaXRlbS1oZWFkZXJcIiwgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBqUXVlcnkoZXZlbnQudGFyZ2V0KTtcbiAgICAgICAgICAgIGNvbnN0IGhlYWRlckVsZW1lbnQgPSB0YXJnZXQuaXMoXCIuZmFjZXQtaXRlbS1oZWFkZXJcIikgPyB0YXJnZXQgOiB0YXJnZXQucGFyZW50KFwiLmZhY2V0LWl0ZW0taGVhZGVyXCIpO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LmZpbmQoXCIuZmFjZXQtaGVhZGVyIC5idXR0b25cIikucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpO1xuICAgICAgICAgICAgdGhpcy5Db250cm9sVmlzaWJpbGl0eU9mRmlsdGVyKGhlYWRlckVsZW1lbnQsIFNob3dIaWRlLlRvZ2dsZSk7XG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHB1YmxpYyBvblJlc2l6ZSgpOiB2b2lkIHtcbiAgICAgICAgLy8gdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XG4gICAgfVxuICAgIHB1YmxpYyBvbkRvY3VtZW50Q2xpY2soZXZlbnQ6IGFueSk6IHZvaWQge1xuICAgICAgICAvLyB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcbiAgICB9XG4gICAgcHJpdmF0ZSBDb250cm9sVmlzaWJpbGl0eU9mRmlsdGVyID0gKGVsZW1lbnQ6IEpRdWVyeSwgc2hvd0hpZGU6IFNob3dIaWRlKSA9PiB7XG4gICAgICAgIGNvbnN0IGljb25FbGVtZW50ID0gZWxlbWVudC5jaGlsZHJlbihcImlcIik7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRseVZpc2libGUgPSBpY29uRWxlbWVudC5oYXNDbGFzcyhcImd1aS1pY29uLWNoZXZyb24tdXBcIik7XG4gICAgICAgIGlmIChTaG93SGlkZS5Ub2dnbGUgIT09IHNob3dIaWRlICYmICgoY3VycmVudGx5VmlzaWJsZSAmJiBzaG93SGlkZSA9PT0gU2hvd0hpZGUuU2hvdykgfHxcbiAgICAgICAgICAgICghY3VycmVudGx5VmlzaWJsZSAmJiBzaG93SGlkZSA9PT0gU2hvd0hpZGUuSGlkZSkpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFjdXJyZW50bHlWaXNpYmxlKSB7XG4gICAgICAgICAgICBlbGVtZW50LnBhcmVudHMoXCIuZmFjZXQtaXRlbVwiKS5maW5kKFwiLmZhY2V0LWl0ZW0tZGVzY3JpcHRpb25cIikuc2xpZGVEb3duKDIwMCk7XG4gICAgICAgICAgICBpY29uRWxlbWVudC5yZW1vdmVDbGFzcyhcImd1aS1pY29uLWNoZXZyb24tZG93blwiKTtcbiAgICAgICAgICAgIGljb25FbGVtZW50LmFkZENsYXNzKFwiZ3VpLWljb24tY2hldnJvbi11cFwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVsZW1lbnQucGFyZW50cyhcIi5mYWNldC1pdGVtXCIpLmZpbmQoXCIuZmFjZXQtaXRlbS1kZXNjcmlwdGlvblwiKS5zbGlkZVVwKDIwMCk7XG4gICAgICAgICAgICBpY29uRWxlbWVudC5yZW1vdmVDbGFzcyhcImd1aS1pY29uLWNoZXZyb24tdXBcIik7XG4gICAgICAgICAgICBpY29uRWxlbWVudC5hZGRDbGFzcyhcImd1aS1pY29uLWNoZXZyb24tZG93blwiKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy90c2xpbnQtbG9hZGVyPz9yZWYtLTEhLi9zcmMvdHMvZXZlbnRoYW5kbGVycy9FeHBhbmRDb2xsYXBzZUZhY2V0c0hhbmRsZXIudHMiLCJpbXBvcnQgeyBGYWNldENvbmZpZ1N0b3JlIH0gZnJvbSBcIi4uL2NvbmZpZy9GYWNldENvbmZpZ1N0b3JlXCI7XG5pbXBvcnQgeyBGaWx0ZXJBY3Rpb25UeXBlIH0gZnJvbSBcIi4uL21vZGVscy9GaWx0ZXJBY3Rpb25UeXBlXCI7XG5pbXBvcnQgeyBJRXZlbnRIYW5kbGVyIH0gZnJvbSBcIi4vSUV2ZW50SGFuZGxlclwiO1xuXG5leHBvcnQgY2xhc3MgRmFjZXRBY3Rpb25IYW5kbGVyIGltcGxlbWVudHMgSUV2ZW50SGFuZGxlciB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnQ6IEpRdWVyeSwgcHJpdmF0ZSBjb25maWdTdG9yZTogRmFjZXRDb25maWdTdG9yZSkge31cblxuICAgIHB1YmxpYyBSZWdpc3RlckRvbUhhbmRsZXIoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5vbihcImNoYW5nZVwiLCBcIi5mYWNldC1ib2R5IC5mYWNldC1pdGVtLWRlc2NyaXB0aW9uIC5mYWNldC12YWx1ZS1jaGVja2JveFwiLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBqUXVlcnkoZXZlbnQudGFyZ2V0KTtcbiAgICAgICAgICAgIGNvbnN0IHZhbFN0ciA9IGVsZW1lbnQudmFsKCkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdmFsU3RyLnNwbGl0KFwiOlwiKTtcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrZWQgPSBlbGVtZW50LmlzKFwiOmNoZWNrZWRcIik7XG4gICAgICAgICAgICBjb25zdCBhY3Rpb24gPSBjaGVja2VkID8gRmlsdGVyQWN0aW9uVHlwZS5BZGQgOiBGaWx0ZXJBY3Rpb25UeXBlLk1pbnVzO1xuICAgICAgICAgICAgdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLm9uRmlsdGVyQ2hhbmdlKHZhbHVlWzBdLCB2YWx1ZVsxXSwgYWN0aW9uLCB2YWx1ZVsyXSk7XG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHB1YmxpYyBvblJlc2l6ZSgpOiB2b2lkIHtcbiAgICAgICAgLy8gdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XG4gICAgfVxuICAgIHB1YmxpYyBvbkRvY3VtZW50Q2xpY2soZXZlbnQ6IGFueSk6IHZvaWQge1xuICAgICAgICAvLyB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcbiAgICB9XG5cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy90c2xpbnQtbG9hZGVyPz9yZWYtLTEhLi9zcmMvdHMvZXZlbnRoYW5kbGVycy9GYWNldEFjdGlvbkhhbmRsZXIudHMiLCJpbXBvcnQgeyBJRXZlbnRIYW5kbGVyIH0gZnJvbSBcIi4vSUV2ZW50SGFuZGxlclwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEZhY2V0U2VhcmNoSGFuZGxlciBpbXBsZW1lbnRzIElFdmVudEhhbmRsZXIge1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50OiBKUXVlcnkpIHt9XHJcblxyXG4gICAgcHVibGljIFJlZ2lzdGVyRG9tSGFuZGxlcigpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnQub24oXCJrZXl1cFwiLCBcIi5maWx0ZXItc2VhcmNoLWlucHV0XCIsIChldmVudCk6IHZvaWQgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0galF1ZXJ5KGV2ZW50LnRhcmdldCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbCA9IGVsZW1lbnQudmFsKCkudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuZmluZChcIi5mYWNldC1saXN0IC5mYWNldC1pdGVtXCIpLmVhY2goKGk6IG51bWJlciwgZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGpRdWVyeShlKS5hdHRyKFwiZGF0YS1hdHRyLW5hbWVcIikudG9Mb3dlckNhc2UoKS5pbmRleE9mKHZhbCkgPT09IC0xICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGpRdWVyeShlKS5mYWRlT3V0KDIwMCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGpRdWVyeShlKS5mYWRlSW4oMjAwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgfVxyXG4gICAgcHVibGljIG9uUmVzaXplKCk6IHZvaWQge1xyXG4gICAgICAgIC8vIElnbm9yZVxyXG4gICAgfVxyXG4gICAgcHVibGljIG9uRG9jdW1lbnRDbGljayhldmVudDogYW55KTogdm9pZCB7XHJcbiAgICAgICAgLy8gSWdub3JlXHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXI/P3JlZi0tMSEuL3NyYy90cy9ldmVudGhhbmRsZXJzL0ZhY2V0U2VhcmNoSGFuZGxlci50cyIsImltcG9ydCB7IEZpbHRlckNvbmZpZ1N0b3JlIH0gZnJvbSBcIi4uL2NvbmZpZy9GaWx0ZXJDb25maWdTdG9yZVwiO1xyXG5pbXBvcnQgeyBGaWx0ZXJBY3Rpb25UeXBlIH0gZnJvbSBcIi4uL21vZGVscy9GaWx0ZXJBY3Rpb25UeXBlXCI7XHJcbmltcG9ydCB7IElFdmVudEhhbmRsZXIgfSBmcm9tIFwiLi9JRXZlbnRIYW5kbGVyXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgRmlsdGVyQWN0aW9uSGFuZGxlciBpbXBsZW1lbnRzIElFdmVudEhhbmRsZXIge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZmlsdGVyRWxlbWVudDogSlF1ZXJ5LCBwcml2YXRlIGNvbmZpZ1N0b3JlOiBGaWx0ZXJDb25maWdTdG9yZSkge31cclxuXHJcbiAgICBwdWJsaWMgUmVnaXN0ZXJEb21IYW5kbGVyKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZmlsdGVyRWxlbWVudC5vbihcImNsaWNrXCIsIFwiLmZhY2V0LXN1YmhlYWRlciAuZmFjZXQtbGFiZWxzIC5sYWJlbFwiLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgbGV0IGVsZW1lbnQgPSBqUXVlcnkoZXZlbnQudGFyZ2V0KTtcclxuICAgICAgICAgICAgaWYgKCFlbGVtZW50LmlzKFwiLmxhYmVsXCIpKSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnRzKFwiLmxhYmVsXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbFN0ciA9IGVsZW1lbnQuYXR0cihcImRhdGEtZmlsdGVyLWVudHJ5XCIpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdmFsU3RyLnNwbGl0KFwiOlwiKTtcclxuICAgICAgICAgICAgdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLm9uRmlsdGVyQ2hhbmdlKHZhbHVlWzBdLCB2YWx1ZVsxXSwgRmlsdGVyQWN0aW9uVHlwZS5NaW51cywgdmFsdWVbMl0pO1xyXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmZpbHRlckVsZW1lbnQub24oXCJjbGlja1wiLCBcIi5mYWNldC1zdWJoZWFkZXIgLnJlbW92ZS1hbGxcIiwgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5vbkFsbEZpbHRlclJlbW92ZSgpO1xyXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBvblJlc2l6ZSgpOiB2b2lkIHtcclxuICAgICAgICAvLyB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBvbkRvY3VtZW50Q2xpY2soZXZlbnQ6IGFueSk6IHZvaWQge1xyXG4gICAgICAgIC8vIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4gICAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvdHNsaW50LWxvYWRlcj8/cmVmLS0xIS4vc3JjL3RzL2V2ZW50aGFuZGxlcnMvRmlsdGVyQWN0aW9uSGFuZGxlci50cyIsImltcG9ydCB7IEZhY2V0Q29uZmlnU3RvcmUgfSBmcm9tIFwiLi4vY29uZmlnL0ZhY2V0Q29uZmlnU3RvcmVcIjtcclxuaW1wb3J0IHsgSUV2ZW50SGFuZGxlciB9IGZyb20gXCIuL0lFdmVudEhhbmRsZXJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBIaWRlRmFjZXRTZWN0aW9uSGFuZGxlciBpbXBsZW1lbnRzIElFdmVudEhhbmRsZXIge1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50OiBKUXVlcnksIHByaXZhdGUgY29uZmlnU3RvcmU6IEZhY2V0Q29uZmlnU3RvcmUpIHt9XHJcblxyXG4gICAgcHVibGljIFJlZ2lzdGVyRG9tSGFuZGxlciA9ICgpOiB2b2lkID0+IHtcclxuICAgICAgICB0aGlzLmVsZW1lbnQub24oXCJjbGlja1wiLCBcIi5oaWRlLWZhY2V0XCIsIChldmVudCk6IHZvaWQgPT4ge1xyXG4gICAgICAgICAgICAkKFwiLmZhY2V0LWJvZHlcIikuaGlkZSgpO1xyXG4gICAgICAgICAgICAkKFwiLmZhY2V0LWNvbGxhcHNlZC1ib2R5XCIpLmZhZGVJbigyMDApO1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMuY29sbGFwc2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50Lm9uKFwiY2xpY2tcIiwgXCIuc2hvdy1mYWNldFwiLCAoZXZlbnQpOiB2b2lkID0+IHtcclxuICAgICAgICAgICAgJChcIi5mYWNldC1jb2xsYXBzZWQtYm9keVwiKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICQoXCIuZmFjZXQtYm9keVwiKS5mYWRlSW4oMjAwKTtcclxuICAgICAgICAgICAgdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLmNvbGxhcHNlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBvblJlc2l6ZSgpOiB2b2lkIHtcclxuICAgICAgICAvLyBJZ25vcmVcclxuICAgIH1cclxuICAgIHB1YmxpYyBvbkRvY3VtZW50Q2xpY2soZXZlbnQ6IGFueSk6IHZvaWQge1xyXG4gICAgICAgIC8vIElnbm9yZVxyXG4gICAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy90c2xpbnQtbG9hZGVyPz9yZWYtLTEhLi9zcmMvdHMvZXZlbnRoYW5kbGVycy9IaWRlRmFjZXRTZWN0aW9uSGFuZGxlci50cyIsImltcG9ydCB7IElGaWx0ZXJPcHRpb25zIH0gZnJvbSBcIi4uL2NvbmZpZy9JRmlsdGVyT3B0aW9uc1wiO1xyXG5pbXBvcnQgeyBJRmFjZXQgfSBmcm9tIFwiLi4vbW9kZWxzL0lGYWNldFwiO1xyXG5pbXBvcnQgeyBGaWx0ZXJUZW1wbGF0ZVNlcnZpY2UgfSBmcm9tIFwiLi4vc2VydmljZXMvRmlsdGVyVGVtcGxhdGVTZXJ2aWNlXCI7XHJcbmltcG9ydCB7IElGaWx0ZXJUZW1wbGF0ZVNlcnZpY2UgfSBmcm9tIFwiLi4vc2VydmljZXMvSUZpbHRlclRlbXBsYXRlU2VydmljZVwiO1xyXG5pbXBvcnQgeyBGaWx0ZXJDb25maWdTdG9yZSB9IGZyb20gXCIuLy4uL2NvbmZpZy9GaWx0ZXJDb25maWdTdG9yZVwiO1xyXG5pbXBvcnQgeyBGaWx0ZXJBY3Rpb25IYW5kbGVyLCBJRXZlbnRIYW5kbGVyIH0gZnJvbSBcIi4vLi4vZXZlbnRoYW5kbGVyc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEZpbHRlciB7XHJcbiAgICBwcml2YXRlIGNvbmZpZ1N0b3JlOiBGaWx0ZXJDb25maWdTdG9yZTtcclxuICAgIHByaXZhdGUgdGVtcGxhdGVTZXJ2aWNlOiBJRmlsdGVyVGVtcGxhdGVTZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSBmaWx0ZXJFbGVtZW50OiBKUXVlcnk7XHJcbiAgICBwcml2YXRlIGhhbmRsZXJDaGFpbjogSUV2ZW50SGFuZGxlcltdID0gW107XHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zOiBJRmlsdGVyT3B0aW9ucykge1xyXG4gICAgICAgIHRoaXMuY29uZmlnU3RvcmUgPSAgbmV3IEZpbHRlckNvbmZpZ1N0b3JlKG9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuZmlsdGVyRWxlbWVudCA9IGpRdWVyeShvcHRpb25zLmNvbnRhaW5lckVsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMudGVtcGxhdGVTZXJ2aWNlID0gbmV3IEZpbHRlclRlbXBsYXRlU2VydmljZSgpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlckNoYWluLnB1c2gobmV3IEZpbHRlckFjdGlvbkhhbmRsZXIodGhpcy5maWx0ZXJFbGVtZW50LCB0aGlzLmNvbmZpZ1N0b3JlKSk7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyQ2hhaW4uZm9yRWFjaCgoaGFuZGxlcikgPT4ge1xyXG4gICAgICAgICAgICBoYW5kbGVyLlJlZ2lzdGVyRG9tSGFuZGxlcigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGJpbmQgPSAgKGZpbHRlcnM6IElGYWNldFtdKTogdm9pZCA9PiB7XHJcbiAgICAgICAgY29uc3QgZmFjZXRTdWJIZWFkZXIgPSB0aGlzLnRlbXBsYXRlU2VydmljZS5iaW5kKGZpbHRlcnMpO1xyXG4gICAgICAgIHRoaXMuZmlsdGVyRWxlbWVudC5odG1sKGZhY2V0U3ViSGVhZGVyKTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvdHNsaW50LWxvYWRlcj8/cmVmLS0xIS4vc3JjL3RzL21haW4vRmlsdGVyLnRzIiwiaW1wb3J0ICogYXMgSGFuZGxlYmFycyBmcm9tIFwiaGFuZGxlYmFyc1wiO1xyXG5pbXBvcnQgeyBJRmFjZXQgfSBmcm9tIFwiLi4vbW9kZWxzL0lGYWNldFwiO1xyXG5pbXBvcnQgKiBhcyBGYWNldFN1YkhlYWRlciBmcm9tIFwiLi8uLi8uLi9oYnMvZmFjZXQtYXBwbGllZC1maWx0ZXJzLmhic1wiO1xyXG5pbXBvcnQgeyBJRmlsdGVyVGVtcGxhdGVTZXJ2aWNlIH0gZnJvbSBcIi4vSUZpbHRlclRlbXBsYXRlU2VydmljZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEZpbHRlclRlbXBsYXRlU2VydmljZSBpbXBsZW1lbnRzIElGaWx0ZXJUZW1wbGF0ZVNlcnZpY2Uge1xyXG4gICAgcHJpdmF0ZSB0ZW1wYXRlRnVuY3Rpb25Gb3JGYWNldE1haW46IGFueTtcclxuICAgIHByaXZhdGUgdGVtcGF0ZUZ1bmN0aW9uRm9yRmFjZXRIZWFkZXI6IGFueTtcclxuICAgIHByaXZhdGUgdGVtcGF0ZUZ1bmN0aW9uRm9yRmFjZXRTdWJIZWFkZXI6IGFueTtcclxuICAgIHByaXZhdGUgdGVtcGF0ZUZ1bmN0aW9uRm9yRmFjZXRCb2R5OiBhbnk7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLnRlbXBhdGVGdW5jdGlvbkZvckZhY2V0U3ViSGVhZGVyID0gRmFjZXRTdWJIZWFkZXI7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgYmluZChmaWx0ZXJzOiBJRmFjZXRbXSk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudGVtcGF0ZUZ1bmN0aW9uRm9yRmFjZXRTdWJIZWFkZXIoe2ZpbHRlcnN9KTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvdHNsaW50LWxvYWRlcj8/cmVmLS0xIS4vc3JjL3RzL3NlcnZpY2VzL0ZpbHRlclRlbXBsYXRlU2VydmljZS50cyIsInZhciBIYW5kbGViYXJzID0gcmVxdWlyZShcImhhbmRsZWJhcnNcIik7XG5mdW5jdGlvbiBfX2RlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgKG9iai5fX2VzTW9kdWxlID8gb2JqW1wiZGVmYXVsdFwiXSA6IG9iaik7IH1cbm1vZHVsZS5leHBvcnRzID0gKEhhbmRsZWJhcnNbXCJkZWZhdWx0XCJdIHx8IEhhbmRsZWJhcnMpLnRlbXBsYXRlKHtcIjFcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSxibG9ja1BhcmFtcyxkZXB0aHMpIHtcbiAgICB2YXIgc3RhY2sxO1xuXG4gIHJldHVybiBcIjxkaXYgY2xhc3M9XFxcImNvbnRlbnQgZmFjZXQtc3ViaGVhZGVyIGd1aSBmbHVpZC13IGJhc2ljIGN1cnZlZCBwLTVcXFwiPlxcbiAgICA8c3BhbiBjbGFzcz1cXFwiZ3VpIGJvbGQgZ3VpLXN1YmhlYWRpbmctMiBjYXBzXFxcIj5BcHBsaWVkIEZpbHRlcnM8L3NwYW4+XFxuICAgIDxhIGNsYXNzPVxcXCJndWkgbS1sLTUgcmVtb3ZlLWFsbFxcXCIgPlxcbiAgICAgICAgPGkgY2xhc3M9XFxcImd1aS1pY29uIGd1aS1pY29uLWNhbmNlbFxcXCI+PC9pPlxcbiAgICAgICAgPHNwYW4+Q2xlYXIgQWxsPC9zcGFuPlxcbiAgICA8L2E+XFxuICAgIDxzcGFuIGNsYXNzPVxcXCJndWkgbS1sLTEwXFxcIj5cXG5cIlxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzLmVhY2guY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5maWx0ZXJzIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDIsIGRhdGEsIDAsIGJsb2NrUGFyYW1zLCBkZXB0aHMpLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIiAgICA8L3NwYW4+XFxuPC9kaXY+XFxuXCI7XG59LFwiMlwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhLGJsb2NrUGFyYW1zLGRlcHRocykge1xuICAgIHZhciBzdGFjazEsIGhlbHBlciwgYWxpYXMxPWRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSk7XG5cbiAgcmV0dXJuIFwiICAgICAgICA8c3BhbiBjbGFzcz1cXFwiZ3VpIG0tci01XFxcIj5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiZ3VpIGxhcmdlIGxhYmVscyBmYWNldC1sYWJlbHNcXFwiPlxcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiZ3VpIGd1aS1zdWJoZWFkaW5nLTJcXFwiPlwiXG4gICAgKyBjb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLm5hbWUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVycy5oZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gXCJmdW5jdGlvblwiID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcIm5hbWVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiPC9zcGFuPlxcblwiXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnMuZWFjaC5jYWxsKGFsaWFzMSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuZmFjZXRWYWx1ZXMgOiBkZXB0aDApLHtcIm5hbWVcIjpcImVhY2hcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMywgZGF0YSwgMCwgYmxvY2tQYXJhbXMsIGRlcHRocyksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgPC9zcGFuPlxcblwiO1xufSxcIjNcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSxibG9ja1BhcmFtcyxkZXB0aHMpIHtcbiAgICB2YXIgaGVscGVyLCBhbGlhczE9Y29udGFpbmVyLmxhbWJkYSwgYWxpYXMyPWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uO1xuXG4gIHJldHVybiBcIiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiZ3VpIG0tMCBtLXItMiBwLTQgbGFiZWwgY3Vyc29yLXBvaW50ZXIgc3RyaWtldGhyb3VnaC1ob3ZlclxcXCIgZGF0YS1maWx0ZXItZW50cnk9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aHNbMV0gIT0gbnVsbCA/IGRlcHRoc1sxXS5pZCA6IGRlcHRoc1sxXSksIGRlcHRoMCkpXG4gICAgKyBcIjpcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGFiZWwgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCI6XCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoc1sxXSAhPSBudWxsID8gZGVwdGhzWzFdLnR5cGUgOiBkZXB0aHNbMV0pLCBkZXB0aDApKVxuICAgICsgXCJcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgXCJcbiAgICArIGFsaWFzMigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLmxhYmVsIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5sYWJlbCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJzLmhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBcImZ1bmN0aW9uXCIgPyBoZWxwZXIuY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLHtcIm5hbWVcIjpcImxhYmVsXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIlxcbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XFxcImd1aS1pY29uIGd1aS1pY29uLWNhbmNlbFxcXCI+PC9pPlxcbiAgICAgICAgICAgICAgICA8L3NwYW4+XFxuXCI7XG59LFwiY29tcGlsZXJcIjpbNyxcIj49IDQuMC4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhLGJsb2NrUGFyYW1zLGRlcHRocykge1xuICAgIHZhciBzdGFjazE7XG5cbiAgcmV0dXJuICgoc3RhY2sxID0gaGVscGVyc1tcImlmXCJdLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSwoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5maWx0ZXJzIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5sZW5ndGggOiBzdGFjazEpLHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDEsIGRhdGEsIDAsIGJsb2NrUGFyYW1zLCBkZXB0aHMpLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpO1xufSxcInVzZURhdGFcIjp0cnVlLFwidXNlRGVwdGhzXCI6dHJ1ZX0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2hicy9mYWNldC1hcHBsaWVkLWZpbHRlcnMuaGJzXG4vLyBtb2R1bGUgaWQgPSAyMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsImltcG9ydCB7IEZpbHRlckFjdGlvblR5cGUgfSBmcm9tIFwiLi4vbW9kZWxzL0ZpbHRlckFjdGlvblR5cGVcIjtcclxuaW1wb3J0IHsgSUZpbHRlck9wdGlvbnMgfSBmcm9tIFwiLi9JRmlsdGVyT3B0aW9uc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEZpbHRlckNvbmZpZ1N0b3JlIHtcclxuICAgIHByaXZhdGUgb3B0aW9uczogSUZpbHRlck9wdGlvbnM7XHJcbiAgICBwcml2YXRlIGRlZmF1bHRmaWx0ZXJPcHRpb25zOiBJRmlsdGVyT3B0aW9ucyA9IHtcclxuICAgICAgICBjb250YWluZXJFbGVtZW50OiBudWxsLFxyXG4gICAgICAgIG9uQWxsRmlsdGVyUmVtb3ZlOiAoKSA9PiB7XHJcbiAgICAgICAgLy8gSWdub3JlXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkZpbHRlckNoYW5nZTogKGtleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCBhY3Rpb246IEZpbHRlckFjdGlvblR5cGUpOiB2b2lkID0+IHtcclxuICAgICAgICAvLyBJZ25vcmVcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IElGaWx0ZXJPcHRpb25zKSB7XHJcbiAgICAgICAgdGhpcy5leHRlbmRPcHRpb25zKG9wdGlvbnMpO1xyXG4gICAgICAgIGlmIChvcHRpb25zLmNvbnRhaW5lckVsZW1lbnQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUGxlYXNlIFByb3ZpZGUgYSB2YWxpZCBjb250YWluZXIgRWxlbWVudCBvYmplY3QgZm9yIGZpbHRlcnNcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHVibGljIGdldCBPcHRpb25zKCk6IElGaWx0ZXJPcHRpb25zIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBleHRlbmRPcHRpb25zID0gKGlucHV0T3B0aW9uczogSUZpbHRlck9wdGlvbnMpOiBJRmlsdGVyT3B0aW9ucyA9PiB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLm9wdGlvbnMgPSBqUXVlcnkuZXh0ZW5kKHt9LCB0aGlzLmRlZmF1bHRmaWx0ZXJPcHRpb25zLCBpbnB1dE9wdGlvbnMpKTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvdHNsaW50LWxvYWRlcj8/cmVmLS0xIS4vc3JjL3RzL2NvbmZpZy9GaWx0ZXJDb25maWdTdG9yZS50cyJdLCJzb3VyY2VSb290IjoiIn0=